<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://salmanhossain.me' rel='self' type='application/rss+xml'/>
<title>
Physics. Computers. Code.
</title>
<link>
http://salmanhossain.me
</link>
<description>
A place to share my knowledge
</description>
<lastBuildDate>
Fri, 21 Apr 2017 23:08:03 -0400
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
http://salmanhossain.me/posts/racket-intro2/
</guid>
<link>
http://salmanhossain.me/posts/racket-intro2/
</link>
<title>
Racket - Intro (2)
</title>
<description>
 &lt;p&gt;This is continuing off of the previous blog post on racket. Make sure you have gone through that before going to this. In this section we'll cover &lt;newcode&gt;booleans&lt;/newcode&gt;, &lt;newcode&gt;conditionals&lt;/newcode&gt; and &lt;newcode&gt;apply&lt;/newcode&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;;; Booleans
;; Racket uses #t and #f for true and false.

&amp;#40;= 2 &amp;#40;+ 1 1&amp;#41;&amp;#41;
&amp;#40;= 2 &amp;#40;+ 1 2&amp;#41;&amp;#41;

;; if statements in racket
;; First part is the conditional which is the &amp;#40;= 2 &amp;#40;+ 1 1&amp;#41;&amp;#41; which is #t
;; Second part is &amp;#40;println &amp;quot;True&amp;quot;&amp;#41; which is the true branch that'll execute if the condition is met.
;; Third part &amp;#40;println &amp;quot;False&amp;quot;&amp;#41; is the false branch which won't be executed.

&amp;#40;if &amp;#40;= 2 &amp;#40;+ 1 1&amp;#41;&amp;#41;
    &amp;#40;println &amp;quot;True&amp;quot;&amp;#41;
    &amp;#40;println &amp;quot;False&amp;quot;&amp;#41;&amp;#41;

;; Notice that and will return true if nothing provided.
;; and is #t if no arguments provided.
;; or is #f is no arguments provided.
;; and  will return the argument if only one argument is provided.
;; or will do the same if one argument is provided.

&amp;#40;define a 10&amp;#41;
&amp;#40;define b 5&amp;#41;

&amp;#40;and&amp;#41;
&amp;#40;and b&amp;#41;

&amp;#40;or&amp;#41;
&amp;#40;or b&amp;#41;

&amp;#40;and &amp;#40;even? a&amp;#41; &amp;#40;odd? b&amp;#41;&amp;#41;
&amp;#40;and &amp;#40;odd? a&amp;#41; &amp;#40;odd? b&amp;#41;&amp;#41;
&amp;#40;or &amp;#40;odd? a&amp;#41; &amp;#40;odd? b&amp;#41;&amp;#41;

;; Conditionals in racket
;; Must start with a bracket to start a conditional.
;; Than there is the testing condition and if its met executes.

&amp;#40;cond
  &amp;#91;&amp;#40;positive? n&amp;#41; &amp;#40;println &amp;quot;This number is positive&amp;quot;&amp;#41;&amp;#93;
  &amp;#91;&amp;#40;negative? n&amp;#41; &amp;#40;println &amp;quot;This number is negative&amp;quot;&amp;#41;&amp;#93;&amp;#41;


;; There is also an else if none of the conditionals are met.
;; Tells us if the quadradic has 2 roots, 1 root or imaginary roots.

&amp;#40;define &amp;#40;roots a b c&amp;#41;
  &amp;#40;let &amp;#40;&amp;#91;discriminant &amp;#40;- &amp;#40;expt b 2&amp;#41; &amp;#40;&amp;#42; 4 a c&amp;#41;&amp;#41;&amp;#93;&amp;#41;
    &amp;#40;cond
        &amp;#91;&amp;#40;positive? discriminant&amp;#41; &amp;#40;println &amp;quot;This quadradic has 2 roots&amp;quot;&amp;#41;&amp;#93;
        &amp;#91;&amp;#40;negative? discriminant&amp;#41; &amp;#40;println &amp;quot;This quadradic has imaginary roots&amp;quot;&amp;#41;&amp;#93;
        &amp;#91;else &amp;#40;println &amp;quot;This quadradic has 1 root&amp;quot;&amp;#41;&amp;#93;&amp;#41;&amp;#41;&amp;#41;

;; Also note that racket makes a distinction between let and let&amp;#42; like in lisp.
;; let won't allow you to use previous bindings as you would sometimes expect.
;; let&amp;#42; however does let you use previous bindings.
;; First one with let will provide an error because of the difference between let and let&amp;#42;
;; You'll find that num is undefined in the first one. Second one works fine.

&amp;#40;let &amp;#91;&amp;#40;num 10&amp;#41;
      &amp;#40;result &amp;#40;+ 2 num&amp;#41;&amp;#41;&amp;#93;
  result&amp;#41;

&amp;#40;let&amp;#42; &amp;#91;&amp;#40;num 10&amp;#41;
       &amp;#40;result &amp;#40;+ 2 num&amp;#41;&amp;#41;&amp;#93;
  result&amp;#41;

;; Apply which will distribute the prodecure across the list.
;; Notice that the last argument for apply must be a list.

&amp;#40;apply &amp;#42; '&amp;#40;1 2 3 4&amp;#41;&amp;#41;

&amp;#40;apply &amp;#42; 1 2 '&amp;#40;3 4&amp;#41;&amp;#41;

&amp;#40;apply &amp;#42; 1 2 3 '&amp;#40;4&amp;#41;&amp;#41;

&amp;#40;apply &amp;#42; 1 2 3 4&amp;#41; ;; error: contract violation
&lt;/code&gt;&lt;/pre&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 25 Mar 2017 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/racket-intro/
</guid>
<link>
http://salmanhossain.me/posts/racket-intro/
</link>
<title>
Racket - Intro (1)
</title>
<description>
 &lt;p&gt;A little guide on Racket. Since I been playing around with it for a while. Pretty cool but doesn't have some of the nice functions that clojure has such as the range but you can easily make it in racket. So here are some things to get familiar with racket.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;
;; Needed to specify the language.
&amp;#40;require racket&amp;#41;

;; Addition similiar to clojure and other lisps
&amp;#40;+ 2 2&amp;#41;

;; accepts more than two arguments thats good.
&amp;#40;+ 2 2 3&amp;#41;

;; That works too.
&amp;#40;+ 3 &amp;#40;&amp;#42; 2 2&amp;#41;&amp;#41;

;; What happens when mixing with floats. Oh a float or racket calls them inexact numbers.

&amp;#40;inexact? &amp;#40;+ 3 &amp;#40;&amp;#42; 2.0 2&amp;#41;&amp;#41;&amp;#41;

;; How do we print strings now lets try println. Same as clojure.

&amp;#40;println &amp;quot;Hello&amp;quot;&amp;#41;

;; Do they have format? or something to concat strings? &amp;#126;a
&amp;#40;&amp;#126;a &amp;quot;2+2=&amp;quot; &amp;#40;+ 2 2&amp;#41;&amp;#41;

;; How do you define a top level variable in racket?
&amp;#40;define x 10&amp;#41;

x ;; 10

;; local variable within a scope.
;; Notice that x is 3 in that specific scope not 10.
&amp;#40;let &amp;#91;&amp;#40;x 3&amp;#41;&amp;#93; x&amp;#41;

;; just to check that x is actually still globally defined as 10.
x ;; still 10 cool.

;; Now how do you make a function? With define as well.
&amp;#40;define &amp;#40;greetings name&amp;#41;
  &amp;#40;&amp;#126;a &amp;quot;Hello, &amp;quot; name &amp;quot;!&amp;quot;&amp;#41;&amp;#41;

&amp;#40;greetings &amp;quot;salman&amp;quot;&amp;#41; ;; Yep works.

;; Oh it doesn't matter if you make them parantheses or brackets.

&amp;#40;define &amp;#91;greetings name&amp;#93;
  &amp;#40;&amp;#126;a &amp;quot;Hello, &amp;quot; name &amp;quot;!&amp;quot;&amp;#41;&amp;#41;

&amp;#40;greetings &amp;quot;salman&amp;quot;&amp;#41; ;; still works.

;; What about the lambda functions?

&amp;#40;&amp;#40;lambda &amp;#40;x&amp;#41; &amp;#40;&amp;#42; x x&amp;#41;&amp;#41; 10&amp;#41;

;; lists? Either way works they have the short hand way and the quote function.

&amp;#40;quote &amp;#40;1 2 3 4&amp;#41;&amp;#41;

'&amp;#40;1 2 3 4&amp;#41;

;; Now how do I map functions to individual elements in a list.
;; Oh they have map.

&amp;#40;map &amp;#40;lambda &amp;#40;x&amp;#41; &amp;#40;&amp;#42; x x&amp;#41;&amp;#41; '&amp;#40;1 2 3 4&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Fri, 24 Mar 2017 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/clojure-reading-csv/
</guid>
<link>
http://salmanhossain.me/posts/clojure-reading-csv/
</link>
<title>
Clojure - Reading CSV files
</title>
<description>
&lt;p&gt;Lets have some fun today and analyze some data! Let us look at the S&amp;P500 which is a index commonly used to see how well the stock market is doing. &lt;br/&gt;&lt;br/&gt; We can get the data for the S&amp;P500 from yahoo finances link to that below. Make sure you have the range from Jan 03, 1980 to recent. &lt;br/&gt;&lt;br/&gt; &lt;a href='https://finance.yahoo.com/quote/%5EGSPC/history?period1=315723600&amp;period2=1488085200&amp;interval=1d&amp;filter=history&amp;frequency=1d'&gt;Link to the S&amp;P500 Data from Yahoo Finances&lt;/a&gt; &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Let us go ahead and run a lein project by the following command you can skip this if you already have a  project and you can just add incanter to the dependencies.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ lein new incantertut
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After you have downloaded the cvs file go ahead and rename it to &lt;newcode&gt;data.csv&lt;/newcode&gt; and move it to the directory where your project.clj is located.  &lt;br/&gt;&lt;br/&gt; Let us set up our project.clj file to be this so that we have incanter in our project so that we can read csv data and as well as display the data if we decide to do that.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defproject incantertut &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  :description &amp;quot;FIXME: write description&amp;quot;
  :url &amp;quot;http://example.com/FIXME&amp;quot;
  :license {:name &amp;quot;Eclipse Public License&amp;quot;
            :url &amp;quot;http://www.eclipse.org/legal/epl-v10.html&amp;quot;}
  :dependencies &amp;#91;&amp;#91;org.clojure/clojure &amp;quot;1.8.0&amp;quot;&amp;#93;
                 &amp;#91;incanter &amp;quot;1.5.5&amp;quot;&amp;#93;&amp;#93;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can move on to the good part and start in our core.clj that in our src directory when creating a lein project. &lt;br/&gt;&lt;br/&gt; Go ahead and include the following for the namespaces. If you haven't seen incanter charts yet I recommend going through some of the previous guides I wrote on how to make graphs with incanter but otherwise I'll re-explain it briefly here as well. &lt;br/&gt;&lt;br/&gt; &lt;a href='http://salmanhossain.me/posts/clojure-incanter/'&gt;Making Graphs With Incanter&lt;/a&gt; &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;ns incantertut.core
  &amp;#40;:use &amp;#91;incanter.charts :only &amp;#91;histogram scatter-plot pie-chart add-points add-lines xy-plot&amp;#93;&amp;#93;
        &amp;#91;incanter.core :only &amp;#91;view&amp;#93;&amp;#93;
        &amp;#91;incanter.stats :only &amp;#91;sample-normal linear-model&amp;#93;&amp;#93;
        &amp;#91;incanter.io :only &amp;#91;read-dataset&amp;#93;&amp;#93;&amp;#41;
  &amp;#40;:require &amp;#91;clj-time.core :as tc&amp;#93;
            &amp;#91;clj-time.periodic :as tp&amp;#93;
            &amp;#91;clj-time.coerce :as tco&amp;#93;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;So the only new addition here will be the &lt;newcode&gt;incanter.io&lt;/newcode&gt; which will allow us to read csv files!&lt;br/&gt;&lt;br/&gt;Now to the good stuff. Add the following underneath the namespace in your core.clj file.&lt;pre&gt;&lt;code&gt;&amp;#40;def data &amp;#40;read-dataset &amp;quot;data.csv&amp;quot; :header true&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Now you can view all of the data using the following. Be warned that this is around 30+ years of data so it could take a while for the data to appear. &lt;pre&gt;&lt;code&gt;&amp;#40;:rows data&amp;#41;
&lt;/code&gt;&lt;/pre&gt;However that just shows you the entire data what if we are only interested in the opening price of the stock? Well we can use map :Open to find all the opening prices.&lt;pre&gt;&lt;code&gt;&amp;#40;map :Open &amp;#40;:rows data&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;That will result in all the opening prices of the S&amp;P500. Now lets say we want to view it we can do that using the view and xy-plot from incanter to do just that. However before that notice that when we do map :Open to the data it will return the opening prices from most recent to least recent. That is not what we want since incanter xy-plot takes least recent to most recent. So we need to use reverse to fix that. So we'll just create a function to do that.&lt;pre&gt;&lt;code&gt;&amp;#40;defn view-data &amp;#91;selection data&amp;#93;
  &amp;#40;let &amp;#91;sel-data &amp;#40;reverse &amp;#40;map selection &amp;#40;:rows data&amp;#41;&amp;#41;&amp;#41;
        counter &amp;#40;count sel-data&amp;#41;&amp;#93;
    &amp;#40;view &amp;#40;xy-plot &amp;#40;range counter&amp;#41; sel-data&amp;#41;&amp;#41;&amp;#41;&amp;#41;
    
&amp;#40;view-data :Open data&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Now running that should produce the following pretty graph below.&lt;br/&gt;&lt;br/&gt;&lt;img src=&quot;https://defunsm.github.io/img/csvpic.png&quot; alt=&quot;cvspic&quot; /&gt;&lt;br/&gt;&lt;br/&gt;That is about it you can fix it up a bit by using a time-series instead so that instead of numbers on the bottom you have dates. As well as overlapping it with close prices too. Prehaps in another blog post.
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 26 Feb 2017 00:00:00 -0500
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/clojure-r-squared/
</guid>
<link>
http://salmanhossain.me/posts/clojure-r-squared/
</link>
<title>
Clojure - R Squared
</title>
<description>
&lt;p&gt;We'll pick back up from where we left off in the linear regression post last time. So we'll be keeping pretty much the same dependency of incanter and the name space should still look like the following below more or less.&lt;pre&gt;&lt;code&gt;&amp;#40;ns incantertut.core
  &amp;#40;:use &amp;#91;incanter.charts :only &amp;#91;histogram scatter-plot pie-chart add-points add-lines&amp;#93;&amp;#93;
        &amp;#91;incanter.core :only &amp;#91;view&amp;#93;&amp;#93;
        &amp;#91;incanter.stats :only &amp;#91;sample-normal linear-model&amp;#93;&amp;#93;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt;  &lt;/p&gt;&lt;p&gt;We are going to pick up where we left off and find some more interesting properties of the line of best fit such as the r squared value and other properties such as the residuals. So we know that the line of best fit we have which we constructed from the following data ...&lt;pre&gt;&lt;code&gt;&amp;#40;def x &amp;#91;1 2 3 4 5&amp;#93;&amp;#41;
&amp;#40;def y &amp;#91;5 9 11 20 24&amp;#93;&amp;#41;

&amp;#40;linear-model y x&amp;#41;

&amp;#40;:fitted &amp;#40;linear-model y x&amp;#41;&amp;#41;
;; =&amp;gt; &amp;#91;4.000000000000011 8.900000000000013 13.800000000000015 18.700000000000017 23.60000000000002&amp;#93;
 &lt;/code&gt;&lt;/pre&gt; So before getting to the R squared value which we'll get soon enough. Let's look at how far the points are from the line of best fit. To do this incanter has provided :residuals.  The residuals are the distance away from the line of best fit. This is useful information to have when trying to understand how well our line of best fit 'fits' the data.&lt;pre&gt;&lt;code&gt;&amp;#40;:residuals &amp;#40;linear-model y x&amp;#41;&amp;#41;
;; =&amp;gt; &amp;#91;0.9999999999999893 0.09999999999998721 -2.800000000000015 1.299999999999983 0.3999999999999808&amp;#93;
 &lt;/code&gt;&lt;/pre&gt; So the residuals are nice but maybe you just want to see the absolute distance and not worry about the negatives in the residuals. Easy fix using map to just multiply it with a -1 to make it opposite like so...&lt;pre&gt;&lt;code&gt;&amp;#40;map &amp;#40;fn &amp;#91;x&amp;#93; &amp;#40;if &amp;#40;neg? x&amp;#41; &amp;#40;&amp;#42; x -1&amp;#41; x&amp;#41;&amp;#41; &amp;#40;:residuals &amp;#40;linear-model y x&amp;#41;&amp;#41;&amp;#41;
;; =&amp;gt; &amp;#40;0.9999999999999893 0.09999999999998721 2.800000000000015 1.299999999999983 0.3999999999999808&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Now we have all of the distances as positive lets place them on the graph! &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/incanter5.png&quot; alt=&quot;incanter&quot; /&gt; &lt;br/&gt;&lt;br/&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;view &amp;#40;add-lines &amp;#40;scatter-plot x y&amp;#41;
                 x &amp;#40;map &amp;#40;fn &amp;#91;x&amp;#93; &amp;#40;if &amp;#40;neg? x&amp;#41; &amp;#40;&amp;#42; x -1&amp;#41; x&amp;#41;&amp;#41; &amp;#40;:residuals &amp;#40;linear-model y x&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; You'll see somewhat of a representation of those residuals below and seeing from a visual standpoint which datapoints appear to be most out of fit with the line of best fit. Here you can see that the third point seems to be the most nearly 3 units away from the line of best fit.&lt;/p&gt;&lt;p&gt;Now lets do something else with the residuals a common thing to do is that you can square the residuals which will get you the sse or the sum of squares due to error.&lt;pre&gt;&lt;code&gt;&amp;#40;reduce + &amp;#40;map &amp;#40;fn &amp;#91;x&amp;#93; &amp;#40;&amp;#42; x x&amp;#41;&amp;#41; &amp;#40;:residuals &amp;#40;linear-model y x&amp;#41;&amp;#41;&amp;#41;&amp;#41;
;; =&amp;gt; 10.7
 &lt;/code&gt;&lt;/pre&gt; or actually in incanter you can just do the following instead of typing that entire thing out.&lt;pre&gt;&lt;code&gt;&amp;#40;:sse &amp;#40;linear-model y x&amp;#41;&amp;#41;
;; =&amp;gt; 10.7
 &lt;/code&gt;&lt;/pre&gt; So that value gives you some what of an idea of how well the data fits the line of best fit. However we can go and look further and get the R&lt;sup&gt;2&lt;/sup&gt; value from the linear-model.&lt;pre&gt;&lt;code&gt;&amp;#40;:r-square &amp;#40;linear-model y x&amp;#41;&amp;#41;
;; =&amp;gt; 0.9573365231259969
 &lt;/code&gt;&lt;/pre&gt; So that is our line of best fit but how well does it fit our data well that is where the R squared value comes in and determines how well our line fits our data. Typically the closer the R squared value is to 1 the better. As well as the R squared value is only ranges from 0 to 1. So 0.95 is pretty good so that our data fits the line of best fit rather well.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 01 Feb 2017 00:00:00 -0500
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/clojure-linear-regression/
</guid>
<link>
http://salmanhossain.me/posts/clojure-linear-regression/
</link>
<title>
Clojure - Linear Regression
</title>
<description>
&lt;p&gt;&lt;img src=&quot;https://defunsm.github.io/img/incanter4.png&quot; alt=&quot;incanter&quot; /&gt;&lt;/p&gt;&lt;p&gt;We will try to do a basic linear regression here with incanter. If you don't know what linear regression is it is essentially finding the line of best fit. I'll demonstrate how you can find the line of best fit using incanter with a neat function called linear-model which will do a lot of the numerical calculations for us. Make sure to note that the data for the y axis is the first argument and not the second argument since at least for me it appears to be more intuitive to place the x axis in the second argument of the function but that isn't the case for the linear-model function from incanter.stat so take note of that. Let us go ahead and add our dependencies. As well as make sure that incanter is in your project.clj and your namespace looks like the following below.&lt;pre&gt;&lt;code&gt;&amp;#40;ns incantertut.core
  &amp;#40;:use &amp;#91;incanter.charts :only &amp;#91;histogram scatter-plot pie-chart add-points add-lines&amp;#93;&amp;#93;
        &amp;#91;incanter.core :only &amp;#91;view&amp;#93;&amp;#93;
        &amp;#91;incanter.stats :only &amp;#91;sample-normal linear-model&amp;#93;&amp;#93;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; What linear-model will do for us will do a bunch of calculations off hand so that we don't have to do them ourselves which is good. However if you are interested in the math computational part like I am you should probably go learn linear algebra and some statistics which will help you understand more of whats going on but it isn't absolutely necessary if you just want a line of best fit to be displayed. &lt;br/&gt;&lt;br/&gt; I am not entirely sure why computer science and the machine learning community tend to like to call the line of best fit &quot;linear regression&quot; which sounds a bit scary to me but really all you are doing is fitting a line that happens to be stright to a bunch of points on a x and y axis graph. Nothing complicated really. However when introducing this topic of linear regression in textbooks the impression is that this is a huge big thing but anyways I digress too much and here you go with the easy and simple line of best fit.&lt;pre&gt;&lt;code&gt;&amp;#40;def x &amp;#91;1 2 3 4 5&amp;#93;&amp;#41;
&amp;#40;def y &amp;#91;5 9 11 20 24&amp;#93;&amp;#41;

&amp;#40;view &amp;#40;add-lines &amp;#40;scatter-plot x y&amp;#41;
                  x &amp;#40;:fitted &amp;#40;linear-model y x&amp;#41;&amp;#41;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Let me go through with what is going on here. The view is again if you haven't read through the previous post on basic incanter on how to display a histogram, scatterplot and a pie chart I suggest looking at that. However I'll assume you know what view is doing and is the function that allows you to see the graphs hence view. The add-lines is a new function from the incanter.charts that I haven't shown before and allows you to plot lines you could use add-points instead as well but than it wouldn't be line.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;:coefs &amp;#40;linear-model y x&amp;#41;&amp;#41;
;; =&amp;gt; &amp;#91;-0.8999999999999915 4.900000000000002&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now lets take a look using :coefs gives us two numbers in a persistent vector. So what do those numbers represent? Well one of is negative and the other positive and so judging from the graph you seen the negative number can't be the slope since the slope was clearly had a positive slope. So from that conclusion you can assume that the first number is the y-intercept which it is. The second number is the slope no surprise there. &lt;br/&gt;&lt;br/&gt; This is going to be a pretty short post just showing you how to obtain slope and y-intercept but you may not satisfied and be left with questions such as how well fitted is my line of best fit? What is the R&lt;sup&gt;2&lt;/sup&gt; value? How do I get that kind of information from my line of best fit well if you're curious you can check the documentation or wait for the next post.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 30 Jan 2017 00:00:00 -0500
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/clojure-incanter/
</guid>
<link>
http://salmanhossain.me/posts/clojure-incanter/
</link>
<title>
Clojure - Basic Incanter
</title>
<description>
 &lt;p&gt;&lt;a href='http://incanter.github.io/incanter/index.html'&gt;Incanter&lt;/a&gt; is similiar to R which has many uses for statistical computing. Incanter is a clojure based version of R which runs on the JVM. It has many useful functions to help aid in making graphs and analyze data. We'll only be looking on making graphs in this post but in a later post we'll look at analyzing data using incanter. For now lets make some graphs! &lt;br/&gt;&lt;br/&gt; Go ahead make a new clojure project with leiningen. Add the following to your project.clj to include incanter into your dependencies.&lt;pre&gt;&lt;code&gt;:dependencies &amp;#91;&amp;#91;org.clojure/clojure &amp;quot;1.8.0&amp;quot;&amp;#93;
               &amp;#91;incanter &amp;quot;1.5.5&amp;quot;&amp;#93;&amp;#93;
 &lt;/code&gt;&lt;/pre&gt; Go ahead and run lein deps so that leiningen can get incanter as a dependency.&lt;pre&gt;&lt;code&gt;lein deps
 &lt;/code&gt;&lt;/pre&gt; After that we are ready to go and start editing the core.clj and first examining how to create a neat little &lt;newcode&gt;histogram&lt;/newcode&gt;. &lt;br/&gt;&lt;br/&gt; So lets use the things we are going to need from incanter make your namespace as the following just replace the namespace to whatever project you created in my case I did lein new incantertut but yours will be different so rechange that part of what you did.&lt;pre&gt;&lt;code&gt;&amp;#40;ns incantertut.core
  &amp;#40;:use &amp;#91;incanter.charts :only &amp;#91;histogram scatter-plot pie-chart xy-plot&amp;#93;&amp;#93;
        &amp;#91;incanter.core :only &amp;#91;view&amp;#93;&amp;#93;
        &amp;#91;incanter.stats :only &amp;#91;sample-normal&amp;#93;&amp;#93;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; In this post we'll only be looking at histograms, scatter-plots and pie-charts. (Plus xy-plot) &lt;br/&gt;&lt;br/&gt; Next part is fun because it is literally one line to generate and view the graph and behold.&lt;pre&gt;&lt;code&gt;&amp;#40;view &amp;#40;histogram &amp;#40;sample-normal 10000 :mean 10&amp;#41;&amp;#41; :width 700 :height 700&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; After running that you should see the following graph pop up. &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/incanter1.png&quot; alt=&quot;incanter&quot; /&gt; &lt;br/&gt;&lt;br/&gt; The above one-liner creates a histogram. The sample-normal function creates a normal gaussian distribution with 10,000 points. You can select the mean you want for the distribution in this case it was set to 10 by default it is 1. You can also set the :sd which is the standard deviation. &lt;br/&gt;&lt;br/&gt; The view function takes other parameters such as a width and height so you can play around with those changing the starting height/width of the histogram. Note that the view function can do more than just graphs. It can view urls and images as well! &lt;br/&gt;&lt;br/&gt; Next lets see how to make a scatter-plot which is pretty much a one liner as well and exactly the same as making a histogram expect we use &lt;newcode&gt;scatter-plot&lt;/newcode&gt; instead and define some variables before hand.&lt;pre&gt;&lt;code&gt;&amp;#40;def x &amp;#91;1 2 3 4 5&amp;#93;&amp;#41;
&amp;#40;def y &amp;#91;5 9 11 20 24&amp;#93;&amp;#41;

&amp;#40;view &amp;#40;scatter-plot x y&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; &lt;img src=&quot;https://defunsm.github.io/img/incanter2.png&quot; alt=&quot;incanter 2&quot; /&gt; &lt;br/&gt;&lt;br/&gt; x and y defines the data for the x axis and the y variable contains the data for the y axis. Note that the x and y variables are of type persistentVector. &lt;br/&gt;&lt;br/&gt; Notice that the data set is not perfectly linear but it looks like you could draw a line of best fit or a regression line which I'll go over on how to do that in clojure later. As well as find values such as the R&lt;sup&gt;2&lt;/sup&gt; value telling us how well the data fits that line of best fit. &lt;br/&gt;&lt;br/&gt; Now for the file graph we'll make a pie graph. &lt;br/&gt;&lt;br/&gt; Piechart that we are about to make will include the elements making up earth's atmosphere and for that we'll define two variables called elements and percentages. Both persistent vectors however elements will consist of strings that will contain the name of the elements and percentages will contain the percentage of that element in the atmosphere. The main function here to create the pie-chart is called pie-chart which will be taking two arguments the elements and the percentages as well as you can add an additional parameter adding a :title as a string value such as &quot;Composition of the Earth's Atmosphere&quot;.&lt;pre&gt;&lt;code&gt;&amp;#40;def elements &amp;#91;&amp;quot;Nitrogen&amp;quot; &amp;quot;Oxygen&amp;quot; &amp;quot;Argon&amp;quot; &amp;quot;Carbon&amp;quot;&amp;#93;&amp;#41;
&amp;#40;def percentages &amp;#91;78 21 0.9 0.03&amp;#93;&amp;#41;

&amp;#40;view &amp;#40;pie-chart elements percentages :title &amp;quot;Composition of the Earth's Atmosphere&amp;quot;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://defunsm.github.io/img/incanter3.png&quot; alt=&quot;incanter 3&quot; /&gt; Now say you wanted a scatter-plot but with the lines connected that is when you use a xy-plot.&lt;pre&gt;&lt;code&gt;&amp;#40;view &amp;#40;xy-plot x y&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; &lt;img src=&quot;https://defunsm.github.io/img/incanter6.png&quot; alt=&quot;incanter 6&quot; /&gt; &lt;br/&gt;&lt;br/&gt; There are more variations of graphs avaliable in incanter but I just went through some of the more basic ones that people tend to use so there you go now you can make histograms, scatter-plots, xy-plot and pie charts. All in a few lines of clojure code.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 29 Jan 2017 00:00:00 -0500
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/python-pyqt5/
</guid>
<link>
http://salmanhossain.me/posts/python-pyqt5/
</link>
<title>
Python - Creating a Table using PyGt5
</title>
<description>
 &lt;p&gt;&lt;img src=&quot;http://defunsm.github.io/img/pytable.png&quot; alt=&quot;table&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='http://pyqt.sourceforge.net/Docs/PyQt5/index.html'&gt;PyGt5&lt;/a&gt; is pretty nice when it comes to constructing some nice tables. I found that making tables in PyGt5 is easier than Gtk. So I thought I would just show you how to create a really quick python script to take a file such as the one below and create a table from it in a frame. Create the following text file below as example.txt and make sure you add those , because we are going to be later spliting by ',' to get each of the element and place them into the table.&lt;pre&gt;&lt;code&gt;red,blue,yellow
c++,java,python
physics,chemistry,biology
1,2,3
 &lt;/code&gt;&lt;/pre&gt; So if you don't have pyqt5 yet go ahead and install that with pip or whatever you use to download python modules.&lt;pre&gt;&lt;code&gt;pip install pyqt5
 &lt;/code&gt;&lt;/pre&gt; Now there's already some basic tutorials out there to make tables like the one from &lt;a href='https://pythonspot.com/en/pyqt5-table/'&gt;pythonspot&lt;/a&gt;. However I wanna show how to make a more functional table of taking the example.txt and placing it into the table. So we'll just follow the example given and modify it. So go ahead and copy that code into the sample in pythonspot and we'll be modifying specifically the the &lt;newcode&gt;create_table()&lt;/newcode&gt; part.&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
import sys
from PyQt5.QtWidgets import QMainWindow, QApplication, QWidget, QAction, QTableWidget,QTableWidgetItem,QVBoxLayout
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import pyqtSlot

class App&amp;#40;QWidget&amp;#41;:

    def &amp;#95;&amp;#95;init&amp;#95;&amp;#95;&amp;#40;self&amp;#41;:
        super&amp;#40;&amp;#41;.&amp;#95;&amp;#95;init&amp;#95;&amp;#95;&amp;#40;&amp;#41;
        self.title = 'PyQt5 table - pythonspot.com'
        self.left = 0
        self.top = 0
        self.width = 300
        self.height = 200
        self.initUI&amp;#40;&amp;#41;

    def initUI&amp;#40;self&amp;#41;:
        self.setWindowTitle&amp;#40;self.title&amp;#41;
        self.setGeometry&amp;#40;self.left, self.top, self.width, self.height&amp;#41;

        self.createTable&amp;#40;&amp;#41;

        # Add box layout, add table to box layout and add box layout to widget
        self.layout = QVBoxLayout&amp;#40;&amp;#41;
        self.layout.addWidget&amp;#40;self.tableWidget&amp;#41;
        self.setLayout&amp;#40;self.layout&amp;#41;

        # Show widget
        self.show&amp;#40;&amp;#41;

    def createTable&amp;#40;self&amp;#41;:
       # Create table
        self.tableWidget = QTableWidget&amp;#40;&amp;#41;
        self.tableWidget.setRowCount&amp;#40;4&amp;#41;
        self.tableWidget.setColumnCount&amp;#40;2&amp;#41;
        self.tableWidget.setItem&amp;#40;0,0, QTableWidgetItem&amp;#40;&amp;quot;Cell &amp;#40;1,1&amp;#41;&amp;quot;&amp;#41;&amp;#41;
        self.tableWidget.setItem&amp;#40;0,1, QTableWidgetItem&amp;#40;&amp;quot;Cell &amp;#40;1,2&amp;#41;&amp;quot;&amp;#41;&amp;#41;
        self.tableWidget.setItem&amp;#40;1,0, QTableWidgetItem&amp;#40;&amp;quot;Cell &amp;#40;2,1&amp;#41;&amp;quot;&amp;#41;&amp;#41;
        self.tableWidget.setItem&amp;#40;1,1, QTableWidgetItem&amp;#40;&amp;quot;Cell &amp;#40;2,2&amp;#41;&amp;quot;&amp;#41;&amp;#41;
        self.tableWidget.setItem&amp;#40;2,0, QTableWidgetItem&amp;#40;&amp;quot;Cell &amp;#40;3,1&amp;#41;&amp;quot;&amp;#41;&amp;#41;
        self.tableWidget.setItem&amp;#40;2,1, QTableWidgetItem&amp;#40;&amp;quot;Cell &amp;#40;3,2&amp;#41;&amp;quot;&amp;#41;&amp;#41;
        self.tableWidget.setItem&amp;#40;3,0, QTableWidgetItem&amp;#40;&amp;quot;Cell &amp;#40;4,1&amp;#41;&amp;quot;&amp;#41;&amp;#41;
        self.tableWidget.setItem&amp;#40;3,1, QTableWidgetItem&amp;#40;&amp;quot;Cell &amp;#40;4,2&amp;#41;&amp;quot;&amp;#41;&amp;#41;
        self.tableWidget.move&amp;#40;0,0&amp;#41;

        # table selection change
        self.tableWidget.doubleClicked.connect&amp;#40;self.on&amp;#95;click&amp;#41;

    @pyqtSlot&amp;#40;&amp;#41;
    def on&amp;#95;click&amp;#40;self&amp;#41;:
        print&amp;#40;&amp;quot;\n&amp;quot;&amp;#41;
        for currentQTableWidgetItem in self.tableWidget.selectedItems&amp;#40;&amp;#41;:
            print&amp;#40;currentQTableWidgetItem.row&amp;#40;&amp;#41;, currentQTableWidgetItem.column&amp;#40;&amp;#41;, currentQTableWidgetItem.text&amp;#40;&amp;#41;&amp;#41;

if &amp;#95;&amp;#95;name&amp;#95;&amp;#95; == '&amp;#95;&amp;#95;main&amp;#95;&amp;#95;':
    app = QApplication&amp;#40;sys.argv&amp;#41;
    ex = App&amp;#40;&amp;#41;
    sys.exit&amp;#40;app.exec&amp;#95;&amp;#40;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;So you should have it like this so far. And if you run it you'll see a cell 4 by 2. So now lets get to editing this to make it take from the example.txt so we'll go stright to createTable and edit that method specifically since that is what we want. Change it to the following...&lt;pre&gt;&lt;code&gt;    def createTable&amp;#40;self&amp;#41;:
       # Create table
        elements = &amp;#91;&amp;#93;
        f = open&amp;#40;'example.txt','r'&amp;#41;

        for line in f.readlines&amp;#40;&amp;#41;:
            elements.append&amp;#40;line.split&amp;#40;&amp;quot;,&amp;quot;&amp;#41;&amp;#41;
            
        f.close&amp;#40;&amp;#41;

        self.tableWidget = QTableWidget&amp;#40;&amp;#41;
        self.tableWidget.setRowCount&amp;#40;len&amp;#40;elements&amp;#41;&amp;#41;
        self.tableWidget.setColumnCount&amp;#40;3&amp;#41;

        for i in range&amp;#40;len&amp;#40;elements&amp;#41;&amp;#41;:
            self.tableWidget.setItem&amp;#40;i, 0, QTableWidgetItem&amp;#40;elements&amp;#91;i&amp;#93;&amp;#91;0&amp;#93;&amp;#41;&amp;#41;
            self.tableWidget.setItem&amp;#40;i, 1, QTableWidgetItem&amp;#40;elements&amp;#91;i&amp;#93;&amp;#91;1&amp;#93;&amp;#41;&amp;#41;
            self.tableWidget.setItem&amp;#40;i, 2, QTableWidgetItem&amp;#40;elements&amp;#91;i&amp;#93;&amp;#91;2&amp;#93;&amp;#41;&amp;#41;

        # table selection change
        self.tableWidget.doubleClicked.connect&amp;#40;self.on&amp;#95;click&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Now if you run this you'll see that it will read from the example.txt and actually take those and put it into the table. Try it put more elements into the example.txt and you'll see it correctly places them into the table. Now let me explain what we did the method to do this.&lt;pre&gt;&lt;code&gt;elements = &amp;#91;&amp;#93;
f = open&amp;#40;'example.txt','r'&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; This part is creating a variable to store all the elements in the example.txt file to store into an array. After that we open the example.txt using the read param since all we are going to do is read the example.txt file. Of course we also close it later on which you should always remember to do with &lt;newcode&gt;f.close()&lt;/newcode&gt;.&lt;pre&gt;&lt;code&gt;for line in f.readlines&amp;#40;&amp;#41;:
   elements.append&amp;#40;line.split&amp;#40;&amp;quot;,&amp;quot;&amp;#41;&amp;#41;
            
f.close&amp;#40;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; This is we loop through each line with a for statement and spliting based on the comma. If you're confused by this just place a print(elements[1]) in the table method to see how the array looks so that you can see how exactly we are going to put them into the tableWidget.&lt;pre&gt;&lt;code&gt;self.tableWidget = QTableWidget&amp;#40;&amp;#41;
self.tableWidget.setRowCount&amp;#40;len&amp;#40;elements&amp;#41;&amp;#41;
self.tableWidget.setColumnCount&amp;#40;3&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; This part is actually creating the QTableWidget which is the table. As well as stating how many rows we are going to have and this is determined by counting how using len on elements to count the amount of rows there is going to be and than since we already know the column amount it is hard coded into the code but we could've done a similiar thing for the column if there is a varity on the column. &lt;pre&gt;&lt;code&gt;for i in range&amp;#40;len&amp;#40;elements&amp;#41;&amp;#41;:
   self.tableWidget.setItem&amp;#40;i, 0, QTableWidgetItem&amp;#40;elements&amp;#91;i&amp;#93;&amp;#91;0&amp;#93;&amp;#41;&amp;#41;
   self.tableWidget.setItem&amp;#40;i, 1, QTableWidgetItem&amp;#40;elements&amp;#91;i&amp;#93;&amp;#91;1&amp;#93;&amp;#41;&amp;#41;
   self.tableWidget.setItem&amp;#40;i, 2, QTableWidgetItem&amp;#40;elements&amp;#91;i&amp;#93;&amp;#91;2&amp;#93;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; This is the meat of the code so to speak. Where all of the major action is going on. The for statement is looping and placing the elements into its respective cell. This is done by using the &lt;newcode&gt;setItem&lt;/newcode&gt; method and as you can see it is looped for the amount of arrays in elements using len to find that value.  &lt;br/&gt;&lt;br/&gt; The majority of the rest of the code is just to set up the frame which is not so vital but now you can create tables from a .txt file which is amazing and can extend this even further and create some graphs using matplotlib which is built into PyGt5.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 14 Jan 2017 00:00:00 -0500
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/python-commands/
</guid>
<link>
http://salmanhossain.me/posts/python-commands/
</link>
<title>
Python - Running Commands
</title>
<description>
&lt;p&gt;If you want to run some shell commands from your python script. Often this is sometimes needed in your code and the way that this is done in python is with &lt;newcode&gt;subprocess&lt;/newcode&gt; module. So to run a shell command using the subprocess module you import call.&lt;pre&gt;&lt;code&gt;from subprocess import call
 &lt;/code&gt;&lt;/pre&gt; After that you can use call to pass the arguments and call the shell command like the following.&lt;pre&gt;&lt;code&gt;call&amp;#40;&amp;#91;&amp;quot;touch&amp;quot;, &amp;quot;newfile.txt&amp;quot;&amp;#93;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; That is all there is to it. More about how to use the subprocess module you can check the &lt;a href='https://docs.python.org/2/library/subprocess.html'&gt;documentation&lt;/a&gt;.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 11 Jan 2017 00:00:00 -0500
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/python-posterior-probability/
</guid>
<link>
http://salmanhossain.me/posts/python-posterior-probability/
</link>
<title>
Python - Prior, Posterior Probability and Normalization
</title>
<description>
&lt;p&gt;When learning about Baye's theorem there is often talk about &lt;newcode&gt;Priors&lt;/newcode&gt;, &lt;newcode&gt;Posterior Probability&lt;/newcode&gt;, and &lt;newcode&gt;Normalization&lt;/newcode&gt;. Those are fancy words when I first heard them but really they are simple concepts so I will try to explain them in the simplest terms I can. So lets start with trying to give a basic idea of a prior. &lt;br/&gt;&lt;br/&gt; A way to think about a prior is as your belief in a certain event or information. If a person believes that theres equal chances for either event to occur such as maybe a coin flip than that person has a prior of 0.5 for heads and 0.5 for tails. One thing to note about the prior is that this is a value assigned before any evidence and before the coin is even flipped. Now lets say we flip the coin a thousand of times and it seems to favor heads slightly more than tails for whatever reason than your original prior can be updated to favor the evidence and so now you're prior could be 0.60 for heads and 0.40 for tails.  &lt;br/&gt;&lt;br/&gt; Normalization is done by first finding the probability of being heads and not being heads which is done by multiplying by the prior and than adding up the probabilities. Adding up the probability will give you the total probability which does not usually add up to one. In that case you have to normalize it by adding both probabilities and than dividing the probability of the event over the total probability. &lt;br/&gt;&lt;br/&gt; The posterior probability is than determined by calculating the probability of the event by multiplying by the prior but this time dividing by the total probability so that the probability of not occuring will equal to 1. So you can think of the posterior probability as your updated probability after examining the data. &lt;br/&gt;&lt;br/&gt; So lets look at an example of putting all this stuff into practice. Lets say we have two guys Jake and Tony who both like Emily. Lets say our belief/prior is that they both have a fifty-fifty chance of hooking up with Emily. Now the next part is a bit unrealistic as we are going to quantify personality, appearance, and intelligence which are things that are quite difficult to do so. However for now we'll just be using this example to demonstrate and look at a more realistic example later on. So lets say Tony has 0.5 appearance, 0.3 intelligence, and 0.2 personality. Notice we are making the character traits into a probabity adding to 1. Now the same for Jake but he may not be as appearance inclined as Tony but has slightly more intelligence. So Jake has 0.3 appearance, 0.5 intelligence, 0.2 personality. Now lets say Emily doesn't care about appearance since you know its overrated now a days. So she values intelligence and personality so how do we know who is more likely to hook up with Emily? From just common sense you could probably figure it out since it isn't really a close call but lets do the math. &lt;br/&gt;&lt;br/&gt; So lets write a quick python script to figure it out or you could just do the math on a calculator if you want but I would rather create a small script so if you wanted to change the values you would do it rather quickly and easily.&lt;pre&gt;&lt;code&gt;def main&amp;#40;&amp;#41;:

    prior = 0.5
    tony = {&amp;quot;Appearance&amp;quot;: 0.5, &amp;quot;Intelligence&amp;quot;: 0.3, &amp;quot;Personality&amp;quot;: 0.2}
    jake = {&amp;quot;Appearance&amp;quot;: 0.3, &amp;quot;Intelligence&amp;quot;: 0.5, &amp;quot;Personality&amp;quot;: 0.2}

    total&amp;#95;probability = &amp;#40;tony&amp;#91;&amp;quot;Intelligence&amp;quot;&amp;#93; &amp;#42; tony&amp;#91;&amp;quot;Personality&amp;quot;&amp;#93; &amp;#42; prior&amp;#41; + &amp;#40;jake&amp;#91;&amp;quot;Intelligence&amp;quot;&amp;#93; &amp;#42; tony&amp;#91;&amp;quot;Personality&amp;quot;&amp;#93; &amp;#42; prior&amp;#41;

    print&amp;#40;total&amp;#95;probability&amp;#41;

    tony&amp;#95;posterior&amp;#95;probability = &amp;#40;tony&amp;#91;&amp;quot;Intelligence&amp;quot;&amp;#93; &amp;#42; tony&amp;#91;&amp;quot;Personality&amp;quot;&amp;#93; &amp;#42; prior&amp;#41; / total&amp;#95;probability
    jake&amp;#95;posterior&amp;#95;probability = &amp;#40;jake&amp;#91;&amp;quot;Intelligence&amp;quot;&amp;#93; &amp;#42; jake&amp;#91;&amp;quot;Personality&amp;quot;&amp;#93; &amp;#42; prior&amp;#41; / total&amp;#95;probability

    print&amp;#40;&amp;quot;Tony's Posterior Probability: &amp;quot;, tony&amp;#95;posterior&amp;#95;probability&amp;#41;
    print&amp;#40;&amp;quot;Jake's Posterior Probability: &amp;quot;, jake&amp;#95;posterior&amp;#95;probability&amp;#41;


if &amp;#95;&amp;#95;name&amp;#95;&amp;#95;==&amp;quot;&amp;#95;&amp;#95;main&amp;#95;&amp;#95;&amp;quot;:
    main&amp;#40;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;After running the calculations you'll find that the results are that jake has a higher posterior probabilty and that makes sense since you put into consideration that Emily doesn't care about appearance. So you would get that Tony has a posterior probability of 0.375 and Jake has a posterior probability of 0.625. Sad news for Tony unfortunately. &lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 10 Jan 2017 00:00:00 -0500
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/python-entropy/
</guid>
<link>
http://salmanhossain.me/posts/python-entropy/
</link>
<title>
Python - Entropy in Machine Learning
</title>
<description>
  &lt;p&gt; &lt;newcode&gt;Entropy&lt;/newcode&gt; when talked about in information theory relates to the &lt;newcode&gt;randomness&lt;/newcode&gt; in data. Another way to think about entropy is that it is the &lt;newcode&gt;unpredictability&lt;/newcode&gt; of the data. So a high entropy is essentially saying that the data is scattered around while a low entropy means that nearly all the data is the same. So since in machine learning data is essentially the way that we build classifiers we often need to manage the entropy to be not too low nor too high and reach a nice balance. The &lt;newcode&gt;Pi&lt;/newcode&gt; in the entropy equation below represents the probability of the event occuring. &lt;/p&gt;&lt;p&gt; &lt;img src=&quot;https://defunsm.github.io/img/entropypic.png&quot; alt=&quot;picture of entropy equation&quot; /&gt;&lt;/p&gt;&lt;p&gt;So just a few things to note when calculating entropy we are using log 2 and not log 10 small distinction but does change your result. You may see different forms of this equation if you search up entropy but generally you'll find it'll look something like the above. &lt;br/&gt;&lt;br/&gt; So what is the point of finding entropy? I mean yes its nice I guess to know if your data is more or less random but what can we do with entropy? Well entropy also tells us how much &lt;newcode&gt;information&lt;/newcode&gt; we are going to get from a specific event. For example if we have a coin and say it isn't loaded in any way and has a 50/50 chance of either head or tails. This will result in lower entropy since the chances are fair which means more information. &lt;br/&gt;&lt;br/&gt; We could create a nice python script to calculate the entropy for us. So lets go ahead and do that we'll need the &lt;newcode&gt;math module&lt;/newcode&gt; for the log. After that we'll make a function that will take an &lt;newcode&gt;array of probabilities&lt;/newcode&gt; of each event occuring. So our probability array will be [0.5, 0.5] since it is an equal chance of either heads or tails occuring.&lt;pre&gt;&lt;code&gt;import math

def entropy&amp;#95;cal&amp;#40;array&amp;#41;:

    total&amp;#95;entropy = 0

    for i in array:
        total&amp;#95;entropy += -i &amp;#42; math.log&amp;#40;2, i&amp;#41;

    return total&amp;#95;entropy

def main&amp;#40;&amp;#41;:

    probabilities = &amp;#91;0.5, 0.5&amp;#93;
    entropy = entropy&amp;#95;cal&amp;#40;probabilities&amp;#41;

    print&amp;#40;entropy&amp;#41;

if &amp;#95;&amp;#95;name&amp;#95;&amp;#95;==&amp;quot;&amp;#95;&amp;#95;main&amp;#95;&amp;#95;&amp;quot;:
    main&amp;#40;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;One of the things you'll find out if you play around with the entropy equation is that equal chance events give out more  information because there is less entropy. For example try changing the probability to [0.75, 0.25] in other words a rigged coin  toss in which heads is 0.75 and tails is 0.25 or vise versa and you'll find that there is a higher entropy. Events that are more tilted have higher entropy than those with equal chances resulting in less information. So essentially more entropy is less information and less entropy is more information. You can also see this as reduced uncertainity means a lower entropy. Since a higher entropy means there is a higher uncertainity. &lt;br/&gt;&lt;br/&gt; So that is about it as far as calculating entropies go and if you were wondering what the units are for entropy it is usally refered to as a 'bit' but this depends on the log base you are using but since we are using 2 which means it can either be 1 or 0. &lt;br/&gt;&lt;br/&gt; Thats about it when it comes to just doing some basic calculations with the entropy equation.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 09 Jan 2017 00:00:00 -0500
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/python-gtk/
</guid>
<link>
http://salmanhossain.me/posts/python-gtk/
</link>
<title>
Python - GTK 3.0
</title>
<description>
 &lt;p&gt;If you're looking to make GUI's using python. You should take a look at GTK 3.0 which is a nice module for building GUIs.  &lt;br/&gt;&lt;br/&gt; &lt;a href='http://python-gtk-3-tutorial.readthedocs.io/en/latest/install.html'&gt;GTK 3.0&lt;/a&gt; &lt;br/&gt;&lt;br/&gt; After installing it they have a couple of example code to get started with. Put the following in a file called gtktut.py and go ahead and run the code below.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import gi
gi.require&amp;#95;version&amp;#40;'Gtk', '3.0'&amp;#41;
from gi.repository import Gtk

class MyWindow&amp;#40;Gtk.Window&amp;#41;:

    def &amp;#95;&amp;#95;init&amp;#95;&amp;#95;&amp;#40;self&amp;#41;:
        Gtk.Window.&amp;#95;&amp;#95;init&amp;#95;&amp;#95;&amp;#40;self, title=&amp;quot;Hello World&amp;quot;&amp;#41;

        self.button = Gtk.Button&amp;#40;label=&amp;quot;Click Here&amp;quot;&amp;#41;
        self.button.connect&amp;#40;&amp;quot;clicked&amp;quot;, self.on&amp;#95;button&amp;#95;clicked&amp;#41;
        self.add&amp;#40;self.button&amp;#41;

    def on&amp;#95;button&amp;#95;clicked&amp;#40;self, widget&amp;#41;:
        print&amp;#40;&amp;quot;Hello World&amp;quot;&amp;#41;

win = MyWindow&amp;#40;&amp;#41;
win.connect&amp;#40;&amp;quot;delete-event&amp;quot;, Gtk.main&amp;#95;quit&amp;#41;
win.show&amp;#95;all&amp;#40;&amp;#41;
Gtk.main&amp;#40;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;I'll go through some of the code above. So the first line is the basic import you have probably seen it just imports gi which allows you to import GTK from the gi.repository specifically you have to require Gtk 3.0. &lt;pre&gt;&lt;code&gt;Gtk.Window.&amp;#95;&amp;#95;init&amp;#95;&amp;#95;&amp;#40;self, title=&amp;quot;Hello World&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;This is the class constructor to set the window title.&lt;pre&gt;&lt;code&gt;self.button = Gtk.Button&amp;#40;label=&amp;quot;Click Here&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;So in this code you're just inheriting from the Gtk.Window class and initializing some basic things on the 8th line. Also then setting up a button which you do by calling Gtk.Button().&lt;pre&gt;&lt;code&gt;self.button.connect&amp;#40;&amp;quot;clicked&amp;quot;, self.on&amp;#95;button&amp;#95;clicked&amp;#41;
self.add&amp;#40;self.button&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then you are connecting the button to a function called on&amp;#95;button&amp;#95;clicked which you define within the class.&lt;pre&gt;&lt;code&gt;win = MyWindow&amp;#40;&amp;#41;
win.connect&amp;#40;&amp;quot;delete-event&amp;quot;, Gtk.main&amp;#95;quit&amp;#41;
win.show&amp;#95;all&amp;#40;&amp;#41;
Gtk.main&amp;#40;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;The first line is setting win as an object of the class MyWindow(). The second line allows you to close the window and without it you wont be able to close it. The second line shows the window and finally the Gtk.main() creates the main loop. &lt;br/&gt;&lt;br/&gt; So we can easily make a menu launcher just by knowing how to make buttons, a grid, and running commands in python using call. So lets start with the example code that the documentation gives us to start with and make our own menu launcher. First we'll start off by importing call from subprocesses.&lt;pre&gt;&lt;code&gt;from subprocess import call
 &lt;/code&gt;&lt;/pre&gt; Now using call you can exechute commands in python. So if we wanted to open firefox we could do something like the following and change on&amp;#95;button&amp;#95;clicked.&lt;pre&gt;&lt;code&gt;def on&amp;#95;button&amp;#95;clicked&amp;#40;self, widget&amp;#41;:
   call&amp;#40;&amp;#91;&amp;quot;firefox&amp;quot;&amp;#93;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Now you can launch firefox by pressing the button and you change the label of the button to 'Firefox'.&lt;pre&gt;&lt;code&gt;self.button = Gtk.Button&amp;#40;label=&amp;quot;Firefox&amp;quot;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Now the button will be labeled as firefox and launches firefox. You could essentially make more of these buttons and make a launcher if you wanted to but I'll leave that up to you. So you're final code for gtktut.py should be something like this...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import gi
gi.require&amp;#95;version&amp;#40;'Gtk', '3.0'&amp;#41;
from gi.repository import Gtk
from subprocess import call

class MyWindow&amp;#40;Gtk.Window&amp;#41;:

    def &amp;#95;&amp;#95;init&amp;#95;&amp;#95;&amp;#40;self&amp;#41;:
        Gtk.Window.&amp;#95;&amp;#95;init&amp;#95;&amp;#95;&amp;#40;self, title=&amp;quot;Hello World&amp;quot;&amp;#41;

        self.button = Gtk.Button&amp;#40;label=&amp;quot;Firefox&amp;quot;&amp;#41;
        self.button.connect&amp;#40;&amp;quot;clicked&amp;quot;, self.on&amp;#95;button&amp;#95;clicked&amp;#41;
        self.add&amp;#40;self.button&amp;#41;

    def on&amp;#95;button&amp;#95;clicked&amp;#40;self, widget&amp;#41;:
        call&amp;#40;&amp;#91;&amp;quot;firefox&amp;quot;&amp;#93;&amp;#41;

win = MyWindow&amp;#40;&amp;#41;
win.connect&amp;#40;&amp;quot;delete-event&amp;quot;, Gtk.main&amp;#95;quit&amp;#41;
win.show&amp;#95;all&amp;#40;&amp;#41;
Gtk.main&amp;#40;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I just overviewed a small amount of what Gtk can do but you could look into comboboxs, entries, progressbars, and lists. Prehaps in a later blog post I'll go over a more complex project using GTK.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 08 Jan 2017 00:00:00 -0500
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/python-reading-writing-files/
</guid>
<link>
http://salmanhossain.me/posts/python-reading-writing-files/
</link>
<title>
Python - Reading and Writing Files
</title>
<description>
 &lt;p&gt; Reading and Writing to files in python is rather useful when you want to store down some of the results you get after running a program. So here is a simple stright forward guide to doing just that.  &lt;br/&gt;&lt;br/&gt; Go ahead and open up a file as ex1.py or whatever you prefer really.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ touch ex1.py
&lt;/code&gt;&lt;/pre&gt;Also create a .txt file for our dummy text file that we'll read with python.&lt;pre&gt;&lt;code&gt;$ echo &amp;quot;This is a text file&amp;quot; &amp;gt;&amp;gt; dummytext.txt
&lt;/code&gt;&lt;/pre&gt;If doing that confuses you than you can just use a text editor and create the .txt file that way same thing but the above is just a command to send the string into a file in this case dummytext.txt. &lt;br/&gt;&lt;br/&gt;Just as a sanity check I usually like to cat the file to make that the text is actually there so go ahead and do that.&lt;pre&gt;&lt;code&gt;cat dummytext.txt
&lt;/code&gt;&lt;/pre&gt;Alright we aren't crazy and text is there. If it's not there than go ahead and do it manually and use a text editor to type it into the file or whatever method you prefer.&lt;br/&gt;&lt;br/&gt;Now on to the python part where we code up the program that will read the the .txt file. So go ahead and open up ex1.py. Write in the following into ex1.py...&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
import sys, os

def main&amp;#40;&amp;#41;:

    f = open&amp;#40;'dummytext.txt', 'r'&amp;#41;
    text = f.read&amp;#40;&amp;#41;

    print&amp;#40;text&amp;#41;
    
    f.close&amp;#40;&amp;#41;

if &amp;#95;&amp;#95;name&amp;#95;&amp;#95;==&amp;quot;&amp;#95;&amp;#95;main&amp;#95;&amp;#95;&amp;quot;:
    main&amp;#40;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Run that and you'll see the text appears that appears in dummytext.txt file. So let me explain what exactly happened.&lt;br/&gt;&lt;br/&gt;So using open() will open up the file you want so that you can read it which is told to the open function by passing the 'r' if you passed it 'w' it would write to the file and if you did 'a' it would append. &lt;br/&gt;&lt;br/&gt;When calling read() on the f you are taking all the text in the file  and placing it into the variable called text and than later printing it out.&lt;br/&gt;&lt;br/&gt;Now lets do something else and write to a file. Note that when doing this you'll realize when using 'w' rather than 'r' in the open function it'll cause the original file to be trancated. This means whenever opening a file with the 'w' parameter it'll remove all the text in the file before hand. This is important to know if you're going to be using this on important files so be aware that using 'w' will remove the text in the file. So continuing on lets change the code we have to the following...&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
import sys, os

def main&amp;#40;&amp;#41;:

    f = open&amp;#40;'dummytext.txt', 'w'&amp;#41;

    f.write&amp;#40;&amp;quot;New text in the file&amp;quot;&amp;#41;
    f.write&amp;#40;&amp;quot;\n&amp;quot;&amp;#41;

    f.close&amp;#40;&amp;#41;

if &amp;#95;&amp;#95;name&amp;#95;&amp;#95;==&amp;quot;&amp;#95;&amp;#95;main&amp;#95;&amp;#95;&amp;quot;:
    main&amp;#40;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;After running that check the dummytext.txt file and you'll realize that the file has be changed to contain &quot;New text in the file&quot;. This is because of the write() function that is avaliable for you to use when you open a file with 'w'. Also keep in mind to always close the file after opening it as this could lead to problems in more complex programs.&lt;br/&gt;&lt;br/&gt;Now let me show you another way where you can preserve your file and insert other text into it. So change your code one more time to the following.&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
import sys, os

def main&amp;#40;&amp;#41;:

    f = open&amp;#40;'dummytext.txt', 'a'&amp;#41;

    f.write&amp;#40;&amp;quot;The previous text will be preserved this time.&amp;quot;&amp;#41;
    f.write&amp;#40;&amp;quot;\n&amp;quot;&amp;#41;

    f.close&amp;#40;&amp;#41;

if &amp;#95;&amp;#95;name&amp;#95;&amp;#95;==&amp;quot;&amp;#95;&amp;#95;main&amp;#95;&amp;#95;&amp;quot;:
    main&amp;#40;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Now when you check the file you'll see the the previous text in the dummytext is still there and the new text that was writen into the file is also there. When opening a file with 'a' you are preserving the original text in the file but appending new strings into it thus 'a' stands for appending. &lt;br/&gt;&lt;br/&gt;Thats pretty much it when it comes to all the basic reading and writing in python.
</description>
<enclosure>

</enclosure>
<pubDate>
Fri, 30 Dec 2016 00:00:00 -0500
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/python-web-scraper/
</guid>
<link>
http://salmanhossain.me/posts/python-web-scraper/
</link>
<title>
Python - Parsing HTML with BeautifulSoup
</title>
<description>
&lt;p&gt;I wanted to gather a collection of all the links on a wikipedia page so I decided to code something up real quick. Luckily it is rather easy in python using BeautifulSoup. You'll need to download the python module &lt;newcode&gt;bs4&lt;/newcode&gt; first which you can do with pip...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;sudo pip install bs4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After the installing is completed. Go ahead and open up a file called webscraper.py and import requests and bs4. &lt;/p&gt;&lt;pre&gt;&lt;code&gt;import requests
from bs4 import BeautifulSoup
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To get the html of a document from the web we'll be using requests. The variable resp will contain all of the html for the site.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;link = 'https://en.wikipedia.org/wiki/Physics'
resp = requests.get&amp;#40;link&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that we have all the html we'll begin to parse it using BeautifulSoup.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;soup = BeautifulSoup&amp;#40;resp.text, 'lxml'&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;soup is an object in which we can parse and manipulate to obtain all the href's that may be contained within the html like so.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;urls = &amp;#91;&amp;#93;
  for h in soup.find&amp;#95;all&amp;#40;'p'&amp;#41;:

    a = h.find&amp;#95;all&amp;#40;'a'&amp;#41;

    for t in a:

      urls.append&amp;#40;t.attrs&amp;#91;'href'&amp;#93;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will place all the hrefs in the urls array. So than you can print all the urls you find but say you want to write them to a file instead you can do the following...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;f = open&amp;#40;'urls.txt', 'w'&amp;#41;

for url in urls:

   f.write&amp;#40;link + url&amp;#41;
   f.write&amp;#40;&amp;quot;\n&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The link is added in to the f.write so it shows the full url rather than just the /wiki/something. So now you have a bunch of urls in a file named urls.txt when you run the command. Of course you'll notice something when looking at the urls.txt is that there are citiation urls which you don't want. Well it is rather simple to remove that by filtering out based on &quot;#&quot;. So rewriting your for statement like this will filter out the cititation urls.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    for url in urls:

        if '#' in url:
            pass
        else:
            f.write&amp;#40;link + url&amp;#41;
            f.write&amp;#40;&amp;quot;\n&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Oh and of course don't forget to close the file. Which I always do.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;f.close&amp;#40;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And that is pretty much it. Of course you can use optparse python module to make it so it takes an argument which can be the link and then generates the site and add on to this. So the full file should look something like this.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
import requests
from bs4 import BeautifulSoup

def main&amp;#40;&amp;#41;:

    link = 'https://en.wikipedia.org/wiki/Physics'
    resp = requests.get&amp;#40;link&amp;#41;
    soup = BeautifulSoup&amp;#40;resp.text, 'lxml'&amp;#41;

    urls = &amp;#91;&amp;#93;
    for h in soup.find&amp;#95;all&amp;#40;'p'&amp;#41;:

        a = h.find&amp;#95;all&amp;#40;'a'&amp;#41;

        for t in a:

            urls.append&amp;#40;t.attrs&amp;#91;'href'&amp;#93;&amp;#41;


    f = open&amp;#40;'urls.txt', 'w'&amp;#41;

    for url in urls:

        if '#' in url:
            pass
        else:
            f.write&amp;#40;link + url&amp;#41;
            f.write&amp;#40;&amp;quot;\n&amp;quot;&amp;#41;

    f.close&amp;#40;&amp;#41;

if &amp;#95;&amp;#95;name&amp;#95;&amp;#95;==&amp;quot;&amp;#95;&amp;#95;main&amp;#95;&amp;#95;&amp;quot;:
    main&amp;#40;&amp;#41;

&lt;/code&gt;&lt;/pre&gt;Now you can just run that and it'll generate the urls.txt file. Enjoy scraping the web.&lt;br/&gt;&lt;br/&gt;&lt;a href='https://github.com/defunSM/web-scraper'&gt;WebScraper&lt;/a&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 28 Dec 2016 00:00:00 -0500
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/python-color-in-terminal/
</guid>
<link>
http://salmanhossain.me/posts/python-color-in-terminal/
</link>
<title>
Python - Color in Terminal
</title>
<description>
 &lt;p&gt;So say you have a script written and displays some sort of information. It isn't just enough to just display it in normal colors but you want to add color coded messages to help readability. So there is a few options such as the &lt;a href='https://pypi.python.org/pypi/colorama/0.3.3'&gt;colorama&lt;/a&gt; module which helps you add color when you print. &lt;br&gt;&lt;br/&gt; I wanted to create a small python file and make my own functions in order to quickly color in text being printed to the terminal. Set the colors as strings into variables.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;green = &amp;quot;\033&amp;#91;1;32;40m&amp;quot;
red = &amp;quot;\033&amp;#91;1;31;40m&amp;quot;
yellow = &amp;quot;\033&amp;#91;1;33;40m&amp;quot;
purple = &amp;quot;\033&amp;#91;1;35;40m&amp;quot;
cyan = &amp;quot;\033&amp;#91;1;36;40m&amp;quot;
white = &amp;quot;\033&amp;#91;1;37;40m&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Than put the variables into an array as c short handing it for color. &lt;/p&gt;&lt;pre&gt;&lt;code&gt;c = &amp;#91;green, red, yellow, purple, cyan, white&amp;#93;
&lt;/code&gt;&lt;/pre&gt;So you can call green just by doing c[0] infront of a string. So if you wanted to have a green colored text appear in the terminal you can do the following... &lt;pre&gt;&lt;code&gt;print&amp;#40;c&amp;#91;0&amp;#93;, &amp;quot;Green text&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;I also made a function &lt;newcode&gt;display_colors&lt;/newcode&gt; in case you want to see which default color you want to use. I also made a ctext function which takes in the style, textcolor and background color in case you want to use something else besides the default colors. &lt;pre&gt;&lt;code&gt;def ctext&amp;#40;style, textcolor, bgcolor&amp;#41;:

    return &amp;quot;\033&amp;#91;&amp;quot; + str&amp;#40;style&amp;#41; + &amp;quot;;&amp;quot; + str&amp;#40;textcolor&amp;#41; + &amp;quot;;&amp;quot; + str&amp;#40;bgcolor&amp;#41; + &amp;quot;m&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The github Repo of &lt;a href='https://github.com/defunSM/colormyterminal'&gt;colormyterminal&lt;/a&gt;.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 27 Dec 2016 00:00:00 -0500
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/python-optparse/
</guid>
<link>
http://salmanhossain.me/posts/python-optparse/
</link>
<title>
Python - Optparse
</title>
<description>
 &lt;p&gt;Optparse is pretty nice way to make command-line tools. It streamlines the process of making arguments.  To add the parser from the optparse library in Python.&lt;pre&gt;&lt;code&gt;from optparse import OptionParser
 &lt;/code&gt;&lt;/pre&gt; This will allow you to make a parser using OptionParser() like the following.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;parser = OptionParser&amp;#40;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;This will allow you to add options to it like the following.&lt;pre&gt;&lt;code&gt;parser.add&amp;#95;option&amp;#40;&amp;quot;-c&amp;quot;, &amp;quot;--cos&amp;quot;, help=&amp;quot;Calculates the cosine given the degree.&amp;quot;, dest=&amp;quot;cosdegree&amp;quot;, action=&amp;quot;store&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;The add_option is avaliable can allows you to store the value passed to the -c option. So on the command line you can do things like the following..&lt;pre&gt;&lt;code&gt;&amp;lt;scriptname&amp;gt; -c 3
&lt;/code&gt;&lt;/pre&gt;You can also add something like this...&lt;pre&gt;&lt;code&gt;options, arguments = parser.parse&amp;#95;args&amp;#40;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;so now you can put the values passed to each option as a variable. Like so...&lt;pre&gt;&lt;code&gt;ans = options.cosine
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and you can retrieve the value passed to -c using options.cosdegree since it was stored in that using the dest=&quot;cosdegree&quot; like I showed you above. &lt;br&gt;&lt;br/&gt; You will be able to change the dest= to something else by default if not specified it would be cos since that is the option it is being assigned to. &lt;br&gt;&lt;br/&gt; So you can create some useful scripts to calculate the cos or sin from the command line without opening up a calculator. You could essentially make a command line for commonly used math functions on the command line using optparse. If you're too lazy to open up a calculator. &lt;br&gt;&lt;br/&gt; Also have the classical &amp;ndash;help or -h which will list a short description of each option. You can specify the help that'll be show for each option using the help= when creating the option using add_option.  &lt;br&gt;&lt;br/&gt; The documentation for &lt;a href='https://docs.python.org/3/library/optparse.html'&gt;Optparse&lt;/a&gt;.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 26 Dec 2016 00:00:00 -0500
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/udacity-machine-learning/
</guid>
<link>
http://salmanhossain.me/posts/udacity-machine-learning/
</link>
<title>
Python - Naive Bayes Algorithm
</title>
<description>
 &lt;p&gt;Been trying to get into machine learning and found that the udacity courses are extremely well. Specially at their intro into machine learning course which is what I'm doing over the winter break to familiarize myself with different algorithms. They go step by step and don't really require much background besides some python programming as a prerequisite.  &lt;br/&gt;&lt;br/&gt; &lt;a href='https://www.udacity.com/course/intro-to-artificial-intelligence&amp;ndash;cs271'&gt;Udacity Intro into Machine Learning Course&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/udacity/ud120-projects'&gt;Udacity Project Repo for Intro Into Machine Learning&lt;/a&gt; &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;The udacity course goes through explaining the concepts of machine learning rather well. One of the first algorithms that the course introduces you to is the Naive Bayes algoirthm.  &lt;br/&gt;&lt;br/&gt; &lt;a href='http://scikit-learn.org/stable/modules/naive_bayes.html'&gt;Naive Bayes Algorithm Sklearn&lt;/a&gt; &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Python has a varity of libraries for machine learning like tensorflow, sklearn, and numpy. Sklearn has algorithms which is pretty stright forward to use and implement in your code. You can google it and sklearn will provide a short example code on how to use that particular algorithm and also displays the pros and cons of that particular algorithm. For example the Naive Bayes Algorithm shows a short example code in just 3 lines of code you can make your prediction dataset. Also using the &lt;a href='http://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html'&gt;sklearn.metrics&lt;/a&gt; you can get a feel for how well your classifer does in predicting new data points.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;from sklearn.naive&amp;#95;bayes import GaussianNB
gnb = GaussianNB&amp;#40;&amp;#41;
y&amp;#95;pred = gnb.fit&amp;#40;iris.data, iris.target&amp;#41;.predict&amp;#40;iris.data&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;from sklearn.metrics import accuracy&amp;#95;score
acc = accuracy&amp;#95;score&amp;#40;iris.data, y&amp;#95;pred&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you continue through the udacity course you'll be introduced to two other algorithms the Support Vector Machines and the Decision Tree algorithm. The course is approximated to be 4 months but I started 2 days ago and finished about 1/4 of it getting up to Decision Trees in two days so it can definitely be finished in less than a month if you go through it really quickly.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 25 Dec 2016 00:00:00 -0500
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/python-bokeh/
</guid>
<link>
http://salmanhossain.me/posts/python-bokeh/
</link>
<title>
Python - Bokeh to Graph Boot Times
</title>
<description>
 &lt;p&gt; So I been playing around with Bokeh's graphing utilities which is always fun. So I wanted to make some graphs using the boot times that I keep using a script. So I made three different graphs 2 of which represent the total boot time and the other pie graph represents the total boot time into segments of firmware, loader, kernel and userspace.  &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://defunsm.github.io/img/bokeh3.png&quot; alt=&quot;graph image&quot; /&gt;&lt;/p&gt;&lt;p&gt;The one above demonstrates the total time as an area under the line. You can clearly see here that there was a spike in the boot time since that 40 second boot time is distinguishable from the other plots are around 12 seconds.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://defunsm.github.io/img/bokeh2.png&quot; alt=&quot;graph pie graph&quot; /&gt;&lt;/p&gt;&lt;p&gt;This one is a pie graph I couldn't figure out how to label them but it just demonstrates each part of the boot as a pie graph (Firmware, Loader, Kernel, Userspace).&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://defunsm.github.io/img/bokeh1.png&quot; alt=&quot;graph histogram&quot; /&gt;&lt;/p&gt;&lt;p&gt;There is also a histogram showing the usual time it takes to boot up which you can see from this graph is around 12 seconds since that is the most frequent time it takes to boot up. &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;The data is collected from &lt;newcode&gt;systemd-analyze&lt;/newcode&gt;. Which I have a script which just stores all the boot times into a file from time.txt.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;systemd-analyze time &amp;gt;&amp;gt; time.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href='https://github.com/defunSM/visualize-my-boot-time'&gt;Github Repo&lt;/a&gt;&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 17 Dec 2016 00:00:00 -0500
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/special-relativity/
</guid>
<link>
http://salmanhossain.me/posts/special-relativity/
</link>
<title>
Python - SpaceTime Diagrams
</title>
<description>
 &lt;p&gt; So I been playing around with numpy and matplotlib in python lately. Wonderful tools for numerical analysis and data ploting. So I played around with them and decided to use them to construct a script in order to generate spacetime graphs. For those that don't know what a space time graph or diagram is essentially a way to visualize an object moving or not moving through space and time. Looks something like that on the bottom. &lt;br/&gt;&lt;br/&gt;  &lt;img src=&quot;https://defunsm.github.io/img/spacetimegraph.png&quot; alt=&quot;spacetime&quot; /&gt; &lt;br/&gt;&lt;br/&gt; One of the things you'll instantly maybe find alarming about spacetime diagrams is that time is on the y axis. I know I was since usually time is normally placed on the x axis. Placing time on the y axis as I been told is somewhat traditional not really done on purpose but thats the way spacetime diagrams should be done. &lt;br/&gt;&lt;br/&gt; So since time is on the y axis this means a few things our y intercept, b is going to be a value with units of time usually seconds. However in spacetime diagrams you can essentially make the units whatever you want as long as they make sense so if you wanted you could make the units of time as meters using the speed of light constant c. So whatever the distance that light will cover in 1 second you can convert to that for meters and use that as a value of time since it is equivilant. Of course that might sound a bit wierd and probably I didn't explain that too well but your x axis is a measure of space. Space can be measured in meters. So now you have the same units for both x and y axis.  &lt;br/&gt;&lt;br/&gt; Now remember that time is onthe y axis so this brings about some consequences such as the slope of the line becomes 1 over the speed of the object. So we can write an equation for this line in the following way as t = (1/v)*x + b. &lt;br/&gt;&lt;br/&gt; The t stands for the time (m), the v in this case is the velocity which is in units of c, the x is the position of the object (m), and the y intercept is b which remember would originally be seconds but we converted time to meters using the speed of light constant so b is in terms of meters. &lt;br/&gt;&lt;br/&gt; In order to generate the script you need the &lt;a href='https://github.com/defunSM/SpecialRel/blob/master/SpecialRel.py'&gt;SpecialRel.py&lt;/a&gt; and &lt;a href='https://github.com/defunSM/SpecialRel/blob/master/SpaceTimeGraph.py'&gt;SpaceTimeGraph.py&lt;/a&gt;. &lt;br/&gt;&lt;br/&gt; You can get those scripts by just cloning the entire repo or just downloading them individually. &lt;br/&gt;&lt;br/&gt;&lt;h2&gt;&lt;a name=&quot;usage&quot;&gt;&lt;/a&gt;Usage&lt;/h2&gt; &lt;br/&gt;&lt;br/&gt; The way you use the script is the following.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ python SpaceTimeGraph.py -v 0.2 -b 2
&lt;/code&gt;&lt;/pre&gt;You are specifiying the speed as 0.2c and the y intercept as 2m. You should see a graph pop up hopefully if not you will probably need to install numpy and matplotlib if you do not have those.&lt;br/&gt;&lt;br/&gt;There are other options that you can specify and to see all of them type the following.&lt;pre&gt;&lt;code&gt;$ python SpaceTimeGraph.py -h
&lt;/code&gt;&lt;/pre&gt;You should get something like the picture below.&lt;br/&gt;&lt;br/&gt;&lt;img src=&quot;https://defunsm.github.io/img/options.png&quot; alt=&quot;options&quot; /&gt;&lt;br/&gt;&lt;br/&gt;You can change the upper and lower limits of the graph and determine how far you want the graph to extend out to using the options &lt;newcode&gt;-u&lt;/newcode&gt; and &lt;newcode&gt;-l&lt;/newcode&gt;. As well as name the object with &lt;newcode&gt;-n&lt;/newcode&gt; so the object's name will appear on the legend. 
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 04 Dec 2016 00:00:00 -0500
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/Heroku/
</guid>
<link>
http://salmanhossain.me/posts/Heroku/
</link>
<title>
Clojure - How to start a web app using Heroku
</title>
<description>
&lt;p&gt;Heroku is a platform that allows developers to build web apps and run them on their servers. It is really nice that they do have documentation on how to start a server using clojure as well. I'll go over through some of the stuff that they tell you to do from their set up page. You can follow along here or just follow their &lt;a href='https://devcenter.heroku.com/articles/getting-started-with-clojure#set-up'&gt;instructions&lt;/a&gt;. &lt;br/&gt;&lt;br/&gt;&lt;h1&gt;&lt;a name=&quot;make&amp;#95;a&amp;#95;heroku&amp;#95;account&quot;&gt;&lt;/a&gt;Make a Heroku Account&lt;/h1&gt; &lt;br/&gt;&lt;br/&gt; First things first is that you will need an account to manage your web apps. Just go ahead and do that on &lt;a href='https://signup.heroku.com/dc'&gt;Heorku&lt;/a&gt;. &lt;br/&gt;&lt;br/&gt;&lt;h1&gt;&lt;a name=&quot;installing&amp;#95;the&amp;#95;heroku&amp;#95;cli&quot;&gt;&lt;/a&gt;Installing the Heroku CLI&lt;/h1&gt; &lt;br/&gt;&lt;br/&gt; Now let us go on ahead and install the &lt;newcode&gt;Heroku Command Line Interface&lt;/newcode&gt; which you'll need to manage your web apps from the terminal. You can do that using the following command from the terminal.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ wget -qO- https://toolbelt.heroku.com/install.sh | sh 
&lt;/code&gt;&lt;/pre&gt;*You will need to make sure that you have ruby installed as well.&lt;br/&gt;&lt;br/&gt;&lt;h1&gt;&lt;a name=&quot;create&amp;#95;the&amp;#95;web&amp;#95;app&quot;&gt;&lt;/a&gt;Create the web app&lt;/h1&gt;&lt;p&gt;&lt;br/&gt;&lt;br/&gt; Lets go ahead and clone a sample web app that heroku provides or you can clone the reagent heroku web app template either one.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/heroku/clojure-getting-started.git
&lt;/code&gt;&lt;/pre&gt;or&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/reagent-project/reagent-template.git
&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;&lt;h1&gt;&lt;a name=&quot;create&amp;#95;the&amp;#95;web&amp;#95;app&amp;#95;on&amp;#95;heroku&quot;&gt;&lt;/a&gt;Create the web app on heroku&lt;/h1&gt;&lt;p&gt;&lt;br/&gt;&lt;br/&gt; Now lets create a heroku app to recieve the code. You can decide to specify the name or leave it blank and it'll give you a random name.&lt;pre&gt;&lt;code&gt;$ heroku create 
 &lt;/code&gt;&lt;/pre&gt; or&lt;pre&gt;&lt;code&gt;$ heroku create heroku-app-name
 &lt;/code&gt;&lt;/pre&gt; &lt;br/&gt;&lt;br/&gt;&lt;h1&gt;&lt;a name=&quot;push&amp;#95;the&amp;#95;web&amp;#95;app&quot;&gt;&lt;/a&gt;Push the web app&lt;/h1&gt; &lt;br/&gt;&lt;br/&gt; Now you can push the source code like you do for git. First make sure to add all files.&lt;pre&gt;&lt;code&gt;$ git add .
 &lt;/code&gt;&lt;/pre&gt; Commit all the files with the message &quot;init&quot;.&lt;pre&gt;&lt;code&gt;$ git commit -m &amp;quot;init&amp;quot;
 &lt;/code&gt;&lt;/pre&gt; Push to the heroku web app.&lt;pre&gt;&lt;code&gt;$ git push heroku master
 &lt;/code&gt;&lt;/pre&gt; Now you should be able to visit the site hosting the source code at heroku-app-name.herokuapp.com!&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 30 Nov 2016 00:00:00 -0500
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/clojure-using-quil-4/
</guid>
<link>
http://salmanhossain.me/posts/clojure-using-quil-4/
</link>
<title>
Graphics using Quil in Clojure (Part 4)
</title>
<description>
&lt;p&gt;Once you have created something using quil the natural thing is to display it right? Doing that is easy if you follow the steps. There are some pitfalls you have to becareful of getting into. The best place to see how to include quil into the browser is the &lt;a href='https://github.com/quil/quil/wiki/ClojureScript'&gt;quil wiki&lt;/a&gt;. &lt;br/&gt;&lt;br/&gt; The guide shows you how to start a browser with the quil applet. I'll go through how to incorporate the quil applet in a reagent template which is pretty much the same thing expect it can be a bit confusing on where exactly to place the defsketch macro. &lt;br/&gt;&lt;br/&gt; To start a reagent template go ahead and type the following...&lt;pre&gt;&lt;code&gt;$ lein new reagent quilreagent
 &lt;/code&gt;&lt;/pre&gt; The first thing to do is to add quil as a dependency in the project.clj so lets do that.&lt;pre&gt;&lt;code&gt;  :dependencies &amp;#91;&amp;#91;org.clojure/clojure &amp;quot;1.8.0&amp;quot;&amp;#93;
                 &amp;#91;ring-server &amp;quot;0.4.0&amp;quot;&amp;#93;
                 &amp;#91;reagent &amp;quot;0.6.0&amp;quot;&amp;#93;
                 &amp;#91;reagent-forms &amp;quot;0.5.25&amp;quot;&amp;#93;
                 &amp;#91;reagent-utils &amp;quot;0.2.0&amp;quot;&amp;#93;
                 &amp;#91;ring &amp;quot;1.5.0&amp;quot;&amp;#93;
                 &amp;#91;ring/ring-defaults &amp;quot;0.2.1&amp;quot;&amp;#93;
                 &amp;#91;compojure &amp;quot;1.5.1&amp;quot;&amp;#93;
                 &amp;#91;hiccup &amp;quot;1.0.5&amp;quot;&amp;#93;
                 &amp;#91;yogthos/config &amp;quot;0.8&amp;quot;&amp;#93;
                 &amp;#91;org.clojure/clojurescript &amp;quot;1.9.229&amp;quot;
                  :scope &amp;quot;provided&amp;quot;&amp;#93;
                 &amp;#91;secretary &amp;quot;1.2.3&amp;quot;&amp;#93;
                 &amp;#91;venantius/accountant &amp;quot;0.1.7&amp;quot;
                  :exclusions &amp;#91;org.clojure/tools.reader&amp;#93;&amp;#93;
                 &amp;#91;quil &amp;quot;2.4.0&amp;quot;&amp;#93;&amp;#93; ;; add quil as a dependency
 &lt;/code&gt;&lt;/pre&gt; That is what your :dependencies should look like now just add quil as a dependency at the bottom. Now that is done. Go to the &lt;newcode&gt;core.cljs&lt;/newcode&gt; file in your src directory. Open it up and lets add quil in the required place as q and the macros needed as well. So your name space should look like this.&lt;pre&gt;&lt;code&gt;&amp;#40;ns quilreagent.core
    &amp;#40;:require &amp;#91;reagent.core :as reagent :refer &amp;#91;atom&amp;#93;&amp;#93;
              &amp;#91;reagent.session :as session&amp;#93;
              &amp;#91;secretary.core :as secretary :include-macros true&amp;#93;
              &amp;#91;accountant.core :as accountant&amp;#93;
              &amp;#91;quil.core :as q :include-macros true&amp;#93; ;; add this
              &amp;#91;quil.middleware :as m&amp;#93;&amp;#41;&amp;#41; ;; as well as this
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;As well as add all of the code needed for quil for now we'll use the basic quil example. So add all of this right after the name space.&lt;pre&gt;&lt;code&gt;&amp;#40;defn setup &amp;#91;&amp;#93;
  ; Set frame rate to 30 frames per second.
  &amp;#40;q/frame-rate 30&amp;#41;
  ; Set color mode to HSB &amp;#40;HSV&amp;#41; instead of default RGB.
  &amp;#40;q/color-mode :hsb&amp;#41;
  ; setup function returns initial state. It contains
  ; circle color and position.
  {:color 0
   :angle 0}&amp;#41;

&amp;#40;defn update-state &amp;#91;state&amp;#93;
  ; Update sketch state by changing circle color and position.
  {:color &amp;#40;mod &amp;#40;+ &amp;#40;:color state&amp;#41; 0.7&amp;#41; 255&amp;#41;
   :angle &amp;#40;+ &amp;#40;:angle state&amp;#41; 0.1&amp;#41;}&amp;#41;

&amp;#40;defn draw-state &amp;#91;state&amp;#93;
  ; Clear the sketch by filling it with light-grey color.
  &amp;#40;q/background 240&amp;#41;
  ; Set circle color.
  &amp;#40;q/fill &amp;#40;:color state&amp;#41; 255 255&amp;#41;
  ; Calculate x and y coordinates of the circle.
  &amp;#40;let &amp;#91;angle &amp;#40;:angle state&amp;#41;
        x &amp;#40;&amp;#42; 150 &amp;#40;q/cos angle&amp;#41;&amp;#41;
        y &amp;#40;&amp;#42; 150 &amp;#40;q/sin angle&amp;#41;&amp;#41;&amp;#93;
    ; Move origin point to the center of the sketch.
    &amp;#40;q/with-translation &amp;#91;&amp;#40;/ &amp;#40;q/width&amp;#41; 2&amp;#41;
                         &amp;#40;/ &amp;#40;q/height&amp;#41; 2&amp;#41;&amp;#93;
      ; Draw the circle.
      &amp;#40;q/ellipse x y 100 100&amp;#41;&amp;#41;&amp;#41;&amp;#41;

&amp;#40;q/defsketch example-quil
  :host &amp;quot;example-quil&amp;quot;
  :size &amp;#91;500 500&amp;#93;
  ; setup function called only once, during sketch initialization.
  :setup setup
  ; update-state is called on each iteration before draw-state.
  :update update-state
  :draw draw-state
  ; This sketch uses functional-mode middleware.
  ; Check quil wiki for more info about middlewares and particularly
  ; fun-mode.
  :middleware &amp;#91;m/fun-mode&amp;#93;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Note that the &lt;newcode&gt;:host&lt;/newcode&gt; has to be specified in order for the canvas to know what applet to sketch. So now that you have the quil code in the core.cljs now you have to add it to the home-page which you can do by editing &lt;newcode&gt;home-page&lt;/newcode&gt; to the following.&lt;pre&gt;&lt;code&gt;&amp;#40;defn home-page &amp;#91;&amp;#93;
  &amp;#91;:div &amp;#91;:h2 &amp;quot;Welcome to quilreagent&amp;quot;&amp;#93;
   &amp;#91;:div &amp;#91;:a {:href &amp;quot;/about&amp;quot;} &amp;quot;go to about page&amp;quot;&amp;#93;&amp;#93;
   &amp;#91;:canvas#example-quil&amp;#93;&amp;#93;&amp;#41; ;; add this part.
 &lt;/code&gt;&lt;/pre&gt; Now run figwheel and that should be it. &lt;br/&gt;&lt;br/&gt; Note that the # is used to represent the host id which is example-quil in this case. If it were something else than you would have to replace it with that something else instead of example-quil. You may need to reload the page manually before the applet shows on the browser. Once you do that it'll show a circle spinning around which is exactly what we wanted. Thats pretty much it and if you don't like to have all the quil code in the core.cljs you can have it in another namespace so it is more condensed and neat. In case you want to see the full code the below is the full code of what the core.cljs should look like.&lt;pre&gt;&lt;code&gt;&amp;#40;ns quilreagent.core
    &amp;#40;:require &amp;#91;reagent.core :as reagent :refer &amp;#91;atom&amp;#93;&amp;#93;
              &amp;#91;reagent.session :as session&amp;#93;
              &amp;#91;secretary.core :as secretary :include-macros true&amp;#93;
              &amp;#91;accountant.core :as accountant&amp;#93;
              &amp;#91;quil.core :as q :include-macros true&amp;#93; ;; add this
              &amp;#91;quil.middleware :as m&amp;#93;&amp;#41;&amp;#41; ;; as well as this


&amp;#40;defn setup &amp;#91;&amp;#93;
  ; Set frame rate to 30 frames per second.
  &amp;#40;q/frame-rate 30&amp;#41;
  ; Set color mode to HSB &amp;#40;HSV&amp;#41; instead of default RGB.
  &amp;#40;q/color-mode :hsb&amp;#41;
  ; setup function returns initial state. It contains
  ; circle color and position.
  {:color 0
   :angle 0}&amp;#41;

&amp;#40;defn update-state &amp;#91;state&amp;#93;
  ; Update sketch state by changing circle color and position.
  {:color &amp;#40;mod &amp;#40;+ &amp;#40;:color state&amp;#41; 0.7&amp;#41; 255&amp;#41;
   :angle &amp;#40;+ &amp;#40;:angle state&amp;#41; 0.1&amp;#41;}&amp;#41;

&amp;#40;defn draw-state &amp;#91;state&amp;#93;
  ; Clear the sketch by filling it with light-grey color.
  &amp;#40;q/background 240&amp;#41;
  ; Set circle color.
  &amp;#40;q/fill &amp;#40;:color state&amp;#41; 255 255&amp;#41;
  ; Calculate x and y coordinates of the circle.
  &amp;#40;let &amp;#91;angle &amp;#40;:angle state&amp;#41;
        x &amp;#40;&amp;#42; 150 &amp;#40;q/cos angle&amp;#41;&amp;#41;
        y &amp;#40;&amp;#42; 150 &amp;#40;q/sin angle&amp;#41;&amp;#41;&amp;#93;
    ; Move origin point to the center of the sketch.
    &amp;#40;q/with-translation &amp;#91;&amp;#40;/ &amp;#40;q/width&amp;#41; 2&amp;#41;
                         &amp;#40;/ &amp;#40;q/height&amp;#41; 2&amp;#41;&amp;#93;
      ; Draw the circle.
      &amp;#40;q/ellipse x y 100 100&amp;#41;&amp;#41;&amp;#41;&amp;#41;

&amp;#40;q/defsketch example-quil
  :host &amp;quot;example-quil&amp;quot;
  :size &amp;#91;500 500&amp;#93;
  ; setup function called only once, during sketch initialization.
  :setup setup
  ; update-state is called on each iteration before draw-state.
  :update update-state
  :draw draw-state
  ; This sketch uses functional-mode middleware.
  ; Check quil wiki for more info about middlewares and particularly
  ; fun-mode.
  :middleware &amp;#91;m/fun-mode&amp;#93;&amp;#41;

;; -------------------------
;; Views



&amp;#40;defn home-page &amp;#91;&amp;#93;
  &amp;#91;:div &amp;#91;:h2 &amp;quot;Welcome to quilreagent&amp;quot;&amp;#93;
   &amp;#91;:div &amp;#91;:a {:href &amp;quot;/about&amp;quot;} &amp;quot;go to about page&amp;quot;&amp;#93;&amp;#93;
   &amp;#91;:canvas#example-quil&amp;#93;&amp;#93;&amp;#41; ;; add the canvas in the home-page

&amp;#40;defn about-page &amp;#91;&amp;#93;
  &amp;#91;:div &amp;#91;:h2 &amp;quot;About quilreagent&amp;quot;&amp;#93;
   &amp;#91;:div &amp;#91;:a {:href &amp;quot;/&amp;quot;} &amp;quot;go to the home page&amp;quot;&amp;#93;&amp;#93;&amp;#93;&amp;#41;

&amp;#40;defn current-page &amp;#91;&amp;#93;
  &amp;#91;:div &amp;#91;&amp;#40;session/get :current-page&amp;#41;&amp;#93;&amp;#93;&amp;#41;



;; -------------------------
;; Routes

&amp;#40;secretary/defroute &amp;quot;/&amp;quot; &amp;#91;&amp;#93;
  &amp;#40;session/put! :current-page #'home-page&amp;#41;&amp;#41;

&amp;#40;secretary/defroute &amp;quot;/about&amp;quot; &amp;#91;&amp;#93;
  &amp;#40;session/put! :current-page #'about-page&amp;#41;&amp;#41;

;; -------------------------
;; Initialize app

&amp;#40;defn mount-root &amp;#91;&amp;#93;
  &amp;#40;reagent/render &amp;#91;current-page&amp;#93; &amp;#40;.getElementById js/document &amp;quot;app&amp;quot;&amp;#41;&amp;#41;&amp;#41;

&amp;#40;defn init! &amp;#91;&amp;#93;
  &amp;#40;accountant/configure-navigation!
    {:nav-handler
     &amp;#40;fn &amp;#91;path&amp;#93;
       &amp;#40;secretary/dispatch! path&amp;#41;&amp;#41;
     :path-exists?
     &amp;#40;fn &amp;#91;path&amp;#93;
       &amp;#40;secretary/locate-route path&amp;#41;&amp;#41;}&amp;#41;
  &amp;#40;accountant/dispatch-current!&amp;#41;
  &amp;#40;mount-root&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 05 Nov 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/clojure-ringserver/
</guid>
<link>
http://salmanhossain.me/posts/clojure-ringserver/
</link>
<title>
Clojure - Ring
</title>
<description>
 &lt;p&gt;Starting a web server is easy but prehaps you want to customize the backend to your hearts desire. While most of the handling, routing, middleware and stuff is usually done for you. If you do need to do those backend stuff a good place to start is &lt;a href='https://github.com/ring-clojure/ring'&gt;Ring&lt;/a&gt; since it is basically the HTTP web framework for Clojure. Reagent, Compjure  all uses Ring. &lt;br&gt;&lt;/br&gt; Ring is pretty daunting at first but the &lt;a href='https://github.com/ring-clojure/ring/wiki'&gt;wiki&lt;/a&gt; goes through step by step. It is pretty important to understand the concepts in order to fully do any kind of backend work. Otherwise you'll be prone to falling into debugging problems. &lt;br&gt;&lt;/br&gt; So lets start by first starting a new project to get started.&lt;pre&gt;&lt;code&gt;$ lein new ringserver
 &lt;/code&gt;&lt;/pre&gt; Now go ahead to your project.clj in your &lt;newcode&gt;ringserver directory.&lt;/newcode&gt; Add the &lt;newcode&gt;[ring &quot;1.5.0&quot;]&lt;/newcode&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defproject ringserver &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  :description &amp;quot;FIXME: write description&amp;quot;
  :url &amp;quot;http://example.com/FIXME&amp;quot;
  :license {:name &amp;quot;Eclipse Public License&amp;quot;
            :url &amp;quot;http://www.eclipse.org/legal/epl-v10.html&amp;quot;}
  :dependencies &amp;#91;&amp;#91;org.clojure/clojure &amp;quot;1.8.0&amp;quot;&amp;#93;
                 &amp;#91;ring/ring-core &amp;quot;1.5.0&amp;quot;&amp;#93; ;; add
                 &amp;#91;ring/ring-jetty-adapter &amp;quot;1.5.0&amp;quot;&amp;#93; ;; add
                 &amp;#93;
  :main ringserver.core&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; After adding ring as a dependency go ahead and run &lt;newcode&gt;lein deps&lt;/newcode&gt; to install all the dependencies.&lt;pre&gt;&lt;code&gt;$ lein deps
 &lt;/code&gt;&lt;/pre&gt; Now head over to your src directory and go to your core.clj and edit it to the following.&lt;pre&gt;&lt;code&gt;&amp;#40;ns ringserver.core&amp;#41;

&amp;#40;use 'ring.adapter.jetty&amp;#41;

&amp;#40;defn handler &amp;#91;request&amp;#93;
  {:status 200
   :header {&amp;quot;Content-Type&amp;quot; &amp;quot;text/html&amp;quot;}
   :body &amp;quot;Hello World&amp;quot;}&amp;#41;

&amp;#40;run-jetty handler {:port 3001}&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Once you see that the server initalized go ahead and open up a browser to at http://localhost:3001/. &lt;br&gt;&lt;/br&gt; You should see &quot;Hello World&quot; displayed there.&lt;pre&gt;&lt;code&gt;&amp;#40;defproject ringserver &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  :description &amp;quot;FIXME: write description&amp;quot;
  :url &amp;quot;http://example.com/FIXME&amp;quot;
  :license {:name &amp;quot;Eclipse Public License&amp;quot;
            :url &amp;quot;http://www.eclipse.org/legal/epl-v10.html&amp;quot;}
  :dependencies &amp;#91;&amp;#91;org.clojure/clojure &amp;quot;1.8.0&amp;quot;&amp;#93;
                 &amp;#91;ring/ring-core &amp;quot;1.5.0&amp;quot;&amp;#93;
                 &amp;#91;ring/ring-jetty-adapter &amp;quot;1.5.0&amp;quot;&amp;#93;
                 &amp;#93;
  :main ringserver.core
  :plugins &amp;#91;&amp;#91;lein-ring &amp;quot;0.9.7&amp;quot;&amp;#93;&amp;#93; ;; add
  :ring {:handler ringserver.core/handler}&amp;#41; ;; add
 &lt;/code&gt;&lt;/pre&gt; So now that you have added the lein ring plugin and lein ring handler location now you can run a server by doing ...&lt;pre&gt;&lt;code&gt;$ lein ring server
 &lt;/code&gt;&lt;/pre&gt; Now you can run &lt;newcode&gt;lein ring server&lt;/newcode&gt; to start the server.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 31 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/clojurescript-reagent/
</guid>
<link>
http://salmanhossain.me/posts/clojurescript-reagent/
</link>
<title>
ClojureScript - Reagent
</title>
<description>
 &lt;p&gt;&lt;a href='https://github.com/Reagent-project/Reagent'&gt;Reagent&lt;/a&gt; is a pretty amazing library based off of the facebook library &lt;a href='https://facebook.github.io/react/'&gt;React.js&lt;/a&gt; and is a game changer for ClojureScript. If you haven't done much ClojureScript before you might want to check that out first. ClojureScript uses pretty much the same syntax as Clojure expect using the &lt;newcode&gt;Google Closure Compiler&lt;/newcode&gt; to compile ClojureScript code into JavaScript which is pretty neat. Which means you can write ClojureScript code and the people on your site won't even know it was originally written in ClojureScript. &lt;br/&gt;&lt;br/&gt; The best way to get into ClojureScript is taking a look at the &lt;a href='http://clojurescript.org/guides/quick-start'&gt;getting started&lt;/a&gt; in the ClojureScript website. You probably don't want to dive stright into Reagent without knowing a bit of ClojureScript since while it is pretty much the same as Clojure there are slight differences that can trick you up if your not careful and going through the tutorial is pretty helpful. &lt;br/&gt;&lt;br/&gt; Don't get confused between React and Reagent. I know I did at first but Reagent is the ClojureScript library that is based of the Facebook's JavaScript library for building user interfaces. Also there are other libraries that do the similiar things of Reagent such as Om and there is a few others. However Reagent is said to be pretty good compared to those other ones which are a bit more complicated. Just knowing one will definitely help no need to learn all of them but the idea between all of them is the same. Allowing you to build a dom which allows you to keep state while doing manipulations with state in a container which is the dom. &lt;br/&gt;&lt;br/&gt; Reagent shows off a really nice example of UI's you can build right on your browser on their &lt;a href='http://Reagent-project.github.io/'&gt;site&lt;/a&gt;. Looking at them will help you definitely learn Reagent. I'll also go over certain things that I think is most useful like having timed updates and creating a Reagent atom which is pretty much the same as a Clojure atom in its usage. &lt;br/&gt;&lt;br/&gt; To create a new Reagent template which includes &lt;a href='https://defunsm.github.io/posts-output/clojure-figwheel/'&gt;figwheel&lt;/a&gt;, Reagent, and you can stright off the back push it to your heroku app site.&lt;pre&gt;&lt;code&gt;$ lein new reagent newreagentproject
 &lt;/code&gt;&lt;/pre&gt; Now go ahead and &lt;newcode&gt;cd&lt;/newcode&gt; into newreagentproject/src. &lt;pre&gt;&lt;code&gt;$ cd &amp;#126;/newreagentproject/src
 &lt;/code&gt;&lt;/pre&gt; Unlike other typical lein templates now that we have ClojureScript we have three directories in our src directory. The clj is for clojure files, the cljc is for cljc files which can handle both ClojureScript and Clojure files and the cljs is for ClojureScript files.  &lt;br/&gt;&lt;br/&gt; For now we aren't really interested in the clj and cljc files but you can fiddle with them if you want but we are really interested in the cljs files. So go ahead and &lt;newcode&gt;cd&lt;/newcode&gt; into cljs/newreagentproject. &lt;br/&gt;&lt;br/&gt;&lt;pre&gt;&lt;code&gt;$ cd cljs/newreagentproject
 &lt;/code&gt;&lt;/pre&gt; Now go ahead and open up the core.cljs file in your favorite text editor. Once you open it up you should see the following in the core.cljs&lt;pre&gt;&lt;code&gt;&amp;#40;ns newreagentproject.core
    &amp;#40;:require &amp;#91;Reagent.core :as reagent :refer &amp;#91;atom&amp;#93;&amp;#93;
              &amp;#91;Reagent.session :as session&amp;#93;
              &amp;#91;secretary.core :as secretary :include-macros true&amp;#93;
              &amp;#91;accountant.core :as accountant&amp;#93;&amp;#41;&amp;#41;

;; -------------------------
;; Views

&amp;#40;defn home-page &amp;#91;&amp;#93;
  &amp;#91;:div &amp;#91;:h2 &amp;quot;Welcome to newreagentproject&amp;quot;&amp;#93;
   &amp;#91;:div &amp;#91;:a {:href &amp;quot;/about&amp;quot;} &amp;quot;go to about page&amp;quot;&amp;#93;&amp;#93;&amp;#93;&amp;#41;

&amp;#40;defn about-page &amp;#91;&amp;#93;
  &amp;#91;:div &amp;#91;:h2 &amp;quot;About newreagentproject&amp;quot;&amp;#93;
   &amp;#91;:div &amp;#91;:a {:href &amp;quot;/&amp;quot;} &amp;quot;go to the home page&amp;quot;&amp;#93;&amp;#93;&amp;#93;&amp;#41;

&amp;#40;defn current-page &amp;#91;&amp;#93;
  &amp;#91;:div &amp;#91;&amp;#40;session/get :current-page&amp;#41;&amp;#93;&amp;#93;&amp;#41;

;; -------------------------
;; Routes

&amp;#40;secretary/defroute &amp;quot;/&amp;quot; &amp;#91;&amp;#93;
  &amp;#40;session/put! :current-page #'home-page&amp;#41;&amp;#41;

&amp;#40;secretary/defroute &amp;quot;/about&amp;quot; &amp;#91;&amp;#93;
  &amp;#40;session/put! :current-page #'about-page&amp;#41;&amp;#41;

;; -------------------------
;; Initialize app

&amp;#40;defn mount-root &amp;#91;&amp;#93;
  &amp;#40;Reagent/render &amp;#91;current-page&amp;#93; &amp;#40;.getElementById js/document &amp;quot;app&amp;quot;&amp;#41;&amp;#41;&amp;#41;

&amp;#40;defn init! &amp;#91;&amp;#93;
  &amp;#40;accountant/configure-navigation!
    {:nav-handler
     &amp;#40;fn &amp;#91;path&amp;#93;
       &amp;#40;secretary/dispatch! path&amp;#41;&amp;#41;
     :path-exists?
     &amp;#40;fn &amp;#91;path&amp;#93;
       &amp;#40;secretary/locate-route path&amp;#41;&amp;#41;}&amp;#41;
  &amp;#40;accountant/dispatch-current!&amp;#41;
  &amp;#40;mount-root&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; The section with the functions of home-page, about-page, and current-page are the web pages of the site. If you have used hiccup you'll realize that the web page is made of these brackets which represent a specific html element. &lt;br/&gt;&lt;br/&gt; The routing part of the code is dealing with which page is displayed depending on the uri. &lt;br/&gt;&lt;br/&gt; The actual initalization of the app happens at init! as well as where all of the page html elements will be rendered at is done by a Reagent function called &lt;newcode&gt;reagent/render&lt;/newcode&gt;. &lt;br/&gt;&lt;br/&gt; So now lets look at how the site looks by starting lein figwheel from within the newreagentproject directory.&lt;pre&gt;&lt;code&gt;$ lein figwheel
 &lt;/code&gt;&lt;/pre&gt; Once that loads up go to the localhost to open up the site which is usally on http://0.0.0.0:3449/ &lt;br/&gt;&lt;br/&gt; The great thing about figwheel is you see the changes you make in your code instantly. So lets get started. Lets begin by playing around in the home-page and make your home-page function in the core.cljs file into this.&lt;pre&gt;&lt;code&gt;&amp;#40;defn home-page &amp;#91;&amp;#93;
    &amp;#91;:div &amp;#40;for &amp;#91;i &amp;#40;range 0 12&amp;#41;&amp;#93;
          &amp;#91;:div &amp;#40;range 0 i&amp;#41;&amp;#93;&amp;#41;&amp;#93;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; &lt;img src=&quot;https://defunsm.github.io/img/reagent1.png&quot; alt=&quot;reagent1&quot; /&gt;&lt;/p&gt;&lt;p&gt;Notice now that you have a sequence of numbers being printed starting from 1 and than continuing to go higher and higher and ending at 10. So You can actually use these html elements in for loops to create rather dynamic html elements. The Reagent examples page has an excellent varity of examples of things you can do with reagent to see more complex things. However I'll leave it here and show you some things like how to create new pages. &lt;br/&gt;&lt;br/&gt; So to create a new page lets first create a function to represent the new page. So lets call it reagent-page and put it right under the home-page function.&lt;pre&gt;&lt;code&gt;&amp;#40;defn reagent-page &amp;#91;&amp;#93;
  &amp;#91;:div &amp;quot;Hello new reagent page!&amp;quot;&amp;#93;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; So now save that but you won't be able to go to the /reagent page just yet. You need to set up the roots for it so put this new route into the routes section right under the other defroutes.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;secretary/defroute &amp;quot;/reagent&amp;quot; &amp;#91;&amp;#93;
  &amp;#40;session/put! :current-page #'reagent-page&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Great but we aren't done yet we need to do one last thing. Go back to the src directory and go into the clj directory and you'll come across a handler.clj and edit it so that your defroutes at the bottom look something like this just adding the /reagent.&lt;pre&gt;&lt;code&gt;&amp;#40;defroutes routes
  &amp;#40;GET &amp;quot;/&amp;quot; &amp;#91;&amp;#93; &amp;#40;loading-page&amp;#41;&amp;#41;
  &amp;#40;GET &amp;quot;/about&amp;quot; &amp;#91;&amp;#93; &amp;#40;loading-page&amp;#41;&amp;#41;
  &amp;#40;GET &amp;quot;/reagent&amp;quot; &amp;#91;&amp;#93; &amp;#40;loading-page&amp;#41;&amp;#41; ;; add this.

  &amp;#40;resources &amp;quot;/&amp;quot;&amp;#41;
  &amp;#40;not-found &amp;quot;Not Found&amp;quot;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So now that you have seen just a little of what Reagent can do and you can create pages with Reagent you can go and do experiment with it and do some more complicated manipulations with Reagent.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 30 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/quantum-common-sense/
</guid>
<link>
http://salmanhossain.me/posts/quantum-common-sense/
</link>
<title>
Quantum Mechanics - Common Sense
</title>
<description>
 &lt;p&gt;Quantum Mechanics is the most accurate theory to describe the microscopic world. It is also a relatively new field in physics less than 100 years starting around 1928. Often people find the concepts presented in quantum mechanics to be bizzare but really they are not as bizzare as they may seem. In fact quantum mechanics is very much sensiable just not your every day &quot;common sense&quot;. Since we are so adepted to the macroscopic world and we have evolved our senses to the macroscopic world we have been led to believe certain things which actually don't apply in the microscopic world. The idea of &lt;newcode&gt;locality&lt;/newcode&gt; for example, it would be nonsensical in our everyday lifes to be wondering what our position is and we just assume that we have a definite position in which we actually do have a definite position. However locality is much harder to define in microscopic terms and what does it mean for something to have definite position? Now it may seem blantly obvious but it isn't as crystal clear as you may originally think in the following experiment examples will make you reconsider some of the common sense you have built. &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Lets consider the following we have two different boxes. One detects the color of the particle sent and if it is black it'll be thrown upwards if not it'll continue to the right. Same thing with the other box expect it detects if the particle is soft or hard. While these aren't really properties of an actual particle you can pertend that color represents the x axis momentum or the hardness is the y axis momentum but either way its just easier to use colors and hardness since those are what people are familiar with. So the following detectors will look something like below.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://defunsm.github.io/img/quantum1.png&quot; alt=&quot;quantum&quot; /&gt; &lt;br/&gt;&lt;br/&gt; So a question that can be posed is does knowing the color effect the hardness? Well we can test it with an experiment to determine if there is any correlation by setting up our boxes like the following. We send a random particle into a color box and than whatever is white will go into the hardness box and we'll get a result of which percentage of the particles at the end are hard or soft. If there is no relationship than we'll see a 50-50 distribution. We do two of these experiments one with the color detector first and the other with the hardness detector first. If there is truely no relation it makes &quot;common sense&quot; that it'll be 50-50 like flipping a coin. &lt;img src=&quot;https://defunsm.github.io/img/drawing1.png&quot; alt=&quot;quantum mehanics&quot; /&gt; So using common sense so far since for both no matter how we arrange them the result is 50-50 which makes sense since hardness and color have nothing to do with each other. In fact it is a 50-50 distribution meaning no correlation or relationship between the hardness and the color for a particle. This is concluded through the experiment and thus knowing the color doesnt tell you anything about the hardness and vice versa. &lt;br/&gt;&lt;br/&gt; Now lets look at another simple experiment using these boxes. So now lets say we have random particles going into a color detector and all the white particles go into the hardness box and all the soft particles out of the hardness detector go into another color box. So now since originally we sent in white particles into our hardness box so our predication is that at the end 100% of the particles are white. &lt;img src=&quot;https://defunsm.github.io/img/drawing2.png&quot; alt=&quot;prediction&quot; /&gt; So it makes sense to predict that 100 percent of the particles will come out at the end of the experiment to be white since initially all the particles sent to the hardness box is white. However that is wrong! What actually happens is that 50 percent of them is white and 50 percent is black!&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://defunsm.github.io/img/drawing3.png&quot; alt=&quot;reality&quot; /&gt; So what is going on here? Well one of the first natural assumptions to make here is that these boxes are not working properly. Well that isn't the cause because many experiments have been done with different kinds of technologies and this still holds true so that argument can not be made. Another thing you can say is that there is some hidden variable that we do not know of that can determine the end result of the particle. This is also not true since many scientists have tried to observe the particles for these properties that can tell them the end result but none was found. So the only thing we are left with is that we are forced into the idea that a particle's properties are not something that is permanent at least not in the classical sense. Even if we changed the boxes around to have the hardness box first sending only soft particles its still the same case. &lt;img src=&quot;https://defunsm.github.io/img/drawing4.png&quot; alt=&quot;vise versa&quot; /&gt; This is only the tip of the iceburg when it comes to the weirdness of quantum mechanics.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 26 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/clojure-figwheel/
</guid>
<link>
http://salmanhossain.me/posts/clojure-figwheel/
</link>
<title>
Clojure - Figwheel
</title>
<description>
&lt;p&gt;I suggest taking a look at &lt;a href='https://github.com/bhauman/lein-figwheel'&gt;lein-figwheel&lt;/a&gt;. The amazing thing about figwheel is that it can reload CSS, JavaScript and ClojureScript and as well as identify sources of error in your code. &lt;br/&gt;&lt;br/&gt;  Figwheel is a pretty cool for a lot of reasons. One reason for that is that it allows you to do some awesome front end work. How is that because Figwheel allows you to load your code right into the browser while you are coding and see changes in your code stright onto the browser which is simply just amazing. If you haven't done so or have no idea of what I am talking about your in for a treat. I will show you the amazing power that is figwheel.  &lt;br/&gt;&lt;br/&gt; The first time I used Figwheel I was pretty blown away by the concept of it and once you have it you will definitely be wondering why coding isn't like this normally. It will definitely be more natural for you to code and you will see the instant result of writing your code instead of having to reload your browser which is simply not fun. &lt;br/&gt;&lt;br/&gt; The creator of figwheel is bhauman who also has a nice flappy bird demo which you can play around with in figwheel.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/bhauman/flappy-bird-demo.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or start your very own project right away with figwheel by typing ...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ lein new figwheel newfigwheel
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once you have that &lt;newcode&gt;cd&lt;/newcode&gt; into that directory and run the following to get figwheel working.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ lein figwheel
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Afterwards go ahead and open to the localhost 3449 if it doesn't do it for you but it should open it up for you. Note that now if you make changes to your code it'll reflect after you save the file and you don't even have to refresh the browser or anything like that which is pretty amazing. &lt;br/&gt;&lt;br/&gt; While this is pretty cool to really put this into use you should probably learn some clojurescript which is a good thing to learn specially if your interested in making web apps which will an extremely useful tool. But more on that on another date. For now I just wanted to introduce you to the awesome power of figwheel.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 25 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/clojure-leiningen/
</guid>
<link>
http://salmanhossain.me/posts/clojure-leiningen/
</link>
<title>
Clojure - Leiningen
</title>
<description>
&lt;p&gt;So if you been writing clojure code for a while you may have heard of Leiningen or probably already are using it. Leiningen is great for projects and sometimes it might be confusing at first with all of the options and freedom to customize your project layout. I kind of want to go through some of the options and how they work in your project.clj. Sort of showing you the bare minimum of what you need to know of Leiningen to get started. &lt;br/&gt;&lt;br/&gt; If you haven't yet installed &lt;a href='http://leiningen.org/'&gt;Leiningen&lt;/a&gt; I suggest you do that first as it is currently the de facto standard in project management in clojure. There is a few other ones out there as well which you can look into if Leiningen doesn't find your tastes. &lt;br/&gt;&lt;br/&gt; In this post I won't really cover everything but if you want an indepth explanation on everything I think the best place would be the &lt;a href='https://github.com/technomancy/leiningen/blob/stable/doc/TUTORIAL.md'&gt;github repo&lt;/a&gt; of Leiningen. &lt;br/&gt;&lt;br/&gt; So usually you'll start a fresh project with something like this from the command line.&lt;pre&gt;&lt;code&gt;$ lein new myproject
 &lt;/code&gt;&lt;/pre&gt; Than you'll notice the Leiningen creates a directory called myproject in the directory that you ran the command from. You can now cd to that project and see you have a couple of things. Most importantly a src directory and also a project.clj file.  &lt;br/&gt;&lt;br/&gt; Lets take a look at the project.clj and you'll notice something like this.&lt;pre&gt;&lt;code&gt;&amp;#40;defproject myproject &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  :description &amp;quot;FIXME: write description&amp;quot;
  :url &amp;quot;http://example.com/FIXME&amp;quot;
  :license {:name &amp;quot;Eclipse Public License&amp;quot;
            :url &amp;quot;http://www.eclipse.org/legal/epl-v10.html&amp;quot;}
  :dependencies &amp;#91;&amp;#91;org.clojure/clojure &amp;quot;1.8.0&amp;quot;&amp;#93;&amp;#93;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; The description and url is for when you deploy your project on clojars which helps people find it. The dependencies you may notice is the clojure language itself. So if you want to add dependencies you would do something like this.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;:dependencies &amp;#91;&amp;#91;org.clojure/clojure &amp;quot;1.8.0&amp;quot;&amp;#93;
               &amp;#91;quil &amp;quot;2.4.0&amp;quot;&amp;#93;&amp;#93;
&lt;/code&gt;&lt;/pre&gt;Go ahead and save that and now you can go back to the terminal and run lein deps which will install the dependencies for you which is nice. Even though we aren't going to be using quil in this post just showing you that Leiningen will go fetch it for you. Now lets go ahead and look at our src which you can do by &lt;newcode&gt;cd&lt;/newcode&gt;. Once into the src directory you'll need to cd once more to find the core.clj which is where the heart of your project is located.&lt;br/&gt;&lt;br/&gt;This is what your project.clj should look like when you first open it.&lt;pre&gt;&lt;code&gt;&amp;#40;ns myproject.core&amp;#41;

&amp;#40;defn foo
  &amp;quot;I don't do a whole lot.&amp;quot;
  &amp;#91;x&amp;#93;
  &amp;#40;println x &amp;quot;Hello, World!&amp;quot;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;So this is what our core.clj is doing which isn't too interesting but for the purposes of demonstrating how Leiningen runs the main clj file go ahead and change foo to -main which is important because when you run &lt;newcode&gt;lein run&lt;/newcode&gt; it will search for a -main otherwise it will yell at you.&lt;br/&gt;&lt;br/&gt;So now it should look like this!&lt;pre&gt;&lt;code&gt;&amp;#40;ns myproject.core&amp;#41;

&amp;#40;defn -main
  &amp;quot;I don't do a whole lot.&amp;quot;
  &amp;#91;x&amp;#93;
  &amp;#40;println x &amp;quot;Hello, World!&amp;quot;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Now lets run this bad boy by going to the terminal and typing &lt;newcode&gt;lein run&lt;/newcode&gt;.&lt;pre&gt;&lt;code&gt;$ lein run
&lt;/code&gt;&lt;/pre&gt;Wait what happened? Its not enough to have a -main function in your clojure file you need to let Leiningen known where it is. So you have to specify that it is in the myproject.core namespace in the project.clj.&lt;br/&gt;&lt;br/&gt;So &lt;newcode&gt;cd&lt;/newcode&gt; back to where you have your project.clj and add in the main like so.&lt;pre&gt;&lt;code&gt;&amp;#40;defproject myproject &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  :description &amp;quot;FIXME: write description&amp;quot;
  :url &amp;quot;http://example.com/FIXME&amp;quot;
  :license {:name &amp;quot;Eclipse Public License&amp;quot;
            :url &amp;quot;http://www.eclipse.org/legal/epl-v10.html&amp;quot;}
  :dependencies &amp;#91;&amp;#91;org.clojure/clojure &amp;quot;1.8.0&amp;quot;&amp;#93;
                 &amp;#91;quil &amp;quot;2.4.0&amp;quot;&amp;#93;&amp;#93;
  :main myproject.core&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Now we can run &lt;newcode&gt;lein run&lt;/newcode&gt; since we told Leiningen where our -main function is. So hopefully this time it'll work and Leiningen won't yell at us.&lt;pre&gt;&lt;code&gt;$ lein run
&lt;/code&gt;&lt;/pre&gt;And the result which is what you expected.&lt;pre&gt;&lt;code&gt;Hello, World!
&lt;/code&gt;&lt;/pre&gt;Thats about it if you want to know more about how you can make your project a &lt;a href='https://defunsm.github.io/posts-output/2016-08-28-jar/'&gt;standalone jar&lt;/a&gt; I have a seperate guide for that.
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 24 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/clojure-reading-writing/
</guid>
<link>
http://salmanhossain.me/posts/clojure-reading-writing/
</link>
<title>
Clojure - Shell Commands
</title>
<description>
&lt;p&gt;Sometimes it is nice to be able to do shell commands right from the program. This can be done with clojure.java.shell. So go ahead and require or use that in the file your going to be using.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;use 'clojure.java.shell&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that you have that go ahead and try the following...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;sh &amp;quot;ls&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;You'll notice that you should get a persistant Array Map. The contents of this array map include &lt;newcode&gt;:exit&lt;/newcode&gt;, &lt;newcode&gt;:out&lt;/newcode&gt;, and &lt;newcode&gt;:err&lt;/newcode&gt;. You will probably be most interested with the &lt;newcode&gt;:out&lt;/newcode&gt; since that is the standard output of the command issued. However you do also have &lt;newcode&gt;:exit&lt;/newcode&gt; and &lt;newcode&gt;:err&lt;/newcode&gt; which can come in handly if anything happens that wasn't expected.&lt;br/&gt;&lt;br/&gt;Notice that if you try to do two commands like the following.&lt;pre&gt;&lt;code&gt;&amp;#40;sh &amp;quot;ls -l&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;You will get an error this is because sh takes multiple arguments and so you have seperate the spaces and do something like this.&lt;pre&gt;&lt;code&gt;&amp;#40;sh &amp;quot;ls&amp;quot; &amp;quot;-l&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;So now we get the result we want but I dont want to get the &lt;newcode&gt;:exit&lt;/newcode&gt; or &lt;newcode&gt;:err&lt;/newcode&gt; so we can build a small framework to make it easier for us to just see the standard output. So we can do this for just the output.&lt;pre&gt;&lt;code&gt;&amp;#40;:out &amp;#40;sh &amp;quot;ls&amp;quot; &amp;quot;-l&amp;quot;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;However that doesnt' look that great so lets get a few more things such as pprint and split from clojure.pprint and clojure.string.&lt;pre&gt;&lt;code&gt;&amp;#40;use 'clojure.pprint&amp;#41;
&amp;#40;use 'clojure.string&amp;#41;
&lt;/code&gt;&lt;/pre&gt;This will allow us now to split the string that is handed to us from the &lt;newcode&gt;:out&lt;/newcode&gt; of the sh function based on regex. As well as the pprint which will pprint out it out nicely. &lt;pre&gt;&lt;code&gt;&amp;#40;pprint &amp;#40;split &amp;#40;:out &amp;#40;sh &amp;quot;ls&amp;quot; &amp;quot;-l&amp;quot;&amp;#41;&amp;#41; #&amp;quot;\n&amp;quot;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you have a much nicer string to look at and looks a lot like you did ls -l on a terminal if you ignore the two brackets.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 23 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/clojure-probabilities/
</guid>
<link>
http://salmanhossain.me/posts/clojure-probabilities/
</link>
<title>
Clojure - Probabilities
</title>
<description>
 &lt;p&gt;So I wrote a Python program that allows you to roll two dice and it will tell you the probabilitiy of obtaining a specific sum with those two dice. I found that writing it in clojure was so much more concise than in Python. Prehaps it is because I already wrote it in Python but the code itself in Clojure is shorter and it could even be shorter with some adjustments. When writing it in Python pretty much worked like a charm and there was functions to do everything already so considering that Clojure still ended up shorter with 30 lines of code while the Python code is 48 lines. I do think that the Python code could be adjusted to be shorter as well but it is pretty amazing that Clojure code can be written to do the same thing as Python which is extremely idiomatic. &lt;br/&gt;&lt;br/&gt; This is the Clojure code below:  &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;ns dice.core&amp;#41;

&amp;#40;defn create-dice &amp;#91;low high&amp;#93;
  &amp;#40;for &amp;#91;i &amp;#40;range low high&amp;#41;&amp;#93;
    &amp;#40;map &amp;#40;fn &amp;#91;b&amp;#93; &amp;#40;+ i b&amp;#41;&amp;#41; &amp;#40;range low high&amp;#41;&amp;#41;&amp;#41;&amp;#41;

&amp;#40;defn outcome &amp;#91;arg&amp;#93;
  &amp;#40;reduce + &amp;#40;for &amp;#91;i arg&amp;#93;
              &amp;#40;count i&amp;#41;&amp;#41;&amp;#41;&amp;#41;

&amp;#40;defn count-occurrences &amp;#91;s list&amp;#93;
  &amp;#40;count &amp;#40;filter #{s} &amp;#40;flatten list&amp;#41;&amp;#41;&amp;#41;&amp;#41;

&amp;#40;defn percentage &amp;#91;min max dice outcome&amp;#93;
  &amp;#40;for &amp;#91;x &amp;#40;range min &amp;#40;+ max 1&amp;#41;&amp;#41;&amp;#93;
    &amp;#40;println x &amp;quot;           &amp;quot; &amp;#40;count-occurrences x dice&amp;#41; &amp;quot;               &amp;quot; &amp;#40;format &amp;quot;%.4f&amp;quot; &amp;#40;&amp;#42; 100 &amp;#40;float &amp;#40;/ &amp;#40;count-occurrences x dice&amp;#41; outcome&amp;#41;&amp;#41;&amp;#41;&amp;#41; &amp;quot;%&amp;quot;&amp;#41;&amp;#41;&amp;#41;

&amp;#40;defn stats &amp;#91;low high&amp;#93;
  &amp;#40;let &amp;#91;dice-pos &amp;#40;create-dice low high&amp;#41;
        outcome &amp;#40;outcome dice-pos&amp;#41;
        max &amp;#40;apply max &amp;#40;flatten dice-pos&amp;#41;&amp;#41;
        min &amp;#40;apply min &amp;#40;flatten dice-pos&amp;#41;&amp;#41;&amp;#93;
      &amp;#40;println &amp;quot;\n\nDice Possibilities: &amp;quot; dice-pos &amp;quot;\n\n&amp;quot;&amp;#41;
      &amp;#40;println &amp;quot;Total Number of Possibilities: &amp;quot; outcome&amp;#41;
      &amp;#40;println &amp;quot;The Max Sum: &amp;quot; max&amp;#41;
      &amp;#40;println &amp;quot;The Min Sum: &amp;quot; min &amp;quot;\n\n&amp;quot;&amp;#41;
      &amp;#40;println &amp;quot;Sum:    #ofPossibilities:    Percentage %:&amp;quot;&amp;#41;
      &amp;#40;percentage min max &amp;#40;flatten dice-pos&amp;#41; outcome&amp;#41;&amp;#41;&amp;#41;

&amp;#40;stats 1 7&amp;#41;
&lt;/code&gt;&lt;/pre&gt;One of the great things about Clojure is that performing mathmatical calculations feels so natural which is probably because of drawing from haskell. Its range, max, min functions go so well with apply along with using map to display all the sums in three lines.&lt;br/&gt;&lt;br/&gt;Creating all the sum possibilities is rather easy using the range which creates the original list of (1 2 3 4 5 6) and than the map adds each element to all of the elements in the second list which is the same as the first list created in the for binding loop. &lt;pre&gt;&lt;code&gt;&amp;#40;defn create-dice &amp;#91;low high&amp;#93;
  &amp;#40;for &amp;#91;i &amp;#40;range low high&amp;#41;&amp;#93;
    &amp;#40;map &amp;#40;fn &amp;#91;b&amp;#93; &amp;#40;+ i b&amp;#41;&amp;#41; &amp;#40;range low high&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;To demonstrate this a little more graphically on what exactly is going on in this you can think of it like this where each element of the first list is being added to all of the elements in the second list and than moving on to the second element in the first list and than adding it to all the elements in the second list until all the elements in the first list are used up.&lt;img src=&quot;https://defunsm.github.io/img/prob1.png&quot; alt=&quot;mapping in clojure&quot; /&gt;&lt;p&gt;Next we want to figure out how many elements there are or how many outcomes there can be when using two dice. We can use the count function to do this. However just using count will give us 6 since it only accounts for the lists which are elements. But we want the elements within those lists. This is where the function defination outcome comes into play which uses a for loop.&lt;pre&gt;&lt;code&gt;&amp;#40;defn outcome &amp;#91;arg&amp;#93;
  &amp;#40;reduce + &amp;#40;for &amp;#91;i arg&amp;#93;
              &amp;#40;count i&amp;#41;&amp;#41;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; The argument that outcome will take the the list produced by the create-dice function and will count the amount of elements in each list. Since the list is from 1 to 6 that should give us 6 in each list. There is 6 lists with 6 elements in each so thus a total of 36 is produced using the outcome function. Why do we need the total amount of elements in the list? Well this is because to find probability we need to do the occurances of each sum over the total number of outcomes. &lt;br/&gt;&lt;br/&gt; Which leads to the next function since we have the total number of outcomes we now need a function that will give us the number of occurances for each sum which we can do in a two liner rather easily using filter, count and flatten.&lt;pre&gt;&lt;code&gt;&amp;#40;defn count-occurrences &amp;#91;s list&amp;#93;
  &amp;#40;count &amp;#40;filter #{s} &amp;#40;flatten list&amp;#41;&amp;#41;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; First let me talk about flatten and what it is doing to the list that will be given as an argument to the count-occurrences. Right now our sum possibilities list contains 6 lists within a list. In order to filter through that we need just a list of all the elements in the 6 lists. So in order to have just one list instead of having 6 lists within a list we use flatten. After flattening all the lists into one retaining all the elements in each one we can now use filter which takes a regex expression. In this case the regex expression is an argument that count-occurrences will take. In the next function you'll see how everything is put together and all the functions are used to display the final result.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn percentage &amp;#91;min max dice outcome&amp;#93;
  &amp;#40;for &amp;#91;x &amp;#40;range min &amp;#40;+ max 1&amp;#41;&amp;#41;&amp;#93;
    &amp;#40;println x &amp;quot;           &amp;quot; &amp;#40;count-occurrences x dice&amp;#41; &amp;quot;               &amp;quot; &amp;#40;format &amp;quot;%.4f&amp;quot; &amp;#40;&amp;#42; 100 &amp;#40;float &amp;#40;/ &amp;#40;count-occurrences x dice&amp;#41; outcome&amp;#41;&amp;#41;&amp;#41;&amp;#41; &amp;quot;%&amp;quot;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;First yes I realize that the println section is hideous to look at with those long spaces. But I wasn't really focused as making the code appear nice as just to display the results in a sensible format. In the end we get this insanely long println line.&lt;br/&gt;&lt;br/&gt;Anyways lets get into this function and how it brings everything together. First min and max are two arguments that this function will take. As you may figure this is the min and max of the list of possibilities which you'll see is a easy one liner to get the max and min of a list using guess what max and min which are functions already defined in clojure. The dice and outcome are exactly that asking for the list of possibilities and the outcome so that it can calculate the probabilitiy and print it.&lt;br/&gt;&lt;br/&gt;We have a for loop given to us based on the max and min values to display the percentage of each of the sum's one by one. The insanely long println line is using count-occurrences which was defined previously and taking the element from the list created in the range as an argument and the list of possibilities as the second argument. Format is being used for 4 significant figures after the decimal place. There is a whole lot of other math that also goes in such as multiplying it after getting the result of the possibility to make it into a percentage.&lt;pre&gt;&lt;code&gt;&amp;#40;defn stats &amp;#91;low high&amp;#93;
  &amp;#40;let &amp;#91;dice-pos &amp;#40;create-dice low high&amp;#41;
        outcome &amp;#40;outcome dice-pos&amp;#41;
        max &amp;#40;apply max &amp;#40;flatten dice-pos&amp;#41;&amp;#41;
        min &amp;#40;apply min &amp;#40;flatten dice-pos&amp;#41;&amp;#41;&amp;#93;
      &amp;#40;println &amp;quot;\n\nDice Possibilities: &amp;quot; dice-pos &amp;quot;\n\n&amp;quot;&amp;#41;
      &amp;#40;println &amp;quot;Total Number of Possibilities: &amp;quot; outcome&amp;#41;
      &amp;#40;println &amp;quot;The Max Sum: &amp;quot; max&amp;#41;
      &amp;#40;println &amp;quot;The Min Sum: &amp;quot; min &amp;quot;\n\n&amp;quot;&amp;#41;
      &amp;#40;println &amp;quot;Sum:    #ofPossibilities:    Percentage %:&amp;quot;&amp;#41;
      &amp;#40;percentage min max &amp;#40;flatten dice-pos&amp;#41; outcome&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Finally you have stats which calls all of the functions which we just defined and prints a bunch of other information.&lt;br/&gt;&lt;br/&gt;First lets talk about the arguments that stats is taking which is low and high. This is given to stats to determine what is the highest and lowest value that the dice can roll. In this case we use 1 and 7 because we want a list that goes from 1 to 6. &lt;br/&gt;&lt;br/&gt;Moving on we let which binds dice-pos to all the possibilities that can occur. Outcome which is binded to the number of outcomes that can happen in the dice-pos. Max and min which is a easy one liner using apply min or max to the flattened list of possibilities.&lt;br/&gt;&lt;br/&gt;After the let bindings its all just printing the information for the user. At the end we call the percentage function which does all the real work combining all the functions we have used before and displays the actual information that we want to see and displays a nice percentage of each sum.
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 22 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/pythonlists/
</guid>
<link>
http://salmanhossain.me/posts/pythonlists/
</link>
<title>
Python - Lists
</title>
<description>
&lt;p&gt;Python has a data structure called lists. They are extremely useful for manipulating data and the data type comes with methods that make it easy for you to do complex operations. The syntax used to represent lists in python are brackets. The example below would represent a list containing 3 elements of 1, 2 and 3.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#91;1, 2, 3&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So lets dive into the actual code where we make a very useful program which will tell us the probability of obtaining a sum given two dice. So lets say we want to know the probability of getting a sum of 8 with 2 dice well we can do that in python using lists. &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/newlist1.png&quot; alt=&quot;list&quot; /&gt; &lt;br/&gt;&lt;br/&gt; Some of the methods we are going to use include sorted, append, reverse, values and Counter which is being imported from collections. The way to think of lists in Python as one of my computer science friend nicely put it is putting stuff into a container.   &lt;/p&gt;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
import sys, os, math
from collections import Counter

def display&amp;#95;possibilities&amp;#40;outcomes&amp;#41;:  # This does all the printing.

    possibility = Counter&amp;#40;outcomes&amp;#41;  # Contains the number of possible outcomes for each outcome.
    total&amp;#95;outcomes = 0               # This will become 36 once all of the outcomes are added.
    for i in possibility.values&amp;#40;&amp;#41;:   # adding up all of the number of possible outcomes for each outcome.
        total&amp;#95;outcomes += i

    print&amp;#40;&amp;quot;Total Possibilities:&amp;quot;, total&amp;#95;outcomes, &amp;quot;\n&amp;quot;&amp;#41;       
    print&amp;#40;&amp;quot;Sum:    Percentage:   Out of&amp;quot;, total&amp;#95;outcomes, &amp;quot;:&amp;quot;, sep=''&amp;#41;  # The sep='' just removes whitespace don't let that confuse you.

    for i in sorted&amp;#40;Counter&amp;#40;outcomes&amp;#41;&amp;#41;:
        print&amp;#40;i, &amp;quot;      &amp;quot;, round&amp;#40;&amp;#40;&amp;#40;possibility&amp;#91;i&amp;#93;/float&amp;#40;total&amp;#95;outcomes&amp;#41;&amp;#41; &amp;#42; 100&amp;#41;, 3&amp;#41;, &amp;quot;%         &amp;quot;, possibility&amp;#91;i&amp;#93;&amp;#41;

def main&amp;#40;&amp;#41;:

    highest&amp;#95;roll = 7         # The highest value that the dice roll can have. It is 7 because range&amp;#40;1,7&amp;#41; will
    lowest&amp;#95;roll = 1          # The lowest value the dice can roll.
    possible&amp;#95;outcomes = &amp;#91;&amp;#93;   # this is an empty list
    sum&amp;#95;of&amp;#95;outcomes = &amp;#91;&amp;#93;

    d = &amp;#91;&amp;#91;x&amp;#93; for x in range&amp;#40;lowest&amp;#95;roll ,highest&amp;#95;roll&amp;#41;&amp;#93;  # Creates a list of possible values for a dice roll.
    rd = &amp;#91;&amp;#91;x&amp;#93; for x in reversed&amp;#40;range&amp;#40;lowest&amp;#95;roll, highest&amp;#95;roll&amp;#41;&amp;#41;&amp;#93; # Reverses the list of possible values.

    for x in d:          # A for loop for putting both lists together creating a list of possible values for both dice rolls.
        for i in rd:
            possible&amp;#95;outcomes.append&amp;#40;x+i&amp;#41;  

    for result in possible&amp;#95;outcomes:                 # Adds the sum of the dice rolls.
        sum&amp;#95;of&amp;#95;outcomes.append&amp;#40;result&amp;#91;0&amp;#93;+result&amp;#91;1&amp;#93;&amp;#41;

    print&amp;#40;sum&amp;#95;of&amp;#95;outcomes, &amp;quot;\n&amp;quot;&amp;#41;

    display&amp;#95;possibilities&amp;#40;sum&amp;#95;of&amp;#95;outcomes&amp;#41;   # Calls the function to print everything.

if &amp;#95;&amp;#95;name&amp;#95;&amp;#95;==&amp;quot;&amp;#95;&amp;#95;main&amp;#95;&amp;#95;&amp;quot;:
    main&amp;#40;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The result of running the code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#91;7, 6, 5, 4, 3, 2, 8, 7, 6, 5, 4, 3, 9, 8, 7, 6, 5, 4, 10, 9, 8, 7, 6, 5, 11, 10, 9, 8, 7, 6, 12, 11, 10,
 9, 8, 7&amp;#93;                                                                                               

Total Possibilities: 36 

Sum:    Percentage:   Out of36:
2        2.778 %          1
3        5.556 %          2
4        8.333 %          3
5        11.111 %          4
6        13.889 %          5
7        16.667 %          6
8        13.889 %          5
9        11.111 %          4
10        8.333 %          3
11        5.556 %          2
12        2.778 %          1
&lt;/code&gt;&lt;/pre&gt;Usually I would go line by line when explaining each part of the code but I think it would be more useful to start from the main function.&lt;pre&gt;&lt;code&gt;highest&amp;#95;roll = 7         # The highest value that the dice roll can have. It is 7 because range&amp;#40;1,7&amp;#41; will
lowest&amp;#95;roll = 1          # The lowest value the dice can roll.
possible&amp;#95;outcomes = &amp;#91;&amp;#93;   # this is an empty list
sum&amp;#95;of&amp;#95;outcomes = &amp;#91;&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This first part of the main function is setting up all the variables. The highest and lowest roll will go into the range function which will than generate a list. Range is a rather useful function to generate lists and than do manipulations on the list generated by range. Both &lt;code&gt;possible&lt;b&gt;outcomes&lt;/code&gt; and &lt;code&gt;sum&lt;/b&gt;of__outcomes&lt;/code&gt; are variables holding empty lists waiting to be filled. &lt;/p&gt;&lt;pre&gt;&lt;code&gt;d = &amp;#91;&amp;#91;x&amp;#93; for x in range&amp;#40;lowest&amp;#95;roll ,highest&amp;#95;roll&amp;#41;&amp;#93;  # Creates a list of possible values for a dice roll.
rd = &amp;#91;&amp;#91;x&amp;#93; for x in reversed&amp;#40;range&amp;#40;lowest&amp;#95;roll, highest&amp;#95;roll&amp;#41;&amp;#41;&amp;#93; # Reverses the list of possible values.
&lt;/code&gt;&lt;/pre&gt;d and rd are lists. In fact you can print d and rd and you'll see that rd is just the reverse of d which is what reversed does to a list. You may have noticed that there is a for in the bracket which is just saying for every element in the list created by range put it into the list.&lt;pre&gt;&lt;code&gt;for x in d:          # A for loop for putting both lists together creating a list of possible values for both dice rolls.
        for i in rd:
            possible&amp;#95;outcomes.append&amp;#40;x+i&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Another for loop within a for loop. So using this for loop it is taking an element from d and an element and adding it with every element in rd and than moving on like this till every element in d is exhausted. This will result in all the possible outcomes.&lt;pre&gt;&lt;code&gt;for result in possible&amp;#95;outcomes:                 # Adds the sum of the dice rolls.
        sum&amp;#95;of&amp;#95;outcomes.append&amp;#40;result&amp;#91;0&amp;#93;+result&amp;#91;1&amp;#93;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Finally one last for loop using the list just created and adding the pairs created in the previous for loop to have a sum of every possible combination that can be made. &lt;pre&gt;&lt;code&gt;display&amp;#95;possibilities&amp;#40;sum&amp;#95;of&amp;#95;outcomes&amp;#41;   # Calls the function to print everything.
&lt;/code&gt;&lt;/pre&gt;Calls the display Possibilities function that will do all the printing and manipulating of our lists.&lt;pre&gt;&lt;code&gt;possibility = Counter&amp;#40;outcomes&amp;#41;  # Contains the number of possible outcomes for each outcome.
total&amp;#95;outcomes = 0               # This will become 36 once all of the outcomes are added.
&lt;/code&gt;&lt;/pre&gt;the function Counter is imported from collections and does exactly what it sounds like it counts the number of times a element appears in a list. The total outcome is 0 for now because in the next line there is a for loop that adds up the total outcomes.&lt;pre&gt;&lt;code&gt;for i in possibility.values&amp;#40;&amp;#41;:   # adding up all of the number of possible outcomes for each outcome.
    total&amp;#95;outcomes += i
&lt;/code&gt;&lt;/pre&gt;The method .values() works on taking out the values only and then the for loop we add all the values up so we can find the total number of possible outcomes.&lt;pre&gt;&lt;code&gt;for i in sorted&amp;#40;Counter&amp;#40;outcomes&amp;#41;&amp;#41;:
    print&amp;#40;i, &amp;quot;      &amp;quot;, round&amp;#40;&amp;#40;&amp;#40;possibility&amp;#91;i&amp;#93;/float&amp;#40;total&amp;#95;outcomes&amp;#41;&amp;#41; &amp;#42; 100&amp;#41;, 3&amp;#41;, &amp;quot;%         &amp;quot;, possibility&amp;#91;i&amp;#93;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Finally this prints all of the information out formated in a nice way. The round function that is being used here allows me to select the amount of significant figures I want after the decimal point. The round function takes two arguments one being the number and the other being the number of significant figures. In this case I wanted 3 significant figures after the decimal point and so I put in 3 as the second argument and the first argument is the possibility divided by the total outcome. Notice that I made the total outcome a float in order to get a float answer.&lt;br/&gt;&lt;br/&gt;Thats about it and now you can make lists and make all kinds of dice rolling games and statistics.
</description>
<enclosure>

</enclosure>
<pubDate>
Fri, 21 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/Zshvsbash/
</guid>
<link>
http://salmanhossain.me/posts/Zshvsbash/
</link>
<title>
Zsh vs Bash (Shell Comparsion)
</title>
<description>
&lt;p&gt;&lt;h2&gt;What is a Shell?&lt;/h2&gt; &lt;br/&gt; A shell is an interface allowing an user to gain access to an operating system's services. There are shells such as BASH, ZSH, TCSH, KSH, and etc that do this.&lt;br /&gt; &lt;br/&gt; &lt;h2&gt;What is BASH?&lt;/h2&gt; BASH as an acronym, it stands for &lt;i&gt;Bourne-again shell &lt;/i&gt;was written by Brian Fox. It was created to replace the original Bourne shell. &lt;br/&gt;&lt;br/&gt; &lt;h2&gt;What is ZSH?&lt;/h2&gt; ZSH is the &lt;em&gt;Z shell&lt;/em&gt; and can be considered an extension of BASH and other shells. It was designed to be programmable and written in 1990 by Paul Falstad.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Bash and Zsh are both rather great shells to use. However personally I would rather go with the Zsh shell because of the ability to customize. Not only that but provides great functionally if you are using the shell quite often. However if you aren't using the shell than bash will just do fine. However if your like me and use the shell more often then not since I dislike moving my mouse and attempt to soley rely on keyboard than Zsh is the way to go.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;A little something that is worth noting about these two shells is that Zsh has significantly more cpu usage than bash. However it isn't anything that is significant unless your running a computer that is dealing with low amounts or ram and memory. Using the time command I found that zsh used around 4% of the cpu to start compared to the 1%. The time for zsh to open was 10 times slower taking 0.12s compared to the 0.01s seconds. While this isn't anything drastically noticable it is something to consider. &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/bash1.png&quot; alt=&quot;BASH&quot; /&gt;&lt;/p&gt;&lt;p&gt;Sources: &lt;a href=&quot;https://en.wikipedia.org/wiki/Bash&lt;i&gt;%28Unix&lt;/i&gt;shell%29&quot; target=&quot;&lt;i&gt;blank&quot;&gt;Bash&lt;/a&gt;, &lt;a href=&quot;http://zsh.sourceforge.net/FAQ/zshfaq01.html#l4&quot; target=&quot;&lt;/i&gt;blank&quot;&gt;Zsh&lt;/a&gt;&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 20 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/dualbooting/
</guid>
<link>
http://salmanhossain.me/posts/dualbooting/
</link>
<title>
Dual Booting (Linux + Windows)
</title>
<description>
&lt;p&gt;&lt;h2&gt;Dual booting using a Live USB&lt;/h2&gt;&lt;br/&gt;&lt;br/&gt; Dual booting is having two different operating systems on your computer / laptop. Usually you can determine which one you want to go into using a bootloader.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;br/&gt; &lt;h3&gt;FAQ:&lt;/h3&gt; &lt;br/&gt;&lt;br/&gt; &lt;h4&gt;What is a Live USB?&lt;/h4&gt; A live USB is a bootable operating system on a USB.  You can use a Live USB to install operating systems onto your computer. &lt;br/&gt;&lt;br/&gt; &lt;h4&gt;How do I create a Live USB?&lt;/h4&gt; I happen to already have another guide which you can follow on how to create a &lt;a href=&quot;https://defunsm.github.io/posts-output/livebooting/&quot; target=&quot;_blank&quot;&gt;Live USB&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;h4&gt;What is a bootloader?&lt;/h4&gt; The below is an example of the ubuntu grub bootloader.  Which determines what operating system you want to boot into.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/db1.png&quot; alt=&quot;grub bootloader&quot; /&gt; &lt;br/&gt;&lt;br/&gt; &lt;h4&gt;Can you do more than dual boot? Like triple boot? Quadra boot?&lt;/h4&gt; If you have the space for it. Yes. &lt;br/&gt;&lt;br/&gt; &lt;h2&gt;Requirements&lt;/h2&gt; &lt;br/&gt; 1 Live USB Free Hard Drive Disk Space&lt;/p&gt;&lt;p&gt;Computer / Laptop &lt;br/&gt;&lt;br/&gt; &lt;h2&gt;General Steps&lt;/h2&gt; &lt;br/&gt; Create space for the OS&lt;br/&gt; Create a &lt;a href=&quot;https://defunsm.github.io/posts-output/partitioningandmounting/&quot; target=&quot;_blank&quot;&gt;Live USB&lt;/a&gt; Enter BIOS with the Live USB inserted &lt;br/&gt; Select the Live USB to boot into the OS &lt;br/&gt; Follow specific steps to install the OS onto your Hard Disk Drive &lt;br/&gt;&lt;br/&gt; &lt;h2&gt;Specific Steps&lt;/h2&gt; &lt;br/&gt; &lt;h4&gt;Creating a Partition for the OS:&lt;/h4&gt; Linux:  &lt;a href=&quot;http://smsalman.com/wiki/partitioning-mounting-linux/&quot; target=&quot;_blank&quot;&gt;Partitioning Guide for Linux Distributions&lt;/a&gt; Windows: &lt;br/&gt;&lt;br/&gt; &lt;h4&gt;Create a Live USB:&lt;/h4&gt; As a reference you should look at a previously made guide ... &lt;a href=&quot;https://defunsm.github.io/posts-output/livebooting/&quot;&gt;Live USB Guide&lt;/a&gt; &lt;br/&gt;&lt;br/&gt; &lt;h4&gt;Enter BIOS:&lt;/h4&gt; &lt;br/&gt;&lt;br/&gt; &lt;h4&gt;Install Ubuntu:&lt;/h4&gt; &lt;br/&gt;&lt;br/&gt; &lt;em&gt;Now that you are booted into ubuntu click on the &lt;strong&gt;Install Ubuntu Icon&lt;/strong&gt;. &lt;/em&gt; &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/db2.png&quot; alt=&quot;Dual Boot&quot; /&gt; &lt;br/&gt;&lt;br/&gt; &lt;em&gt;Select the language and click continue.&lt;/em&gt; &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/db3.png&quot; alt=&quot;Dual booting Ubuntu&quot; /&gt; &lt;br/&gt;&lt;br/&gt; &lt;em&gt;Now make sure you choose the &quot;&lt;strong&gt;Something else&lt;/strong&gt;&quot; option or else you might risk losing data on other partitions.&lt;/em&gt; &lt;br/&gt;&lt;br/&gt; That should bring you to the installation type place where you select the partitions you made. Make sure you are selecting the right ones for them. &lt;br/&gt;&lt;br/&gt; The ext4 partition should contain the &lt;strong&gt;/&lt;/strong&gt; directory which is the root directory make sure to indicate that in the mount place. &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/db4.png&quot; alt=&quot;Ubuntu selecting Partition&quot; /&gt; &lt;br/&gt;&lt;br/&gt; &lt;em&gt;Now it should install and when you reboot it'll be a persistant operating system on your hard drive disk.&lt;/em&gt;&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 19 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/virtualmachine/
</guid>
<link>
http://salmanhossain.me/posts/virtualmachine/
</link>
<title>
Virtual Machine
</title>
<description>
&lt;p&gt;&lt;h2&gt;Run an operating system on a Virtual Machine&lt;/h2&gt; &lt;br/&gt;&lt;br/&gt; &lt;h3&gt;FAQ:&lt;/h3&gt; &lt;h4&gt;What is a virtual machine?&lt;/h4&gt; A virtual machine is an application that emulates a computer. &lt;br/&gt;&lt;br/&gt; &lt;h4&gt;Can the virtual machine effect my host machine?&lt;/h4&gt; No and Yes. Unless you are sharing a network or have shared folders you should have no problem. &lt;br/&gt;&lt;br/&gt; &lt;h4&gt;How do I run a virtual machine?&lt;/h4&gt; Downloading &lt;a href=&quot;https://www.virtualbox.org/&quot; target=&quot;&lt;i&gt;blank&quot;&gt;virtual box&lt;/a&gt; or &lt;a href=&quot;http://www.vmware.com/&quot; target=&quot;&lt;/i&gt;blank&quot;&gt;vmware&lt;/a&gt;. &lt;br/&gt;&lt;br/&gt; &lt;h4&gt;Which is better Vmware or Virtual Box?&lt;/h4&gt; Personally I use Virtual Box and this guide will show you how to use virtual box. &lt;br/&gt;&lt;br/&gt; &lt;h2&gt;Requirements for Virtual Machine&lt;/h2&gt; 1 ISO file 1 Computer / Laptop &lt;a href=&quot;https://www.virtualbox.org/&quot; target=&quot;_blank&quot;&gt;Virtual Box&lt;/a&gt; &lt;br/&gt;&lt;br/&gt; &lt;h2&gt;General Steps&lt;/h2&gt; &lt;br/&gt;&lt;br/&gt; Download ISO file (&lt;a href=&quot;http://www.ubuntu.com/desktop&quot; target=&quot;_blank&quot;&gt;Ubuntu&lt;/a&gt;) Download &lt;a href=&quot;https://www.virtualbox.org/&quot; target=&quot;_blank&quot;&gt;Virtual Box&lt;/a&gt; Create a virtual machine Set up Virtual Box Run the ISO file &lt;br/&gt;&lt;br/&gt; &lt;h2&gt;Specific Steps&lt;/h2&gt; &lt;br/&gt;&lt;br/&gt; &lt;h4&gt;Step 1: Download ISO File&lt;/h4&gt; &lt;br/&gt;&lt;br/&gt; &lt;em&gt;&lt;a href=&quot;http://www.ubuntu.com/desktop&quot; target=&quot;_blank&quot;&gt;You can download Ubuntu from their website.&lt;/a&gt;&lt;/em&gt; &lt;br/&gt;&lt;br/&gt; &lt;h4&gt;Step 2: Download Virtual Box&lt;/h4&gt; &lt;br/&gt;&lt;br/&gt; &lt;em&gt;&lt;a href=&quot;https://www.virtualbox.org/&quot; target=&quot;_blank&quot;&gt;You can download Virtual Box from their website.&lt;/a&gt;&lt;/em&gt; &lt;br/&gt;&lt;br/&gt; &lt;h4&gt;Step 3: Create a virtual machine&lt;/h4&gt; &lt;br/&gt;&lt;br/&gt; To do this open up Virtual Box. &lt;em&gt;Click on the new button.&lt;/em&gt; &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/vm1.png&quot; alt=&quot;virtual machine&quot; /&gt; &lt;br/&gt;&lt;br/&gt; &lt;em&gt;Type in the name of the operating system in this case ubuntu and it should automatically fill in the other fields. &lt;/em&gt; &lt;img src=&quot;https://defunsm.github.io/img/vm2.png&quot; alt=&quot;virtual box&quot; /&gt; &lt;strong&gt;Note:&lt;/strong&gt; If it doesnt automatically detect fill in the fields according to what operating system you want to run. &lt;br/&gt;&lt;br/&gt; &lt;em&gt;Next is to select the RAM.&lt;/em&gt; Usually it is fine to just use the recommended amount unless you plan on running an extensive program.  In which case you may wish to increase the RAM. &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/vm3.png&quot; alt=&quot;RAM Virtual Box&quot; /&gt; &lt;br/&gt;&lt;br/&gt; &lt;em&gt;It should by default be on virtual hard disk.&lt;/em&gt; Unless you want to specifically store it on another physical hard disk pick virtual. &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/vm4.png&quot; alt=&quot;virtual memory on disk&quot; /&gt; &lt;br/&gt;&lt;br/&gt; &lt;em&gt;Go with the default VDI which is the file type that the virtual disk image will be saved as.&lt;/em&gt; &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/vm5.png&quot; alt=&quot;VDI disk image&quot; /&gt; &lt;br/&gt;&lt;br/&gt; &lt;em&gt;Select the dynamically allocated otherwise it'll store it on your physical drive.&lt;/em&gt; &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/vm6.png&quot; alt=&quot;dynamically allocated virtual box&quot; /&gt; &lt;br/&gt;&lt;br/&gt; &lt;em&gt;Select the total amount of space the virtual disk can take up on your computer&lt;/em&gt; Normally this should just be set to the default unless you will be downloading a lot of things. &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/vm7.png&quot; alt=&quot;Amount of space the virtual disk will take up&quot; /&gt; &lt;br/&gt;&lt;br/&gt; &lt;em&gt;Now you should have the virtual machine set up.&lt;/em&gt; Now to select the ISO image you want to run on the virtual machine click settings. &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/vm8.png&quot; alt=&quot;Setting the ISO image&quot; /&gt; &lt;br/&gt;&lt;br/&gt; &lt;em&gt;To select the ISO image you want to run do the following ... Go to Storage-&gt;Empty-&gt;CD Icon (Boxed in Green)&lt;/em&gt; &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/vm9.png&quot; alt=&quot;ISO IMAGE&quot; /&gt; &lt;br/&gt;&lt;br/&gt; &lt;em&gt;Select the ISO image you want to run. In this case it is the Ubuntu ISO file.&lt;/em&gt; &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/vm10.png&quot; alt=&quot;Select ISO image&quot; /&gt; &lt;br/&gt;&lt;br/&gt; &lt;em&gt;Now you are selecting the ISO image and can click ok to exit.&lt;/em&gt; &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/vm11.png&quot; alt=&quot;Done with set up for virtual machine&quot; /&gt; &lt;br/&gt;&lt;br/&gt; &lt;em&gt;You have everything set up and now can click start and can now run the operating system.&lt;/em&gt; &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/vm12.png&quot; alt=&quot;Running virtual machine&quot; /&gt; &lt;br/&gt;&lt;br/&gt; Links: &lt;a href=&quot;https://www.virtualbox.org/&quot; target=&quot;&lt;i&gt;blank&quot;&gt;Virtual Box&lt;/a&gt;, &lt;a href=&quot;http://www.vmware.com/&quot; target=&quot;&lt;/i&gt;blank&quot;&gt;VmWare&lt;/a&gt;, &lt;a href=&quot;http://www.ubuntu.com/desktop&quot; target=&quot;_blank&quot;&gt;Ubuntu&lt;/a&gt;&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 18 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/pythonclasses/
</guid>
<link>
http://salmanhossain.me/posts/pythonclasses/
</link>
<title>
Python - Classes
</title>
<description>
&lt;p&gt;Creating classes is the bread and butter of object oriented programming. Before diving stright into the good stuff lets review and cover some more conceptual ideas before going into programming. The Python syntax for creating classes is pretty stright forward. Specially since creating a class in python has very little syntax then some of the other programming languages. &lt;br/&gt;&lt;br/&gt; We have seen different types so far in Python such as Strings/Integers/Floats. However what if you wanted to make a type? Thats what classes are actually. In a way they are user defined types. &lt;br/&gt;&lt;br/&gt; Scoping and Namespaces. Scoping is the idea that certain variables are defined in certain contexts. In python objects have attributes that are specific to that object. Instances which is what is created from a class share class variable shared between all instances of a particular class. &lt;/p&gt;&lt;pre&gt;&lt;code&gt;class Person:

    population = 0

    def &amp;#95;&amp;#95;init&amp;#95;&amp;#95;&amp;#40;self, name, money&amp;#41;:
        self.name = name
        self.money = money



def main&amp;#40;&amp;#41;:

    a = Person&amp;#40;&amp;quot;Batman&amp;quot;, 999999999&amp;#41;
    
    print&amp;#40;a.name&amp;#41;
    print&amp;#40;a.money&amp;#41;
    print&amp;#40;a.population&amp;#41;


main&amp;#40;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;So the syntax for creating a class is by using &quot;class&quot; all lower case. Followed by what you want to call the class in this case the class is called Person. The first letter is capitalized when giving the name of a class and ending with the double colon :. Also the init has two underscores infront of it and than followed by two underscores.&lt;br/&gt;&lt;br/&gt;When you run this this is the result you get.&lt;pre&gt;&lt;code&gt;Batman
999999999
0
&lt;/code&gt;&lt;/pre&gt;Explanations below&lt;br/&gt;&lt;br/&gt; Line 1:&lt;pre&gt;&lt;code&gt;class Person: 
&lt;/code&gt;&lt;/pre&gt;This is the syntax in which you begin when defining a class. In this case our class is called Person. As I said before the name of the class must be capitalized. It is similiar to defining a function as everything under it is indented by a tab or spaces but just stick to one. There is a whole debate regarding tabs vs spaces but just stick to one and don't intermix spaces and tabs and you should be fine.&lt;br/&gt;&lt;br/&gt;Line 3:&lt;pre&gt;&lt;code&gt;population = 0
&lt;/code&gt;&lt;/pre&gt;This in python is known as a class variable. This is shared with all other &quot;instances&quot; that you create that is related to the class Person. Instances which you'll see are created using a similar syntax as a function but binding it to a symbol or variable which you saw in the main function.&lt;br/&gt;&lt;br/&gt;Line 4-7:&lt;pre&gt;&lt;code&gt;def &amp;#95;&amp;#95;init&amp;#95;&amp;#95;&amp;#40;self, name, money&amp;#41;:
        self.name = name
        self.money = money
&lt;/code&gt;&lt;/pre&gt;This may be a little frightening to see. But this is not too different from making a function.&lt;code&gt; &amp;#95;&lt;i&gt;init&amp;#95;&lt;/i&gt;&lt;/code&gt; is special that it is called whenever a class instance is created using a constructor. Here you are telling python that the constructor function must take 2 arguments. But wait what is this self argument that the constructor is taking? &lt;code&gt;__init&amp;#95;_&lt;/code&gt; always takes self as the first argument and the rest of the arguments can be applied as attributes like we are doing here. Attributes are called using the . syntax on the variable that is holding the instance. &lt;br/&gt;&lt;br/&gt;Line 14:&lt;pre&gt;&lt;code&gt;a = Person&amp;#40;&amp;quot;Batman&amp;quot;, 999999999&amp;#41;
&lt;/code&gt;&lt;/pre&gt;There is a lot packed into here that doesn't meet the eye. So I will try my best to not leave anything out and explain it the best I can so that this makes sense and there is no confusion since it is very easy to get confused here. &lt;br/&gt;&lt;br/&gt;You can consider Person(&quot;Batman&quot;, 999999999) as &quot;making&quot; the instance of the class Person. This is what is known as a constructor. It is creating an instance of the class Person based on the specifications that you set in the def &lt;code&gt;init&lt;/code&gt;. The constructor will take two arguments a name and the money that the person has. Note that you don't pass three arguments but only two this is because self is a special argument that gets passed onto itself already that you don't have to worry about hence self.&lt;br/&gt;&lt;br/&gt;Line 15-17:&lt;pre&gt;&lt;code&gt;print&amp;#40;a.name&amp;#41;
print&amp;#40;a.money&amp;#41;
print&amp;#40;a.population&amp;#41;
&lt;/code&gt;&lt;/pre&gt;So to get the class variables and attributes you use the variable you attached to it and use the . syntax to get the attribute of the class. name and money are attributes that are specific to the instance created. However population is a class variable that is shared with all instances. To demonstrate this point add the following to your main function below all the prints.&lt;pre&gt;&lt;code&gt;    k = Person&amp;#40;&amp;quot;Superman&amp;quot;, 100000&amp;#41;

    print&amp;#40;k.name&amp;#41;
    print&amp;#40;k.money&amp;#41;
    print&amp;#40;k.population&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Now running this you can see that k as the attribute population as well. This attribute is the same attribute as the attribute from a. This is shared between both superman instance and batman instance.&lt;br/&gt;&lt;br/&gt;You can change the attribute and it won't be updated for the other like the following. Add the following in the body of your def main. Keeping the rest the same.&lt;pre&gt;&lt;code&gt;a.population = 3
print&amp;#40;a.population&amp;#41;
print&amp;#40;k.population&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So your main function should look like this now.&lt;pre&gt;&lt;code&gt;def main&amp;#40;&amp;#41;:

    a = Person&amp;#40;&amp;quot;Batman&amp;quot;, 999999999&amp;#41;

    print&amp;#40;a.name&amp;#41;
    print&amp;#40;a.money&amp;#41;
    print&amp;#40;a.population&amp;#41;

    k = Person&amp;#40;&amp;quot;Superman&amp;quot;, 100000&amp;#41;

    print&amp;#40;k.name&amp;#41;
    print&amp;#40;k.money&amp;#41;
    print&amp;#40;k.population&amp;#41;
    
    a.population = 3
    print&amp;#40;a.population&amp;#41;
    print&amp;#40;k.population&amp;#41;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;This is the result:&lt;pre&gt;&lt;code&gt;Batman
999999999
1
Superman
100000
1
3
1
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Now running this will result seeing that the a.population results in 3 while the k.population is still 1. So you can change an attribute using the dot syntax and the attribute name of the instance followed by the assignment operator to set the attribute for that specific instance to a different value just like you do for other variables expect it will be specific for that instance alone.  &lt;br/&gt;&lt;br/&gt; Lets look at another feature of classes. So lets change our entire python file to this.&lt;pre&gt;&lt;code&gt;class Person:

    population = 0

    def &amp;#95;&amp;#95;init&amp;#95;&amp;#95;&amp;#40;self, name, money&amp;#41;:
        self.name = name
        self.money = money

    def getname&amp;#40;self&amp;#41;:
        print&amp;#40;self.name&amp;#41;

    def getmoney&amp;#40;self&amp;#41;:
        print&amp;#40;self.money&amp;#41;

    def getpopulation&amp;#40;self&amp;#41;:
        print&amp;#40;self.population&amp;#41;


def main&amp;#40;&amp;#41;:

    a = Person&amp;#40;&amp;quot;Batman&amp;quot;, 999999999&amp;#41;
    k = Person&amp;#40;&amp;quot;Superman&amp;quot;, 100000&amp;#41;

    print&amp;#40;&amp;quot;Batman info:&amp;quot;&amp;#41;
    a.getname&amp;#40;&amp;#41;
    a.getmoney&amp;#40;&amp;#41;
    a.getpopulation&amp;#40;&amp;#41;

    print&amp;#40;&amp;quot;Superman info:&amp;quot;&amp;#41;
    k.getname&amp;#40;&amp;#41;
    k.getmoney&amp;#40;&amp;#41;
    k.getpopulation&amp;#40;&amp;#41;

main&amp;#40;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Results:&lt;pre&gt;&lt;code&gt;Batman info:
Batman
999999999
0
Superman info:
Superman
100000
0
 &lt;/code&gt;&lt;/pre&gt; Notice that we have more defs within our class now. We have getname, getmoney and getpopulation. These are functions specific to the class Person. So that means that these functions will only work on instances that are from the class Person. now you see something you might have remembered doing previously when working with numbers. &lt;pre&gt;&lt;code&gt;print&amp;#40;&amp;quot;Batman info:&amp;quot;&amp;#41;
a.getname&amp;#40;&amp;#41;
a.getmoney&amp;#40;&amp;#41;
a.getpopulation&amp;#40;&amp;#41;

print&amp;#40;&amp;quot;Superman info:&amp;quot;&amp;#41;
k.getname&amp;#40;&amp;#41;
k.getmoney&amp;#40;&amp;#41;
k.getpopulation&amp;#40;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Now you notice we have parantheses at the end to call the functions for that instance. This is the syntax to call a function from a particular instance of a class. However if you use just getname() it won't work because it is specific to the class Person and so you have to use it with an instance of class Person. &lt;br/&gt;&lt;br/&gt; This is very much like doing Math.cos() expect instead of calling the function from a specific module that is avaliable you are calling a function from a class. More specifically an instance that has the functions from the class.  &lt;br/&gt;&lt;br/&gt; Wrapping up:&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;br/&gt; Lets review because there is quite a bit that was talked about here but maybe not fully discussed about. First we have the whole concept of classes. For now classes can be thought of has a seperate namespace that you have with variables in that namespace.  &lt;br/&gt;&lt;br/&gt; Attributes are very much like variables that are specific to the instance. Instances being what is created when using a constructor which is how we created the Batman and Superman instances from the class Person. The constructor looks for a template on how to make the instance and then creates it using the &quot;&lt;b&gt;init&lt;/b&gt;&quot; function that is called when an instance is made. The init function should not be treated like a normal function within the class. It is ONLY called when you create an instance such as when batman and superman was first created by calling the constructor. The constructor calls &lt;b&gt;init&lt;/b&gt; if there is one and that is the only way that function gets called. Until you make another instance that is then it is called again for that instance. &lt;br/&gt;&lt;br/&gt; I threw around a lot of words and it may still not click much for you what exactly instances, classes, constructors are exactly. However it just takes time to get used to seeing them and practice making your own classes and playing around with them to figure what what they can be or can't be.  &lt;br/&gt;&lt;br/&gt; I didnt go over too well what exactly the a and k are doing but they are essentially objects holding the instance. You can check this using type on both a and k by adding the following lines at the end of the main function.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;print&amp;#40;type&amp;#40;a&amp;#41;&amp;#41;
print&amp;#40;type&amp;#40;k&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You'll see from the result that both a and k are of class Person. &lt;br/&gt;&lt;br/&gt; Now that you have created classes you can greatly abstract your programs with all kinds of self created classes. However be weary that not all cases call for classes. You can sometimes just write a function instead of actually make an entire class for it. Knowing the difference between when to create a function or a class can sometimes be tricky but generally you should try to create functions. The only time you need to create a class if you need to create objects that require specific individual attributes and need to be manipulated in a special way that a function would constrict you from doing. &lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 15 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/livebooting/
</guid>
<link>
http://salmanhossain.me/posts/livebooting/
</link>
<title>
Live Booting (USB)
</title>
<description>
&lt;p&gt;&lt;h2&gt;Live Booting an Operating System from an USB&lt;/h2&gt; &lt;br/&gt;&lt;br/&gt; &lt;h3&gt;FAQ:&lt;/h3&gt; &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;h4&gt;What is live booting?&lt;/h4&gt; Live booting is running an operating system on the computer's memory rather than its hard disk drive. &lt;br/&gt;&lt;br/&gt; &lt;h4&gt;Does live booting remove my previous operating system?&lt;/h4&gt; No. If you don't want to install the operating system you don't have to. &lt;br/&gt;&lt;br/&gt; &lt;h4&gt;What is the BIOS?&lt;/h4&gt; Basic Input/Output System. You'll need to access the BIOS if you want to live boot. Usually done by pressing F12/F11 when starting the computer/laptop. &lt;br/&gt;&lt;br/&gt; &lt;h4&gt;What is a ISO file?&lt;/h4&gt; It is a file that acts like a physical CD. &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;h2&gt;Requirements for Live Booting&lt;/h2&gt; &lt;ol&gt; &lt;br/&gt;&lt;br/&gt; 1 Laptop / Computer 1 USB 1 ISO File with the operating system &lt;a href=&quot;http://rufus.akeo.ie/&quot; target=&quot;_blank&quot;&gt;Rufus&lt;/a&gt; (only WINDOWS) &lt;/ol&gt; &lt;br/&gt;&lt;br/&gt; &lt;h2&gt;General Steps &lt;/h2&gt; &lt;br/&gt;&lt;br/&gt; For Linux:  &lt;br/&gt;&lt;br/&gt; &lt;li&gt; Download ISO file (&lt;a href=&quot;http://www.ubuntu.com/desktop&quot; target=&quot;_blank&quot;&gt;Ubuntu&lt;/a&gt;) &lt;br/&gt;&lt;br/&gt;&lt;li&gt; Open up a terminal Mount the USB onto the computer Use dd command to copy ISO file to USB &lt;/li&gt; &amp;nbsp; &lt;br/&gt;&lt;br/&gt; For Windows: &lt;br/&gt;&lt;br/&gt; &lt;li&gt; Download ISO file (&lt;a href=&quot;http://www.ubuntu.com/desktop&quot; target=&quot;_blank&quot;&gt;Ubuntu&lt;/a&gt;) Download &lt;a href=&quot;http://rufus.akeo.ie/&quot; target=&quot;_blank&quot;&gt;Rufus&lt;/a&gt; &lt;/li&gt;&lt;/p&gt;&lt;p&gt;&lt;h2&gt;Specific Guide&lt;/h2&gt; &lt;br/&gt;&lt;br/&gt; For Linux: &lt;br/&gt;&lt;br/&gt; &lt;h4&gt;Step 1: Download ISO&lt;/h4&gt; &lt;br/&gt;&lt;br/&gt; The ISO can be either 64 bit or 32 bit. Normally it should match the current bit you own. A quick way to check which bit your computer has is by doing the following ... &lt;br/&gt;&lt;br/&gt; &lt;code&gt;$ uname -a&lt;/code&gt; &lt;br/&gt;&lt;br/&gt; &lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;uname&lt;/code&gt; is used to display system information. &lt;br/&gt;&lt;br/&gt; If x86_64 is displayed your system is a 64 bit otherwise it is a 32 bit. While the ISO file you download can be either 64 bit is generally better however it depends on your individual needs. &lt;br/&gt;&lt;br/&gt; &lt;a href=&quot;http://www.ubuntu.com/desktop&quot; target=&quot;_blank&quot;&gt;You can download Ubuntu from their website.&lt;/a&gt; &lt;br/&gt;&lt;br/&gt; &lt;h4&gt;Step 2: Mount USB to computer&lt;/h4&gt; &lt;br/&gt;&lt;br/&gt; Plug the USB into the computer Check for a mount point for the USB inserted with ... &lt;br/&gt;&lt;br/&gt; &lt;code&gt;$ lsblk&lt;/code&gt; &lt;br/&gt;&lt;br/&gt; This will display all avaliable devices attached to the computer. &lt;br/&gt;&lt;br/&gt; If you want to create a mount point do the following using &lt;code&gt;mount&lt;/code&gt; ... However this is not needed unless you want to save some files first since the next part will remove everything on the USB. &lt;br/&gt;&lt;br/&gt; &lt;code&gt;$ mount /dev/&quot;USB&quot; /mnt&lt;/code&gt; - Replace /dev/&quot;USB&quot; whatever the USB is named on your system. &lt;br/&gt;&lt;br/&gt; Hint: You can check the name of your usb is by unplugging and doing a &lt;code&gt;lsblk&lt;/code&gt; and then plugging the usb back in and checking which usb was added by doing another &lt;code&gt;lsblk&lt;/code&gt;. &lt;br/&gt;&lt;br/&gt; &lt;a href=&quot;http://smsalman.com/wiki/partitioning-mounting-linux/&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;For more guidence and instructions on using &lt;code&gt;lsblk&lt;/code&gt; and mounting. &lt;/em&gt;&lt;/a&gt; &lt;br/&gt;&lt;br/&gt; You can now &lt;code&gt;cd&lt;/code&gt; to the /mnt directory to view files within the USB. If you want to copy files from the USB to elsewhere you can use &lt;code&gt;cp&lt;/code&gt;. &lt;br/&gt;&lt;br/&gt; &lt;h4&gt;Step 3: Copy ISO File Using DD Command&lt;/h4&gt;  &lt;br/&gt;&lt;br/&gt; The dd command copies a file in this case it would be the iso file to the USB ... &lt;br/&gt;&lt;br/&gt; &lt;strong&gt;Warning:&lt;/strong&gt; This will remove contents in the USB. &lt;br/&gt;&lt;br/&gt; &lt;code&gt;$ dd if=ubuntu-15.10-desktop-amd64.iso of=/dev/&quot;USB&quot; bs=512k&lt;/code&gt; &lt;br/&gt;&lt;br/&gt; Replace to fit your individual situations.  &lt;br/&gt;&lt;br/&gt; The ISO file goes in the if=&quot;YOUR ISO FILE&quot; section. The location is the USB which goes in the of=/dev/&quot;USB&quot;. Finally the bs= determines the amount of bytes being written at a given time. &lt;br/&gt;&lt;br/&gt; You can &lt;code&gt;man&lt;/code&gt; the &lt;code&gt;dd&lt;/code&gt; command for more information. You should be done and have a bootable live USB with Ubuntu or whatever ISO file you used. &lt;br/&gt;&lt;br/&gt; &lt;h4&gt;Step 4: Enter BIOS&lt;/h4&gt; &lt;br/&gt;&lt;br/&gt; Make sure your USB is sticked into your computer and reboot into your computer's BIOS mode. &lt;br/&gt;&lt;br/&gt; Pressing F12 or F11 usually brings you to the BIOS mode otherwise you might need to do a google search. You will most likely need to be in UEFI mode and may have to have secure boot disabled if it doesn't work. &lt;br/&gt;&lt;br/&gt; Select the USB and it should boot into the live operating system. &lt;br/&gt;&lt;br/&gt; For Windows: &lt;br/&gt;&lt;br/&gt; &lt;h4&gt;Step 1: Download ISO&lt;/h4&gt; &lt;br/&gt;&lt;br/&gt; The ISO can be either 64 bit or 32 bit. Normally it should match the current bit you own. A quick way to check which bit your computer has is by doing the following ... &lt;br/&gt;&lt;br/&gt; &lt;code&gt;$ uname -a&lt;/code&gt; &lt;br/&gt;&lt;br/&gt; &lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;uname&lt;/code&gt; is used to display system information. &lt;br/&gt;&lt;br/&gt; If x86_64 is displayed your system is a 64 bit otherwise it is a 32 bit. While the ISO file you download can be either 64 bit is generally better however it depends on your individual needs. &lt;br/&gt;&lt;br/&gt; &lt;em&gt;&lt;a href=&quot;http://www.ubuntu.com/desktop&quot; target=&quot;_blank&quot;&gt;You can download Ubuntu from their website.&lt;/a&gt;&lt;/em&gt; &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;h4&gt;Step 2: Download Rufus&lt;/h4&gt; &lt;br/&gt;&lt;br/&gt; &lt;a href=&quot;http://rufus.akeo.ie/&quot; target=&quot;_blank&quot;&gt;Rufus&lt;/a&gt; is a program that allows for bootable USBs. There are other programs that can be used besides this but I find Rufus to be easier and faster. &lt;br/&gt;&lt;br/&gt; &lt;em&gt;&lt;a href=&quot;http://rufus.akeo.ie/&quot; target=&quot;_blank&quot;&gt;Download Rufus from the Website.&lt;/a&gt;&lt;/em&gt; &lt;br/&gt;&lt;br/&gt; &lt;h4&gt;Step 3: Select USB and ISO on Rufus &lt;/h4&gt; &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/usb1.png&quot; alt=&quot;Live Booting&quot; height=&quot;600&quot; width=&quot;300&quot; /&gt; &lt;br/&gt;&lt;br/&gt; For the device section select your USB. &lt;strong&gt;Warning:&lt;/strong&gt; Before preceding any further this process will remove everything in the USB. &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/usb2.png&quot; alt=&quot;Rufus&quot; height=&quot;600&quot; width=&quot;300&quot; /&gt; &lt;br/&gt;&lt;br/&gt; Click on the CD image and select your ISO file. Leave the rest of the fields the same and press start. The process takes a while but after its done you should now have a bootable live USB. &lt;br/&gt;&lt;br/&gt; &lt;h4&gt;Step 4: Enter BIOS&lt;/h4&gt; &lt;br/&gt;&lt;br/&gt; Make sure your USB is sticked into your computer and reboot into your computer's BIOS mode. Pressing F12 or F11 usually brings you to the BIOS mode otherwise you might need to do a google search. You will most likely need to be in UEFI mode and may have to have secure boot disabled if it doesn't work. &lt;br/&gt;&lt;br/&gt; Select the USB and it should boot into the live operating system. &lt;br/&gt;&lt;br/&gt; Links: &lt;a href=&quot;http://rufus.akeo.ie/&quot; target=&quot;&lt;i&gt;blank&quot;&gt;Rufus&lt;/a&gt;, &lt;a href=&quot;http://www.ubuntu.com/desktop&quot; target=&quot;&lt;/i&gt;blank&quot;&gt;Ubuntu&lt;/a&gt;&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Fri, 14 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/pythonloops/
</guid>
<link>
http://salmanhossain.me/posts/pythonloops/
</link>
<title>
Python - Recursion
</title>
<description>
 &lt;p&gt; Recursion is a important concept in computer science and a useful technique to use in programming. It cuts down time and saves you unnessary typing which is always good. Most programming languages allow recursion and it is a very useful way to reach a solution to a problem that requires the result of the previous solution.  &lt;br/&gt;&lt;br/&gt;  There are a couple of ways to implement recursion in your programs. Once you learn how to do recursion you'll be able to greatly type less and deploy more interesting behavior in your program.  &lt;br/&gt;&lt;br/&gt;  One of the ways to implement recursion in python is using a for loop. This is typically the way loops are done in python and is tend to be safer than the other ways. Since using a for loop you set the condition for which is looping.  &lt;/p&gt;&lt;p&gt; &lt;br/&gt;&lt;br/&gt;  For loops are rather nice that they usually loop the elements of a list. So you can hand a bunch of elements and the for loop will do something to each one of them. Lets look at an example.  &lt;/p&gt;&lt;pre&gt;&lt;code&gt; def main&amp;#40;&amp;#41;:

    sum = 0
    for i in range&amp;#40;5&amp;#41;:
        print&amp;#40;i&amp;#41;
        sum += i

    print&amp;#40;sum&amp;#41;


main&amp;#40;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Results:&lt;pre&gt;&lt;code&gt;0
1
2
3
4
10
&lt;/code&gt;&lt;/pre&gt;Notice that a variable is being set before the for part is started. The sum is set to 0 before the for loop begins on line 4. Line 4 is where the for loop begins and everything in the loop is indented. This is the syntax for for loops. Notice that following the for keyword is a variable &quot;i&quot; which is arbitary but you could call it whatever really just make sure your using the same variable in the body of the loop. After the variable you use &quot;in&quot; which is followed by the list which is created by range(5). Range is a really nice function that creates a list of numbers in this case it creates numbers from 0 to 4. This is evident since you see the numbers being printed. Also note that at the end when we print sum all of the numbers printed added up is indeed 10 so the numbers in the list created by range(5) was added to the sum variable one at a time. If the sum += 1 is a bit weird to you it is really the same thing as doing sum = sum + 1. The way I have written it is more cleaner since it removes writing sum again and if you coded in c++ before you mightve seen the same kind of style before. &lt;br/&gt;&lt;br/&gt;Now lets take another look at a way to do the same thing but using a while loop.&lt;pre&gt;&lt;code&gt;def main&amp;#40;&amp;#41;:

    sum = 0
    i = 0
    while i &amp;lt; 5:
        print&amp;#40;i&amp;#41;
        sum += i
        i += 1

    print&amp;#40;sum&amp;#41;


main&amp;#40;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Result:&lt;pre&gt;&lt;code&gt;0
1
2
3
4
10
&lt;/code&gt;&lt;/pre&gt;The result is the same with using a while loop. However notice that we had to implicitly create the sum and i variable this time and set both to 0. Also make a condition for the while loop so that it knows when to stop. If we wrote while True: instead of putting the condition after the while it would essentially run forever so don't do this. Also if you didn't increment the i variable by 1 every time in the loop then also the while loop will run forever. This is why writing while loops are not as safe as writing a for loop since there is a potentional for while loops to run forever.&lt;br/&gt;&lt;br/&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 12 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/pythonfunctions/
</guid>
<link>
http://salmanhossain.me/posts/pythonfunctions/
</link>
<title>
Python - Functions
</title>
<description>
 &lt;p&gt;So as you been writing python code you may see me typing things such as this every time at the beginning of any file.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;def main&amp;#40;&amp;#41;:
      
      # some kind of code here in the body.
        
main&amp;#40;&amp;#41;        
&lt;/code&gt;&lt;/pre&gt;In python &quot;def&quot; is the keyword that is used to create a function defination. Following after the keyword is of course the function name. So the syntax for creating a general function is such.&lt;pre&gt;&lt;code&gt;def functionName&amp;#40;arg1, arg2&amp;#41;:
&lt;/code&gt;&lt;/pre&gt;arg1 and arg2 are the arguments passed to the function. These arguments can be variables from other functions, strings, values, later on you'll see lists and hashes. To demonstrate a function lets write a function that'll help us do some math. Lets say we want to find the hypothenuse given the legs of the triangle. We could define a function called &quot;hypothenuse&quot; than pass the arguments to the function.&lt;pre&gt;&lt;code&gt;import sys, math

def hypothenuse&amp;#40;a, b&amp;#41;:

    return math.sqrt&amp;#40;float&amp;#40;a&amp;#41; &amp;#42;&amp;#42; 2 + float&amp;#40;b&amp;#41; &amp;#42;&amp;#42; 2&amp;#41;

def main&amp;#40;&amp;#41;:

    print&amp;#40;hypothenuse&amp;#40;sys.argv&amp;#91;1&amp;#93;, sys.argv&amp;#91;2&amp;#93;&amp;#41;&amp;#41;

main&amp;#40;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;First we are importing sys and math which we will both need their libraries to write the hypothenuse function. Since from the pythagorean theorem we know that a ^ 2 + b ^ 2 = c ^ 2 so c = sqrt(a ^ 2 + b ^ 2). So our function hypothenuse will do something like that in it's body.&lt;br/&gt;&lt;br/&gt;Something new that you are seeing is the return and as the name suggests it is returning the value calculated by the hypothenuse function.&lt;br/&gt;&lt;br/&gt;If you are coming from C++ you know that every function has a return but in python that is not the case. In the main function we have the hypothenuse function given the sys.argv[1] as an argument for a and sys.argv[2] as the argument for b. The Hypothenuse function will then use the arguments recieved from the terminal and than preform the pythagorean theorem and boom returns a value which then print will print it to the standard output to your terminal.&lt;br/&gt;&lt;br/&gt;So to check that works this is what you should type into your terminal in my case I called my file hypothenuse.py but you use whatever you called your file.&lt;pre&gt;&lt;code&gt;$ python3 hypothenuse.py 3 4
&lt;/code&gt;&lt;/pre&gt;The result is ...&lt;pre&gt;&lt;code&gt;5.0
&lt;/code&gt;&lt;/pre&gt;So we could see that the hypothenuse function is returning back it's value and then print is printing it out to display to us the value.&lt;br/&gt;&lt;br/&gt;Wraping up:&lt;br/&gt;&lt;br/&gt;Thats all there is too it not too complicated. Just make sure to give your function name reasonable names and have meaning to them otherwise when you begin to write a lot of code and need to know what a function does you don't want go through reading the code in that function so having the function name relatable to what it's doing is important. As well as making sure your passing it the right kind of arguments. Make sure that if it wants a string to pass it a string and if the function wants a number pass it a number. In this case we don't have to worry about that since float will just convert it but in other cases you may need to consider it. As well as passing it the right number of arguments. If you passed hypothenuse three arguments instead of two it would give you a typeError that hypothenuse only takes 2 positional arguments but 3 were given. This is because the function will not know what to do with the extra function so you need to keep in mind when writing a function and than using that function how many arguments it will take. There are also ways to write functions take take any number of arguments which I'll show you later on.
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 11 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/pythonuserinput/
</guid>
<link>
http://salmanhossain.me/posts/pythonuserinput/
</link>
<title>
Python - User input
</title>
<description>
 &lt;p&gt;In this section we'll learn all about user input. How we can get our code to prompt the user for some information and than do something with that information. This is a pretty useful thing to do since usually we want to collect some kind of user data and manipulate it in some way. So lets say we want to do some math and return the sin of whatever the user inputs. We would first need to import math into our code since we need to use math.sin() and also using input() which is how you ask for user input from the user.&lt;pre&gt;&lt;code&gt;import math

def main&amp;#40;&amp;#41;:

    user&amp;#95;input = input&amp;#40;&amp;quot;&amp;gt; &amp;quot;&amp;#41;
    answer = math.sin&amp;#40;user&amp;#95;input&amp;#41;
    print&amp;#40;answer&amp;#41;

main&amp;#40;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Once you run that you'll quickly realize that something went wrong. Oh no. You get an error TypeError that a float is required on line 6. So what is going on here? Well math.sin needs a float as an argument. Otherwise it can't do its operations. We'll learn more about functions and how they take arguments soon enough but note that when we use input() the variable user_input stores the input that the user writes as a STRING and NOT a INTEGER. Thus we need to convert the user input to a float. Luckily Python is rather convinent and has a function to do just that that you have seen before float(). You can use float() on a string to convert it into a float and there is another function called int() that will convert your string or number to a integer.&lt;pre&gt;&lt;code&gt;float&amp;#40;&amp;quot;5&amp;quot;&amp;#41; =&amp;gt; 5.0

int&amp;#40;&amp;quot;5&amp;quot;&amp;#41; =&amp;gt; 5
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;So add the user_input as an argument of float like so.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import math

def main&amp;#40;&amp;#41;:

    user&amp;#95;input = input&amp;#40;&amp;quot;&amp;gt; &amp;quot;&amp;#41;
    answer = math.sin&amp;#40;float&amp;#40;user&amp;#95;input&amp;#41;&amp;#41;
    print&amp;#40;answer&amp;#41;

main&amp;#40;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Notice that to give a function an argument you place a variable, string, number or anything else into the parantheses that come after it. You may wonder about why you need to use a period to call the function sin because it imported from the math library and using the function from there and hence you use the period to indicate that and otherwise you would get an error without including the math part and wouldn't know where the function sin is coming from thinking you have written your own sin function. Now run the code and you shouldn't get an error this time.&lt;br/&gt;&lt;br/&gt;The result is that you get a prompt like the following below:&lt;pre&gt;&lt;code&gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;Which you can enter a number which math.sin and thus pops out a decimal. However you may notice that it does radians instead of degrees. If that annoys you than theres an easy fix to convert the answer into degrees using math.radians(). Just give the answer produced by float(user_input) to math.radians() and it will do the conversation for you so you can type in degrees.&lt;pre&gt;&lt;code&gt;answer = math.sin&amp;#40;math.radians&amp;#40;float&amp;#40;user&amp;#95;input&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;We could also get userinput stright from the command line by rewriting out code a little bit and importing sys. Which allows you to take in arguments from the command and do a whole lot of more system related stuff. We can also get rid of our userinput and clean it up to be the following ...&lt;pre&gt;&lt;code&gt;import sys
import math

def main&amp;#40;&amp;#41;:

    answer = math.sin&amp;#40;math.radians&amp;#40;float&amp;#40;sys.argv&amp;#91;1&amp;#93;&amp;#41;&amp;#41;&amp;#41;
    print&amp;#40;answer&amp;#41;

main&amp;#40;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;If you run that with the following...&lt;pre&gt;&lt;code&gt;$ python3 yourfile.py 
&lt;/code&gt;&lt;/pre&gt;You will get an IndexError and says that list index is out of range? Well this is because now that you have used sys.argv[1] but you didnt give an argument when running the file. sys.argv takes arguments from your command line so when it doesn't recieve one it'll throw you an error. We'll learn more about catching these errors and managing them with try and except. As well as other things about error handling. So the right way to run the file now is to add the number you want the sin of in your command line as an argument to python3 like so ...&lt;pre&gt;&lt;code&gt;$ python3 yourfile.py 90
&lt;/code&gt;&lt;/pre&gt;The result of this is the following...&lt;pre&gt;&lt;code&gt;1.0
&lt;/code&gt;&lt;/pre&gt;As expected the sin of 90 is 1 and you have your expected result. Now you have a python file that does sin which is rather since but what if you want both sin and cos? How would you do that? Well there is a few ways we could use if-statements which is the way we are going to do it or we could just show both results. But we are going to do the if-statement way and make a nice little way that the user can enter either cos or sin followed by the number they want to find the sin or cos of. This can easily be done using if-statements which you learned about and changing your code to the following...&lt;pre&gt;&lt;code&gt;import sys
import math

def main&amp;#40;&amp;#41;:

    if &amp;#40;sys.argv&amp;#91;1&amp;#93; == &amp;quot;sin&amp;quot;&amp;#41;:
        answer = math.sin&amp;#40;math.radians&amp;#40;float&amp;#40;sys.argv&amp;#91;2&amp;#93;&amp;#41;&amp;#41;&amp;#41;
        print&amp;#40;answer&amp;#41;
    elif &amp;#40;sys.argv&amp;#91;1&amp;#93; == &amp;quot;cos&amp;quot;&amp;#41;:
        answer = math.cos&amp;#40;math.radians&amp;#40;float&amp;#40;sys.argv&amp;#91;2&amp;#93;&amp;#41;&amp;#41;&amp;#41;
        print&amp;#40;answer&amp;#41;
    else:
        print&amp;#40;&amp;quot;Don't know what to do with &amp;quot;, sys.argv&amp;#91;1&amp;#93;&amp;#41;

main&amp;#40;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Now that you added sys.argv[2] pyton will be expecting another argument. So to run the program now you have to do something like this ...&lt;pre&gt;&lt;code&gt;$ python3 yourfile.py cos 0
&lt;/code&gt;&lt;/pre&gt;The result should be 1.0 just like you expect.&lt;br/&gt;&lt;br/&gt;Wraping up:&lt;br/&gt;&lt;br/&gt;You can keep adding more and more arguments as your heart desires. Now you have a python file that does both sin and cos and you can keep adding to its functionally and maybe make raising numbers to an exponent or whatever really. You may be wondering what the brackets are on sys.argv are. Sys.argv itself is something called a list. A list can contain things such as strings which is how we are getting the arguments from the terminal. As you saw changing the number in the bracket will give you access to a different argument provided from the command line. However without going too much indepth about what exactly a list is because thats for another time just know that lists are just one way to index through and store things in this case the user agruments that he or she types from the command line. This is the very reason that you get and index error when you try to access a sys.argv index that hasn't been given yet. Now that you have learned how to get user input you could radically change your code and make some more interesting functionality with your python code. Maybe even recreate a mini &lt;a href='https://en.wikipedia.org/wiki/Zork'&gt;Zork&lt;/a&gt;.
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 10 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/pythonifstatements/
</guid>
<link>
http://salmanhossain.me/posts/pythonifstatements/
</link>
<title>
Python - If-else-statements
</title>
<description>
 &lt;p&gt;Previously you learned about booleans and how to do logical statements. Now we'll learn how to use the booleans to do conditional statements in Python. Conditional statements like in many programming languages call them if-else-statements. If this is true then this is done else this other thing is done. You'll see soon enough what I mean. If-Else-Statements take a condition and if the condition is true will do the expression otherwise it will do the other expression since it is false.  &lt;br/&gt;&lt;br/&gt; Enough of me just talking see for yourself how it works. Open up a text editor and type in the following if-else statements.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;def main&amp;#40;&amp;#41;:

    if &amp;#40;True&amp;#41;:
        print&amp;#40;&amp;quot;I am printing because I am True!&amp;quot;&amp;#41;

    if &amp;#40;False&amp;#41;:
        print&amp;#40;&amp;quot;I am not going to print because I am False!&amp;quot;&amp;#41;


    age = 19

    if &amp;#40;age &amp;gt; 10&amp;#41;:
        print&amp;#40;&amp;quot;I am older than 10 years.&amp;quot;&amp;#41;

    if &amp;#40;age &amp;gt; 20&amp;#41;:
        print&amp;#40;&amp;quot;I am older than 20 years.&amp;quot;&amp;#41;
    else:
        print&amp;#40;&amp;quot;I am younger than 20 years.&amp;quot;&amp;#41;


    grade = 81

    if &amp;#40;grade &amp;gt; 90&amp;#41;:
        print&amp;#40;&amp;quot;I got over 90.&amp;quot;&amp;#41;
    elif &amp;#40;grade &amp;gt; 80&amp;#41;:
        print&amp;#40;&amp;quot;I got over 80&amp;quot;&amp;#41;
    elif &amp;#40;grade &amp;gt; 70&amp;#41;:
        print&amp;#40;&amp;quot;I got over 70.&amp;quot;&amp;#41;
    else:
        print&amp;#40;&amp;quot;I got under 70.&amp;quot;&amp;#41;


    if &amp;#40;grade &amp;gt; 90 and age &amp;gt; 20&amp;#41;:
        print&amp;#40;&amp;quot;I got over a 90 and I am over 20 years old.&amp;quot;&amp;#41;
    elif &amp;#40;grade &amp;gt; 70 and age &amp;gt; 20&amp;#41;:
        print&amp;#40;&amp;quot;I got over a 70 and am over 20 years old.&amp;quot;&amp;#41;
    else:
        print&amp;#40;&amp;quot;I got a&amp;quot;, grade, &amp;quot;and am over&amp;quot;, age, &amp;quot;years old.&amp;quot;&amp;#41;

main&amp;#40;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;Result:&lt;pre&gt;&lt;code&gt;I am printing because I am True!
I am older than 10 years.
I am younger than 20 years.
I got over 80
I got a 81 and am over 19  years old.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br/&gt;&lt;br/&gt; Explanation below: &lt;br/&gt;&lt;br/&gt; Line 3-7:&lt;pre&gt;&lt;code&gt;    if &amp;#40;True&amp;#41;:
        print&amp;#40;&amp;quot;I am printing because I am True!&amp;quot;&amp;#41;

    if &amp;#40;False&amp;#41;:
        print&amp;#40;&amp;quot;I am not going to print because I am False!&amp;quot;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; These are if statements. Just testing for if the condition which is in parantheses are TRUE. This is why the second if statement did not print in the result and only the one TRUE did. The basic format for writing a if statement is starting with the if keyword in python which starts the if statement. Followed by the parantheses which you put the condition you are testing in this case it's already a Boolean. Followed by a : to end the line. Than you indent the expression you want if that condition is met to be evaluated underneath. &lt;br/&gt;&lt;br/&gt; Line 9-17:&lt;pre&gt;&lt;code&gt;    age = 19

    if &amp;#40;age &amp;gt; 10&amp;#41;:
        print&amp;#40;&amp;quot;I am older than 10 years.&amp;quot;&amp;#41;

    if &amp;#40;age &amp;gt; 20&amp;#41;:
        print&amp;#40;&amp;quot;I am older than 20 years.&amp;quot;&amp;#41;
    else:
        print&amp;#40;&amp;quot;I am younger than 20 years.&amp;quot;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; On line 10 we have our age as a variable set to 19. On line 11 we have a if statement checking if our age is greater than 10. It is so it prints. Line 14 we have a if-else statement which is similiar to an if statement expect it has a default value if none of the conditions hold true. In this cause age is not greater than 20 and so it prints what is under the else statement. The else: will come after the if when writing if-else statements. Else does not take any conditions if you do it would be an error. &lt;br/&gt;&lt;br/&gt; Line 19-28:&lt;pre&gt;&lt;code&gt;    grade = 81

    if &amp;#40;grade &amp;gt; 90&amp;#41;:
        print&amp;#40;&amp;quot;I got over 90.&amp;quot;&amp;#41;
    elif &amp;#40;grade &amp;gt; 80&amp;#41;:
        print&amp;#40;&amp;quot;I got over 80&amp;quot;&amp;#41;
    elif &amp;#40;grade &amp;gt; 70&amp;#41;:
        print&amp;#40;&amp;quot;I got over 70.&amp;quot;&amp;#41;
    else:
        print&amp;#40;&amp;quot;I got under 70.&amp;quot;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; What if you wanted to test for multiple conditions? Well then you write a if-elif-else condition. Elif works in a similar way that if does that it takes a condition. However it elif follows after a if statement. One thing to notice is that none of the other prints under the elif (grade &gt; 80) are even printed or even checked for. Once one of the conditions are met to be true thats it it leaves the if statement and directly into the body of the elif and does whatever is in the body. &lt;br/&gt;&lt;br/&gt; Line 30-35:&lt;pre&gt;&lt;code&gt;    if &amp;#40;grade &amp;gt; 90 and age &amp;gt; 20&amp;#41;:
        print&amp;#40;&amp;quot;I got over a 90 and I am over 20 years old.&amp;quot;&amp;#41;
    elif &amp;#40;grade &amp;gt; 70 and age &amp;gt; 20&amp;#41;:
        print&amp;#40;&amp;quot;I got over a 70 and am over 20 years old.&amp;quot;&amp;#41;
    else:
        print&amp;#40;&amp;quot;I got a&amp;quot;, grade, &amp;quot;and am over&amp;quot;, age, &amp;quot;years old.&amp;quot;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; In this if-elif-else statement we are using and to test that both of the conditions are met so the first one is False and False which if you remember using and if one of them is False the entire condition is evaluated as False. So the if part of the statement is not met. Then the elif statement is True and False since the grade is higher than 70 but the age is not again this is evaluated as False and the elif part is not met. Thus it defaults to the else statement. &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Wrapping up: &lt;br/&gt;&lt;br/&gt; So we learned if statements, if-else statements and if-elif-else-statements. One thing I did leave out here is nested if-else and if-elif-else statements which are a bit more tricky but basically the same principle. One thing to keep in mind is that using if-statements you want to be careful what conditions you are checking since when the first condition is found that holds true that condition's body will be evaluated and nothing else will even be checked. If statements are widely used and are important tools to use in most programming languages as a part of decision making and making choices in programming. So making sure you understand them is critical.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 09 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/python-booleans/
</guid>
<link>
http://salmanhossain.me/posts/python-booleans/
</link>
<title>
Python - Booleans
</title>
<description>
&lt;p&gt;A boolean is either True or False. In python 0 evaluates to False. While every other number is True. Boolean is also a data type which is used to do logical conditions. Such as is 2 greater than 5? Thus returns the boolean False.  &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/booleans.png&quot; alt=&quot;booleans&quot; /&gt; &lt;br/&gt;&lt;br/&gt; Note that the double equal sign is not the same as a single equal sign. This is a common mistake rather when using the == it tests for equality if or not the two things being compared are equal. If they are it returns true otherwise false. &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Open up a python file you can call it pybooleans.py and type out the following.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;def main&amp;#40;&amp;#41;:

    print&amp;#40;&amp;quot;Is 2 less than 5?: &amp;quot;, &amp;#40;2 &amp;lt; 5&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;Is 2 greater than 5?:&amp;quot;, &amp;#40;2 &amp;gt; 5&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;Is 2 equal than 5?: &amp;quot;, &amp;#40;2 == 5&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;Is 3 greater than or equal to 3?: &amp;quot;, &amp;#40;3 &amp;gt;= 3&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;Is 5 less than or equal to 1?: &amp;quot;, &amp;#40;5 &amp;gt;= 1&amp;#41;&amp;#41;

    print&amp;#40;&amp;quot;Is True equal to True?: &amp;quot;, &amp;#40;True == True&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;Is True equal to False?: &amp;quot;, &amp;#40;True == False&amp;#41;&amp;#41;

    print&amp;#40;&amp;quot;What is the value of True or True?: &amp;quot;, &amp;#40;True or True&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;What is the value of True or False?: &amp;quot;, &amp;#40;True or False&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;What is the value of False or False?: &amp;quot;, &amp;#40;False or False&amp;#41;&amp;#41;

    print&amp;#40;&amp;quot;What is the value of False and False?: &amp;quot;, &amp;#40;False and False&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;What is the value of False and True?: &amp;quot;, &amp;#40;False and True&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;What is the value of True and True?: &amp;quot;, &amp;#40;True and True&amp;#41;&amp;#41;

    print&amp;#40;&amp;quot;What is the value of not True and True?: &amp;quot;, &amp;#40;not True and True&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;What is the value of not True or True?: &amp;quot;, &amp;#40;not True or True&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;What is the value of not True or not True?: &amp;quot;, &amp;#40;not True or not True&amp;#41;&amp;#41;

    print&amp;#40;&amp;quot;What is the value of True and 0?: &amp;quot;, &amp;#40;True and 0&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;What is the value of 1 and 0?: &amp;quot;, &amp;#40;1 and 0&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;What is the value of 1 or 0?: &amp;quot;, &amp;#40;1 or 0&amp;#41;&amp;#41;

main&amp;#40;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;&lt;p&gt;Result:&lt;pre&gt;&lt;code&gt;Is 2 less than 5?:  True
Is 2 greater than 5?: False
Is 2 equal than 5?:  False
Is 3 greater than or equal to 3?:  True
Is 5 less than or equal to 1?:  True
Is True equal to True?:  True
Is True equal to False?:  False
What is the value of True or True?:  True
What is the value of True or False?:  True
What is the value of False or False?:  False
What is the value of False and False?:  False
What is the value of False and True?:  False
What is the value of True and True?:  True
What is the value of not True and True?:  False
What is the value of not True or True?:  True
What is the value of not True or not True?:  False
What is the value of True or 0?:  0
What is the value of 1 and 0?:  0
What is the value of 1 or 0?:  1
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Explanation below:&lt;/p&gt;&lt;p&gt;Line 1:&lt;pre&gt;&lt;code&gt;def main&amp;#40;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Always start with this creating our main function. &lt;br/&gt;&lt;br/&gt; Line 3-7:&lt;pre&gt;&lt;code&gt;    print&amp;#40;&amp;quot;Is 2 less than 5?: &amp;quot;, &amp;#40;2 &amp;lt; 5&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;Is 2 greater than 5?:&amp;quot;, &amp;#40;2 &amp;gt; 5&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;Is 2 equal than 5?: &amp;quot;, &amp;#40;2 == 5&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;Is 3 greater than or equal to 3?: &amp;quot;, &amp;#40;3 &amp;gt;= 3&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;Is 5 less than or equal to 1?: &amp;quot;, &amp;#40;5 &amp;gt;= 1&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Using the the operators to test for true or false. In line 5 it tests if 2 and 5 are equal since they are not it returns false. If you did 5 == 5 than it would've returned true.  &lt;br/&gt;&lt;br/&gt; Line 9-10:&lt;pre&gt;&lt;code&gt;    print&amp;#40;&amp;quot;Is True equal to True?: &amp;quot;, &amp;#40;True == True&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;Is True equal to False?: &amp;quot;, &amp;#40;True == False&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; You can also test if booleans are equal to each other in the following way using == to do a comparison test between the two booleans. &lt;br/&gt;&lt;br/&gt; Line 12-14:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;    print&amp;#40;&amp;quot;What is the value of True or True?: &amp;quot;, &amp;#40;True or True&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;What is the value of True or False?: &amp;quot;, &amp;#40;True or False&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;What is the value of False or False?: &amp;quot;, &amp;#40;False or False&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Using &quot;or&quot; you are testing if one of the booleans is true. If at least one of the booleans is true than it'll return true but if both are false than it'll return false. Also if both are true than you will get true as well. &lt;br/&gt;&lt;br/&gt; Line 16-18:&lt;pre&gt;&lt;code&gt;    print&amp;#40;&amp;quot;What is the value of False and False?: &amp;quot;, &amp;#40;False and False&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;What is the value of False and True?: &amp;quot;, &amp;#40;False and True&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;What is the value of True and True?: &amp;quot;, &amp;#40;True and True&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Using &quot;and&quot; you are testing if both of the booleans are true. If both are true than you will get true however if either one is false you'll get false. As well as both being false you will get false. &lt;br/&gt;&lt;br/&gt; Line 20-22:&lt;pre&gt;&lt;code&gt;    print&amp;#40;&amp;quot;What is the value of not True and True?: &amp;quot;, &amp;#40;not True and True&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;What is the value of not True or True?: &amp;quot;, &amp;#40;not True or True&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;What is the value of not True or not True?: &amp;quot;, &amp;#40;not True or not True&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Using not you are reversing the boolean. So not True is False and vise versa not False is True. &lt;br/&gt;&lt;br/&gt; Line 24-26:&lt;pre&gt;&lt;code&gt;   print&amp;#40;&amp;quot;What is the value of True or 0?: &amp;quot;, &amp;#40;True and 0&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;What is the value of 1 and 0?: &amp;quot;, &amp;#40;1 and 0&amp;#41;&amp;#41;
    print&amp;#40;&amp;quot;What is the value of 1 or 0?: &amp;quot;, &amp;#40;1 or 0&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; You'll notice in this section we are using 0's and 1's. 1 and any other number will evaluate as True. The only expection is 0 which evaluates to False. So line 24 returns 0 because 0 is evaluated to False and hence returns the 0. But in line 26 you see the 1 being returned because or is being used and so if one of them is evaluated to true and it'll be true and thus returning the 1. &lt;br/&gt;&lt;br/&gt; Line 28:&lt;pre&gt;&lt;code&gt;main&amp;#40;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Finally we call the function main. Nothing new here. &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 08 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/pythonvariables/
</guid>
<link>
http://salmanhossain.me/posts/pythonvariables/
</link>
<title>
Python - Variables
</title>
<description>
 &lt;p&gt;Now we'll actually be using a text editor and no longer the python interpreter. However you should periodically use the python interpreter which is a good way to learn.  &lt;br/&gt;&lt;br/&gt; To write python code you need to create a file with the .py extension this will tell your computer that you are writing python code. There is a way to get around this but for now it isn't really necessarily to do that but know that there is. For now just create a file called &quot;pyvariables.py&quot; in your favorite text editor. &lt;br/&gt;&lt;br/&gt; Type out the following code into the file. Actually type it out to get that muscle memory into your fingers instead of pasting it onto your text editor and type out the entire code and I'll explain it through one line at a time. &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import math

def main&amp;#40;&amp;#41;:

    circumference&amp;#95;of&amp;#95;earth&amp;#95;in&amp;#95;km = 40000
    time&amp;#95;for&amp;#95;one&amp;#95;rotation&amp;#95;in&amp;#95;hours = 24
    minutes&amp;#95;in&amp;#95;hour = 60
    seconds&amp;#95;in&amp;#95;minute = 60

    radius&amp;#95;of&amp;#95;earth = circumference&amp;#95;of&amp;#95;earth&amp;#95;in&amp;#95;km / &amp;#40;2 &amp;#42; math.pi&amp;#41;

    print&amp;#40;&amp;quot;Radius of Earth:&amp;quot;, radius&amp;#95;of&amp;#95;earth , &amp;quot; km&amp;quot;&amp;#41;

    velocity&amp;#95;of&amp;#95;earths&amp;#95;rotation = &amp;#40;circumference&amp;#95;of&amp;#95;earth&amp;#95;in&amp;#95;km &amp;#42; 1000&amp;#41; / &amp;#40;time&amp;#95;for&amp;#95;one&amp;#95;rotation&amp;#95;in&amp;#95;hours &amp;#42; minutes&amp;#95;in&amp;#95;hour &amp;#42; seconds&amp;#95;in&amp;#95;minute&amp;#41;

    print&amp;#40;&amp;quot;Velocity:&amp;quot;, velocity&amp;#95;of&amp;#95;earths&amp;#95;rotation , &amp;quot;m/s&amp;quot;&amp;#41; 

    acceleration&amp;#95;of&amp;#95;earth = &amp;#40;velocity&amp;#95;of&amp;#95;earths&amp;#95;rotation &amp;#42;&amp;#42; 2&amp;#41; / &amp;#40;radius&amp;#95;of&amp;#95;earth &amp;#42; 1000&amp;#41;

    print&amp;#40;&amp;quot;Acceleration:&amp;quot;, acceleration&amp;#95;of&amp;#95;earth , &amp;quot;m/s&amp;#94;2&amp;quot;&amp;#41; 

main&amp;#40;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;p&gt;Now after you have done typing it out go ahead and open up a terminal and run the following command in the same directory that you have created the file in.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ python pyvariables.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Result:&lt;pre&gt;&lt;code&gt;Radius of Earth: 6366 km
Velocity: 462 m/s
Acceleration: 0.033528 m/s&amp;#94;2
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;If you get an error running it than make sure you have typed out everything exactly.&lt;/p&gt;&lt;p&gt;Below are the explanations: &lt;br/&gt;&lt;br/&gt; Line 1:&lt;pre&gt;&lt;code&gt;import math
 &lt;/code&gt;&lt;/pre&gt; In the first line we are importing functions from the math &quot;module&quot; which will allow us to use the math.pi which you seen in line 10. Without the import we would get an error. Right now you don't have to know too much about what modules are but know that Python has a very convinent way of bringing in other libraries to use in your code in this case you are able to use all the math functions without actually having to type in the functions into the code hence importing them. If you have coded in C++ than this is basically equivilant to #include where you are bringing in other libraries into your file. &lt;br/&gt;&lt;br/&gt; Line 3: &lt;pre&gt;&lt;code&gt;def main&amp;#40;&amp;#41;:
 &lt;/code&gt;&lt;/pre&gt; This is how you define a function in python. Every file has a main function which is where all the action happens. Main is the name of the function followed by parantheses which right now is empty but if our function took any arguments which we'll get to in a later in depth discussion about functions there would be variables inbetween the parantheses. For now just realize that this is the snytax for creating a function in python. Using def and than followed by the name of the function and parantheses finally double colon.  &lt;br/&gt;&lt;br/&gt; Also take note that everything in the main function is indented expect the final line which is not in the function. &lt;br/&gt;&lt;br/&gt; Line 5-8:&lt;pre&gt;&lt;code&gt;    circumference&amp;#95;of&amp;#95;earth&amp;#95;in&amp;#95;km = 40000
    time&amp;#95;for&amp;#95;one&amp;#95;rotation&amp;#95;in&amp;#95;hours = 24
    minutes&amp;#95;in&amp;#95;hour = 60
    seconds&amp;#95;in&amp;#95;minute = 60
 &lt;/code&gt;&lt;/pre&gt; So we have 4 variables listed above. Variables in python have specific naming conventions such as variables can not contain dashes, numbers or special characters in them and must be lowercase and if you need to use multiple words in a variable it is customary to use an underscore. Followed by the variable name is an equal sign which is the assignment operator in Python. It is assigning the number 40000 to the variable circumference of the earth variable and binding the number to it. We see that we have four variables recieving assignment. &lt;br/&gt;&lt;br/&gt; Line 10:&lt;pre&gt;&lt;code&gt;radius&amp;#95;of&amp;#95;earth = circumference&amp;#95;of&amp;#95;earth&amp;#95;in&amp;#95;km / &amp;#40;2 &amp;#42; math.pi&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; So we have another variable the radius of the earth which is being assigned whatever the result of circumference of the earth divided by (2 * math.pi). The math.pi is the value of pi and is imported from the math library from line 1. So we can do math with variables and set it to another variable. &lt;br/&gt;&lt;br/&gt; Line 12:&lt;pre&gt;&lt;code&gt;print&amp;#40;&amp;quot;Radius of Earth:&amp;quot; , radius&amp;#95;of&amp;#95;earth , &amp;quot; km&amp;quot;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Then we have our good old friend print that will display the radius of the earth. Notice that instead of a number or string we are putting in a variable that contains a number. This is essentially the same thing as giving it a number as we did in previous exercises. &lt;br/&gt;&lt;br/&gt; Line 14:&lt;pre&gt;&lt;code&gt;velocity&amp;#95;of&amp;#95;earths&amp;#95;rotation = &amp;#40;circumference&amp;#95;of&amp;#95;earth&amp;#95;in&amp;#95;km &amp;#42; 1000&amp;#41; / &amp;#40;time&amp;#95;for&amp;#95;one&amp;#95;rotation&amp;#95;in&amp;#95;hours &amp;#42; minutes&amp;#95;in&amp;#95;hour &amp;#42; seconds&amp;#95;in&amp;#95;minute&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Calculating the velocity of the earth by converting the circumference into meters and the rotation of the earth into seconds so that you can get a velocity in terms of meters per second. Notice that instead of typing out the conversation which we could do we are using the variables we have already set. &lt;br/&gt;&lt;br/&gt; Line 16:&lt;pre&gt;&lt;code&gt;print&amp;#40;&amp;quot;Velocity:&amp;quot;, velocity&amp;#95;of&amp;#95;earths&amp;#95;rotation , &amp;quot; m/s&amp;quot;&amp;#41; 
 &lt;/code&gt;&lt;/pre&gt; Prints the velocity of the earth's rotation for us. &lt;br/&gt;&lt;br/&gt; Line 18:&lt;pre&gt;&lt;code&gt;acceleration&amp;#95;of&amp;#95;earth = &amp;#40;velocity&amp;#95;of&amp;#95;earths&amp;#95;rotation &amp;#42;&amp;#42; 2&amp;#41; / &amp;#40;radius&amp;#95;of&amp;#95;earth &amp;#42; 1000&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Sets the acceleration of the earth using the a = (v&lt;sup&gt;2)/r.&lt;/sup&gt; Nothing we haven't seen. ** to raise the value of the velocity of the earth to the second power. &lt;br/&gt;&lt;br/&gt; Line 20:&lt;pre&gt;&lt;code&gt;print&amp;#40;&amp;quot;Acceleration:&amp;quot;,  acceleration&amp;#95;of&amp;#95;earth, &amp;quot;m/s&amp;#94;2&amp;quot;&amp;#41; 
 &lt;/code&gt;&lt;/pre&gt; Nothing new. Prints the acceleration. &lt;br/&gt;&lt;br/&gt; Line 22:&lt;pre&gt;&lt;code&gt;main&amp;#40;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Notice that this is the name of the function and is outside of the function. This basically calls the function main. If you removed this last line and ran it nothing would happen because you didn't call it. &lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Fri, 07 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/python2/
</guid>
<link>
http://salmanhossain.me/posts/python2/
</link>
<title>
Python - Numbers
</title>
<description>
&lt;p&gt;We'll learn about different numbers and doing math in python. So open up a python interpreter if you forgot how to just look at the previous post.  &lt;br/&gt;&lt;br/&gt; Just like before try out each line one by one into the python interpreter.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;5 + 2

5 - 2

5 &amp;#42; 2

5 / 2

5 % 2

5 &amp;#42;&amp;#42; 3

5 &amp;#42;&amp;#42; &amp;#40;1/2&amp;#41;

5 &amp;#42;&amp;#42; &amp;#40;1/2.0&amp;#41;

float&amp;#40;2&amp;#41;

float&amp;#40;5/2&amp;#41;

float&amp;#40;5&amp;#41; / 2

5 / float&amp;#40;2&amp;#41;

5 / 2.0

5 - 2 &amp;#42; 5

&amp;#40;5 - 2&amp;#41; &amp;#42; 5
&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;&lt;p&gt;Explanations below:&lt;/p&gt;&lt;p&gt;Line 1-7:&lt;pre&gt;&lt;code&gt;5 + 2

5 - 2

5 &amp;#42; 2

5 / 2
 &lt;/code&gt;&lt;/pre&gt; Basic math that you should've learned in school. Nothing interesting per say. Expect you may notice that the 5/2 gives you 2 which is odd but I'll explain that in the explanation on line 13 and 15. &lt;br/&gt;&lt;br/&gt; Line 9:&lt;pre&gt;&lt;code&gt;5 % 2
 &lt;/code&gt;&lt;/pre&gt; Ah we see the % symbol once again but this time it is not in a string. It is used as an operator just like +, -, *, or /. However this time it is not a string formator in this context and is called a modulo and returns the reminder of the division of 5 / 2. Which is what you get 1. This may be a little weird having not experienced such an operator before but it is quite useful for determining the divisbility of a number and etc. &lt;br/&gt;&lt;br/&gt; Line 11: &lt;pre&gt;&lt;code&gt;5 &amp;#42;&amp;#42; 3
 &lt;/code&gt;&lt;/pre&gt; Using ** is how you raise an integer to an exponent. In this cause you are raising 5 to the third power. &lt;br/&gt;&lt;br/&gt; Line 13:&lt;pre&gt;&lt;code&gt;5 &amp;#42;&amp;#42; &amp;#40;1/2&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Huh. Why did I get 1? That doesnt make sense. This is because the result of doing 1/2 is 0. So you are essentially doing 5 raised to the 0 power which is of course anything raised to the 0 power is 1. But why did 1/2 get evaluated to 0 and not 0.5? I'll talk about that in the explanation for line 15 in more depth. &lt;br/&gt;&lt;br/&gt; Line 15:&lt;pre&gt;&lt;code&gt;5 &amp;#42;&amp;#42; &amp;#40;1/2.0&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; This time the result is 2.23 which is the result I was hoping. So what gives by just adding a decimal point to the 2? Yes. Since you made 2 into a float there are more decimal points in the calculation so that 1/2.0 is evaluated to 0.5 however when doing 1/2 you don't have the significant figures and thus rounded down to 0. So when doing calculations involving precision use floats. &lt;br/&gt;&lt;br/&gt; Line 17:&lt;pre&gt;&lt;code&gt;float&amp;#40;2&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Converts the integer 2 into a float 2.0 without actually adding to the decimal point yourself. &lt;br/&gt;&lt;br/&gt; Line 19:&lt;pre&gt;&lt;code&gt;float&amp;#40;5/2&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; This gives 2.0 which makes sense because 5 / 2 is 2 and than the 2 is converted to 2.0 as a float. &lt;br/&gt;&lt;br/&gt; Line 21:&lt;pre&gt;&lt;code&gt;float&amp;#40;5&amp;#41; / 2
 &lt;/code&gt;&lt;/pre&gt; The 5 is turned into a float so it is 5.0 and than 5.0 / 2 will give you 2.5 which is what we expect. &lt;br/&gt;&lt;br/&gt; Line 23:&lt;pre&gt;&lt;code&gt;5 / float&amp;#40;2&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Showing you that it can be done with the other digit and that only one has to be a float in order for the extra decimal point to appear in the final result. &lt;br/&gt;&lt;br/&gt; Line 25:&lt;pre&gt;&lt;code&gt;5 / 2.0
 &lt;/code&gt;&lt;/pre&gt; This is equivilant to that of line 23. &lt;br/&gt;&lt;br/&gt; Line 27:&lt;pre&gt;&lt;code&gt;5 - 2 &amp;#42; 5
 &lt;/code&gt;&lt;/pre&gt; The order of operations in python is done by PEMDAS. Thus multiplication is done first so 2 * 5 is 10 and than 5 - 10 is -5. Which is what you get. Line 29:&lt;pre&gt;&lt;code&gt;&amp;#40;5 - 2&amp;#41; &amp;#42; 5
 &lt;/code&gt;&lt;/pre&gt; This time we had parantheses around 5 - 2 so that is the first thing done in the oder of operations. So 5 - 2 gives us 3 and than 3 * 5 is 15.  &lt;br/&gt;&lt;br/&gt; &lt;/p&gt;&lt;p&gt;For those wanting all the numeric types and learn more about them here is a table from python's &lt;a href='https://docs.python.org/2.4/lib/typesnumeric.html'&gt;documentation&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://defunsm.github.io/img/numerictypes.png&quot; alt=&quot;numerictypes&quot; /&gt;&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 06 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/pythonpart1/
</guid>
<link>
http://salmanhossain.me/posts/pythonpart1/
</link>
<title>
Python - Printing
</title>
<description>
&lt;p&gt;Open up the python interpreter on your command line by the following...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ python3
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Type the following one by one into the python interpreter. I'll explain each line one by one later but try to figure out what the result of each line is before typing it out and hitting enter.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;print&amp;#40;&amp;quot;A string&amp;quot;&amp;#41;

print&amp;#40;'This is a string too'&amp;#41;

print&amp;#40;&amp;quot;stuff&amp;quot; + &amp;quot;and more stuff&amp;quot;&amp;#41;

print&amp;#40;&amp;quot;The char:&amp;quot;, 'a'&amp;#41;

print&amp;#40;&amp;quot;The string: &amp;quot;, &amp;quot;stuff&amp;quot;&amp;#41;

print&amp;#40;&amp;quot;The digit&amp;quot;, 5&amp;#41;

print&amp;#40;&amp;quot;The float &amp;quot;, 4.0&amp;#41;

print&amp;#40;&amp;quot;Printing multiple stuff:&amp;quot;, 'a', &amp;quot;stuff&amp;quot;, 5, 4.0&amp;#41;&amp;#41;

print&amp;#40;&amp;quot;First Line \nSecond Line&amp;quot;&amp;#41;

print&amp;#40;&amp;quot;\tI am a tabbed Line.&amp;quot;&amp;#41;

# print&amp;#40;&amp;quot;I am a comment so I won't print. :&amp;#40;&amp;quot;&amp;#41;

print&amp;#40;&amp;quot;&amp;quot;&amp;quot;
This is a bit weird.
But acts as if I added newlines.
&amp;quot;&amp;quot;&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;The explanations are below make sure you ran all of them before checking the explanations.&lt;pre&gt;&lt;code&gt;python3 ex1.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Explanations:&lt;/p&gt;&lt;p&gt;Line 1:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;print&amp;#40;&amp;quot;A string&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Using the print function you display &quot;A string&quot; which is a string to the console. You have to include the quotations otherwise it'll be treated as a variable which you'll learn later.&lt;br/&gt;&lt;br/&gt;Line 3:&lt;pre&gt;&lt;code&gt;print&amp;#40;'This is a string too'&amp;#41;
&lt;/code&gt;&lt;/pre&gt;This is also a string but using single quotes you can use either whatever you prefer. &lt;br/&gt;&lt;br/&gt;Line 5:&lt;pre&gt;&lt;code&gt;print&amp;#40;&amp;quot;stuff&amp;quot; + &amp;quot;and more stuff&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;What you are doing here is called concatenation which is a fancy word for joining strings together. You are doing this by using the + symbol adding the two strings to form one string and displaying it onto the console.&lt;br/&gt;&lt;br/&gt;Line 7:&lt;pre&gt;&lt;code&gt;print&amp;#40;&amp;quot;The char&amp;quot;, 'a'&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Using the , symbol is the format symbol in python which allows you to insert the character 'a' into the string. Also notice that is followed by the leter 'c' indicating that it is expecting a character.&lt;br /&gt;&lt;br/&gt;You are printing a single character NOT a string. A string contains many characters but a character is a single letter. Notice that I used single quotes for this which if you come from c++ you may know that characters are in single quotes. However in Python you don't have to use single quotes on characters you could use double quotes and this line of code would have worked just fine.&lt;br/&gt;&lt;br/&gt;Line 9:&lt;pre&gt;&lt;code&gt;print&amp;#40;&amp;quot;The string&amp;quot;, &amp;quot;stuff&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;This time you are using the string formator symbol but expecting a string.&lt;br/&gt;&lt;br/&gt;Line 11:&lt;pre&gt;&lt;code&gt;print&amp;#40;&amp;quot;The digit&amp;quot;, 5&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Formating a digit instead of a string or character.&lt;br/&gt;&lt;br/&gt;Line 13:&lt;pre&gt;&lt;code&gt;print&amp;#40;&amp;quot;The float&amp;quot;, 4.0&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Formatting a float. A float having digits after the decimal place.&lt;br/&gt;&lt;br/&gt;Line 15:&lt;pre&gt;&lt;code&gt;print&amp;#40;&amp;quot;Printing multiple stuff:&amp;quot;, 'a', &amp;quot;stuff&amp;quot;, 5, 4.0&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Now you are using multiple commas to print out a character, string, integer and a float.&lt;br/&gt;&lt;br/&gt;Line 17:&lt;pre&gt;&lt;code&gt;print&amp;#40;&amp;quot;First Line \nSecond Line&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;The &quot;\n&quot; is an escape character and creates a new line thus showing you the string on two different lines on the console. There are many escape characters and if you want to see all of them you can see them in the &lt;a href='https://docs.python.org/2.0/ref/strings.html'&gt;python documentation&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;&lt;img src=&quot;https://defunsm.github.io/img/escapes.png&quot; alt=&quot;escapes&quot; /&gt;&lt;br/&gt;&lt;br/&gt;Line 19:&lt;pre&gt;&lt;code&gt;print&amp;#40;&amp;quot;\tI am a tabbed Line.&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;\t creates a tab and displays it onto the console.&lt;br/&gt;&lt;br/&gt;Line 21:&lt;pre&gt;&lt;code&gt;# print&amp;#40;&amp;quot;I am a comment so I won't print. :&amp;#40;&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;This is a comment so it won't show up. This is how you write notes in your program without it being interpreted as code.&lt;br/&gt;&lt;br/&gt;Line 23-26:&lt;pre&gt;&lt;code&gt;print&amp;#40;&amp;quot;&amp;quot;&amp;quot;
This is a bit weird.
But acts as if I added newlines.
&amp;quot;&amp;quot;&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Displays on two lines without the use of a \n escape character. Kinda weird but works.&lt;br/&gt;&lt;br/&gt;Thats it for now. Finally to quit the python interpreter type the following ...&lt;pre&gt;&lt;code&gt;exit&amp;#40;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 05 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/pythonpart0/
</guid>
<link>
http://salmanhossain.me/posts/pythonpart0/
</link>
<title>
Python - Setup
</title>
<description>
&lt;p&gt;Python is usally shipped with Linux but you can check if you have it from the command line. &lt;br/&gt;  To check you can type the following into the command line... &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ python3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If there is an error than you'll have to install it. If you aren't so familiar with the terminal thats okay you don't have to be an expert just know basics. You can quickly read up on some basic terminal commands &lt;a href='https://defunsm.github.io/posts-output/terminalshell/'&gt;here&lt;/a&gt;. &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;If you don't yet have a prefered text editor and want to get to writing python code right away I suggest &lt;a href='http://www.jetbrains.com/pycharm/'&gt;pycharm&lt;/a&gt;. It is a really nice IDE specifically geared for python. Overtime though I suggest trying out other text editors such as Vim, Emacs, Sublime, or Atom.  &lt;br/&gt;&lt;br/&gt; However for the purposes of this pretty much any text editor will work as long as it can run python code. &lt;br/&gt;&lt;br/&gt; &lt;center&gt;&lt;i class=&quot;fa fa-exclamation-circle fa-2x&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/center&gt;&lt;/p&gt;&lt;p&gt;A bit of warning I suggest downloading the 3.x.x version of python just so there is no hiccups as you're following along with the guides I write. &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/pythondownloadimg.png&quot; alt=&quot;image&quot; /&gt; &lt;br&gt;&lt;/br&gt; You can download python from &lt;a href='https://www.python.org/downloads/'&gt;here&lt;/a&gt; if it was not found in your system.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 04 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/introductiontopython/
</guid>
<link>
http://salmanhossain.me/posts/introductiontopython/
</link>
<title>
Python - A short introduction
</title>
<description>
&lt;p&gt;Python is an &lt;em&gt;object oriented&lt;/em&gt; programming language. It is general purpose and was created and designed with &lt;i&gt;code readability&lt;/i&gt; in mind. It is extremely user friendly for this reason being that programmers can write a few lines of code to get things running with almost no bugs at all. Specially if you come from a programming language such as C++ or Java you'll definitely appreciate the &lt;i&gt;elegance&lt;/i&gt; of what python has to offer.  &lt;br/&gt;&lt;br/&gt; You'll often hear that python is idiomatic. That in python you should strive to write pythonic code. This means that code written in python are succinct and that very few lines of code are written to express an idea unlike some other languages. In some ways python syntax is much more 'beautiful' than say C++ which many people find to be disgusting in comparsion to python. Consider the following example as Python code. &lt;br/&gt;&lt;/br&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;print&amp;#40;&amp;quot;Hello, World!&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And now a look at C++ that does the same thing.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
 
int main&amp;#40;&amp;#41;
{
  std::cout &amp;lt;&amp;lt; &amp;quot;Hello, World!&amp;quot; &amp;lt;&amp;lt; std::endl;
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Python is particularly a popular language in the current time specially a langauage to look into. Considering all the machine langauge and deep neutral network hype that has been going around in the coding community. &lt;a href='https://www.tensorflow.org/'&gt;TensorFlow&lt;/a&gt; is probably a useful library you may want to look up later on once you get familiar with things. Another one is &lt;a href='http://www.numpy.org/'&gt;NumPy&lt;/a&gt; useful for scientific purposes. &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;If I could sum it up with a meme it would be like this. &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://defunsm.github.io/img/pythonmeme.jpeg&quot; alt=&quot;pythonmeme&quot; /&gt;  &lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 03 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/wordcal/
</guid>
<link>
http://salmanhossain.me/posts/wordcal/
</link>
<title>
WordCal - A Python Script
</title>
<description>
&lt;p&gt;&lt;h2&gt;What is the WordCal Python Script?&lt;/h2&gt; It is a python script which counts the number of times a particular character appears in a file. As shown by the below image the script provides the percentage that a character appears. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://defunsm.github.io/img/wordcal2.png&quot; alt=&quot;WordCal Python Script Analyzer&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;h3&gt;How to use the WordCal Script?&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;Using the wordcal script is relatively simple. &lt;br /&gt;&lt;br /&gt; 1) Install the &lt;a href=&quot;https://github.com/defunSM/wordcal&quot; target=&quot;_blank&quot;&gt;wordcal.py&lt;/a&gt; file from GitHub.&lt;/p&gt;&lt;p&gt;2) Enter your favorite terminal.&lt;/p&gt;&lt;p&gt;3) Enter the following...&lt;/p&gt;&lt;p&gt;&lt;code&gt;$ python wordcal.py&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;This should lead you to the following prompt...&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://defunsm.github.io/img/wordcal1.png&quot; alt=&quot;WordCal Python Script&quot; /&gt;&lt;/p&gt;&lt;p&gt;Once prompted you are given two options at the start. The two options are as follows...&lt;/p&gt;&lt;p&gt;1) Analyze a file&lt;/p&gt;&lt;p&gt;2) Quit Program &lt;br /&gt;&lt;br /&gt; To select an option enter 1 or 2.&lt;/p&gt;&lt;p&gt;Entering &lt;code&gt;1&lt;/code&gt; brings you to the next prompt asking for the filename.&lt;/p&gt;&lt;p&gt;Entering &lt;code&gt;2&lt;/code&gt; exits the program returning you to the terminal without doing anything.&lt;/p&gt;&lt;p&gt;After pressing &lt;code&gt;1&lt;/code&gt; enter the name of the file you want to analyze. &lt;/p&gt;&lt;p&gt;Enter the full file name including any extensions that the file may have.&lt;/p&gt;&lt;p&gt;For example if you wanted to use the script on a file called &quot;file.txt&quot; ... &lt;br /&gt;&lt;br /&gt; &lt;code&gt;&gt; file.txt&lt;/code&gt; &lt;br /&gt;&lt;br /&gt; &lt;h2&gt;How does the WordCal Python Script work?&lt;/h2&gt;&lt;/p&gt;&lt;p&gt;The script runs from the terminal and asks for a filename. Entering the filename will access the file and turn the contents of the file into an array. Several functions in the program will sort out the contents of the file. Eventually returning the amount of times a character appears and the percentage. &lt;br /&gt;&lt;br /&gt; &lt;h4&gt;Functions used in the script:&lt;/h4&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;convert&lt;i&gt;File&lt;/i&gt;to_Array(filename) &lt;/code&gt;&lt;/p&gt;&lt;p&gt;This function takes an open file in read mode and turns the contents into an array. Each line of the file is an element in the array.&lt;/p&gt;&lt;p&gt;For example if this was a text file called file.txt ...&lt;/p&gt;&lt;p&gt;&lt;code&gt;This is the first line This is the second line&lt;/code&gt; &lt;br /&gt;&lt;br /&gt; You can use &lt;code&gt;convert&lt;i&gt;File&lt;/i&gt;to_Array()&lt;/code&gt; to convert a file into an array by ...&lt;/p&gt;&lt;p&gt;&lt;code&gt;from wordcal import convert&lt;i&gt;File&lt;/i&gt;to_Array&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;filename = open('file.txt', 'r')&lt;/code&gt;  &lt;code&gt;myarray = convert&lt;i&gt;File&lt;/i&gt;to_Array(filename)&lt;/code&gt;   &lt;/p&gt;&lt;p&gt;&lt;code&gt;print(myarray) &lt;code&gt;filename.close()&lt;/code&gt;&lt;/code&gt; &lt;br /&gt;&lt;br /&gt; &lt;strong&gt;Note:&lt;/strong&gt; You can open the file in 'w+' mode as well since it doesn't trancuate the file. However opening in 'w' will produce an empty array since opening a file in 'w' in python will trancuate the file first and won't preserve the file. When importing do not add the .py extension or it won't import and make sure that the wordcal.p is within the same directory. &lt;br /&gt;&lt;br /&gt; Now running the new code would result in a output to the terminal as such ...&lt;/p&gt;&lt;p&gt;&lt;code&gt; ['This is the first line', 'This is the second line'] &lt;/code&gt;&lt;/p&gt;&lt;p&gt;Notice that this is the whole line which may be what your looking for. However if you want single characters you would have to use &lt;code&gt;sorting_algorithm()&lt;/code&gt;. &lt;br /&gt;&lt;br /&gt; What the &lt;code&gt;sorting_algorithm()&lt;/code&gt; function does is it adds an character from an element to an array. So all you would have to do is place myarray into the function and change the print argument so it prints the newarray ...&lt;/p&gt;&lt;p&gt;&lt;code&gt;from wordcal import convert&lt;i&gt;File&lt;/i&gt;to_Array&lt;/code&gt; &lt;code&gt;from wordcal import sorting_algorithm&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;filename = open('file.txt', 'r')&lt;/code&gt;  &lt;code&gt;myarray = convert&lt;i&gt;File&lt;/i&gt;to_Array(filename)&lt;/code&gt;  &lt;code&gt;newarray = sorting_algorithm(myarray)&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;print(newarray) &lt;code&gt;filename.close()&lt;/code&gt;&lt;/code&gt; &lt;br /&gt;&lt;br /&gt; &lt;strong&gt;Note:&lt;/strong&gt; You can do &lt;code&gt;from wordcal import *&lt;/code&gt; which will import all the functions.  However this is generally discouraged and is considered bad practice specially with larger modules that you may import. &lt;br /&gt;&lt;br /&gt; You should have gotten an array with a lot of elements such as the following ...&lt;/p&gt;&lt;p&gt;&lt;code&gt;['T', 'h', 'i', 's', ' ', 'i', 's', ' ', 't', 'h', 'e', ' ', 'f', 'i', 'r', 's', 't', ' ', 'l', 'i', 'n', 'e', 'T', 'h', 'i', 's', ' ', 'i', 's', ' ', 't', 'h', 'e', ' ', 's', 'e', 'c', 'o', 'n', 'd', ' ', 'l', 'i', 'n', 'e']&lt;/code&gt; &lt;br /&gt;&lt;br /&gt; Now we have each character in the array. We now make a dict using &lt;code&gt;noduplicate()&lt;/code&gt; passing the function the new array as an argument. Now we can use &lt;code&gt;noduplicate()&lt;/code&gt; to print the data of the noduparray returned by &lt;code&gt;noduplicate()&lt;/code&gt;. &lt;br /&gt;&lt;br /&gt; &lt;code&gt;from wordcal import convert&lt;i&gt;File&lt;/i&gt;to_Array from wordcal import sorting_algorithm from wordcal import noduplicate from wordcal import analyze_data&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;filename = open('file.txt', 'r') myarray = convert&lt;i&gt;File&lt;/i&gt;to_Array(filename) newarray = sorting_algorithm(myarray) noduparray = noduplicate(newarray)&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;analyze_data(noduparray)&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;filename.close()&lt;/code&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; That the &lt;code&gt;analyze_data()&lt;/code&gt; is not actually analyzing the data but really formating the data so that it is easy to read and prints.&lt;/p&gt;&lt;p&gt;That should produce sometime similar to the top image displaying the percentage of each character.&lt;/p&gt; 
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 02 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/partitioningandmounting/
</guid>
<link>
http://salmanhossain.me/posts/partitioningandmounting/
</link>
<title>
Partitoning and Mounting (Linux)
</title>
<description>
&lt;p&gt;&lt;h1&gt;Partitioning&lt;/h1&gt; &lt;br/&gt;&lt;br/&gt; Think of it as creating a room (partition) in a house (The actual harddrive) for where data can stay. &lt;br/&gt;&lt;br/&gt; &lt;h3&gt;Creating a Partition on Linux&lt;/h3&gt; &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/par1.png&quot; alt=&quot;partitioning&quot; /&gt; &lt;br/&gt;&lt;br/&gt; Typing &lt;code&gt;lsblk&lt;/code&gt; will show a quick result of your avaliable devices on your computer. &lt;br/&gt;&lt;br/&gt; It'll display two types disks and parts. &lt;br/&gt;&lt;br/&gt; A quick difference you can see between disks and parts is that disks don't have a number at the end. &lt;strong&gt;Note:&lt;/strong&gt; There are expections but for the most part USBs don't have numbers at the end. &lt;br/&gt;&lt;br/&gt; Parts on the other hand do have numbers that correspond with the disk it is in. Such as &lt;em&gt;sda1&lt;/em&gt; is within the disk sda and thus if there is a &lt;em&gt;sda5&lt;/em&gt; most likely there are four other partitions. &lt;br/&gt;&lt;br/&gt; &lt;h4&gt;Using a disk management program: Gparted&lt;/h4&gt; There are various disk management programs but &lt;em&gt;gparted&lt;/em&gt; is most common in linux. There is &lt;em&gt;fdisk&lt;/em&gt; and &lt;em&gt;parted&lt;/em&gt; but without a gui that can acomplish the same feats as gparted. &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/par2.png&quot; alt=&quot;gparted&quot; /&gt; &lt;br/&gt;&lt;br/&gt; Im going to be changing the &lt;em&gt;sdb&lt;/em&gt; disk so make sure to select that. &lt;strong&gt;Note:&lt;/strong&gt; All paths to devices avaliable on the computer start with /dev/... &lt;br/&gt;&lt;br/&gt; Now we already have one partition on the &lt;em&gt;sdb&lt;/em&gt; disk called &lt;em&gt;sdb1&lt;/em&gt;. If we did have more unallocated memory we could create another partition from the unallocated memory. However we don't so lets delete the partition &lt;em&gt;sdb1&lt;/em&gt; and create 2 partitions splitting the memory. &lt;br/&gt;&lt;br/&gt; Deleting the partition by right clicking on the partition you want deleted and selecting &quot;Delete&quot;. Now all of the partition memory is turned to unallocated as seen below. &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/par3.png&quot; alt=&quot;gparted unallocated&quot; /&gt; &lt;br/&gt;&lt;br/&gt; &lt;strong&gt;Note:&lt;/strong&gt; No changes actually occur till the green check mark is clicked. &lt;br/&gt;&lt;br/&gt; Now if you check your devices with &lt;code&gt;lsblk&lt;/code&gt; you'll notice that &lt;em&gt;sdb&lt;/em&gt; is all alone without &lt;em&gt;sdb1&lt;/em&gt; or any partitions. This is because all of sdb is unallocated memory at the moment. &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/par4.png&quot; alt=&quot;gparted nodisk&quot; /&gt; &lt;br/&gt;&lt;br/&gt; Now you can select the unallocated memory and create a partition with it. However since you want to make two partitions leave some memory left for the second one depending on how much you want. This is done by right clicking on the unallocated memory and clicking &quot;New&quot;. &lt;br/&gt;&lt;br/&gt; This should bring you to a menu such as this below ... &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/par5.png&quot; alt=&quot;gparted filesystem&quot; /&gt; &lt;br/&gt;&lt;br/&gt; If you want to make a 60 &lt;em&gt;GiB&lt;/em&gt; partition make the new size 60*1024 = 61440 &lt;em&gt;MiB&lt;/em&gt;. (1024 &lt;em&gt;MiB&lt;/em&gt; in 1 &lt;em&gt;GiB&lt;/em&gt;) Keep the everything else the same since ext4 is readiable by linux. &lt;br/&gt;&lt;br/&gt; Then click on the rest of the unallocated memory and click add to create the rest of the memory into a partition. If that went smoothly you should have two partitions now and you can verify this by &lt;code&gt;lsblk&lt;/code&gt;. &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/par6.png&quot; alt=&quot;gparted two partitions&quot; /&gt; &lt;br/&gt;&lt;br/&gt; The result is two partitions on the sdb disk detected by your computer. Thats it now you have two partitions. &lt;br/&gt;&lt;br/&gt; &lt;h3&gt;Mounting the Partitions / Placing files in the Partitions&lt;/h3&gt; &lt;br/&gt;&lt;br/&gt; &lt;strong&gt;Note:&lt;/strong&gt; If you aren't too familiar with using a terminal please read up on how to use a terminal. &lt;br/&gt;&lt;br/&gt; &lt;code&gt;mount&lt;/code&gt; is a command that will allow you to attach the filesystem (partition) to the computer. &lt;br/&gt;&lt;br/&gt; In this case we are going to mount the two partitions onto our computer. Begin by opening up your favorite terminal and entering the following command. Ignore the dollar sign it just stands for the prompt. &lt;br/&gt;&lt;br/&gt; &lt;code&gt;$ mount /dev/sdb1 /mnt&lt;/code&gt; - What this does is attach the first partition to the /mnt directory. &lt;br/&gt;&lt;br/&gt; You can check this by doing &lt;code&gt;lsblk&lt;/code&gt; &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/par7.png&quot; alt=&quot;gparted mount&quot; /&gt; &lt;br/&gt;&lt;br/&gt; As you can see the mount point of &lt;em&gt;sdb1&lt;/em&gt; is now /mnt &lt;br/&gt;&lt;br/&gt; You can now copy files into the /mnt directory using &lt;code&gt;cp&lt;/code&gt; or make files using &lt;code&gt;echo&lt;/code&gt; Whatever is placed into the /mnt directory will now be in the partition. &lt;br/&gt;&lt;br/&gt; Example: &lt;br/&gt;&lt;br/&gt; &lt;code&gt;$ echo &quot;hello&quot; &gt;&gt; /mnt/file.txt&lt;/code&gt; &lt;br/&gt;&lt;br/&gt; Now you should see a file called file.txt in the /mnt directory using &lt;code&gt;ls /mnt&lt;/code&gt; &lt;br/&gt;&lt;br/&gt; Using &lt;code&gt;umount&lt;/code&gt; you can remove a mount point from the partition unmounting it. &lt;br/&gt;&lt;br/&gt; Example: &lt;br/&gt;&lt;br/&gt; &lt;code&gt;$ umount /dev/sdb1&lt;/code&gt; - You can examine through &lt;code&gt;lsblk&lt;/code&gt;&lt;code&gt;ls /mnt&lt;/code&gt; that it is no longer there. &lt;br/&gt;&lt;br/&gt; You can mount using &lt;code&gt;mount /dev/sdb1 /mnt&lt;/code&gt; and again see that the file.txt is now back again which shows that the file indeed is in the partition.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 01 Oct 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/smchat/
</guid>
<link>
http://salmanhossain.me/posts/smchat/
</link>
<title>
SMChat
</title>
<description>
&lt;p&gt;&lt;center&gt;&lt;h3&gt;What is SMChat?&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;SMChat is a clojure coded graphical user interface (GUI) using the SeeSaw Library. &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/smchat1.jpeg&quot; alt=&quot;SeeSaw Clojure nrepl&quot; /&gt; &lt;br/&gt;&lt;br/&gt; &lt;h3&gt;What features does SMChat have?&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;SMChat is still largely unfinished and being worked on. &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Clearing Messages&lt;/li&gt;&lt;li&gt;Changing Prompt&lt;/li&gt;&lt;li&gt;Font Color&lt;/li&gt;&lt;li&gt;Theme&lt;/li&gt;&lt;li&gt;Login Feature&lt;br/&gt;&lt;br/&gt;&lt;img src=&quot;https://defunsm.github.io/img/smchat2.jpeg&quot; alt=&quot;clojure&quot; /&gt;&lt;br/&gt;&lt;br/&gt;&lt;h3&gt;What lies in the future for SMChat?&lt;/h3&gt;Tons of updates and features. &lt;br/&gt;&lt;br/&gt;&lt;/li&gt;&lt;li&gt;Implementing chatbots.&lt;/li&gt;&lt;li&gt;A clear registration.&lt;/li&gt;&lt;li&gt;Access to SMChat through a web browser.&lt;/li&gt;&lt;li&gt;Creating a SMChat version for Linux.&lt;/li&gt;&lt;li&gt;A ton more.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;br/&gt; &lt;h3&gt;Where can I go and download SMChat?&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;You can find SMChat for Windows &lt;a href='https://github.com/defunSM/smchat/releases'&gt;here&lt;/a&gt;.&lt;/center&gt;&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 27 Sep 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/haskellpart1-ghci/
</guid>
<link>
http://salmanhossain.me/posts/haskellpart1-ghci/
</link>
<title>
Haskell - Loading functions into GHCI (Part 1)
</title>
<description>
 &lt;p&gt;The way you identify a file to be haskell code is by adding a &lt;i&gt;.hs&lt;/i&gt; tag at the end of the file. So make a file called ex1.hs and open up a &lt;i&gt;ghci&lt;/i&gt;.  &lt;br/&gt;&lt;br/&gt; Before we go any further I want to distinguish when I am typing into the &lt;i&gt;ghci&lt;/i&gt; which will be identified with the &lt;code&gt;Prelude&gt;&lt;/code&gt; which means I am telling you to type into the &lt;i&gt;ghci&lt;/i&gt;. If there is a &lt;code&gt;$&lt;/code&gt; this means you are typing into your terminal. When there is no &lt;code&gt;Prelude&gt;&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; that means type into whatever text editor you happen to be using onto the ex1.hs file.  &lt;br/&gt;&lt;br/&gt; Making the ex1.hs using touch. Or however else you may prefer to make a file.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ touch ex1.hs 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Open up a ghci. I suggest you get a little familiar with the ghci since you will be spending a bit of time on it and to do that you can type &lt;code&gt;:?&lt;/code&gt; to view some options for the ghci.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ ghci 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that you have a ghci up and running lets write some code into ex1.hs and later we can load it into the ghci using :load ex1.hs and afterwards we can use :reload every time we edit ex1.hs. Now lets start with a pythagorean theorem to start off things. If you go back to your middle school and remember that a&lt;sup&gt;2&lt;/sup&gt; + b&lt;sup&gt;2&lt;/sup&gt; = c&lt;sup&gt;2&lt;/sup&gt; which is basically what we are going to be writing. In a lot of ways Haskell is very much just like math.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;{- ################################################
        ex1.hs
        defunSM, Sept 2016.
        Haskell Part 1
################################################## -}

pythagorean :: Float -&amp;gt; Float -&amp;gt; Float   {-- Notice that there are two arguments pythagorean is taking a and b. --}
pythagorean a b = sqrt &amp;#40;a &amp;#94; 2 + b &amp;#94; 2&amp;#41;  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The first line is identifying the type that pythagorean will recieve. In this case it'll recieve two Floats and the out put will be a Float. We do this since Haskell is statically typed and that the function can know before hand what to expect and doing this allows us to reuse our function later on. &lt;br/&gt;&lt;br/&gt; Also to have comments you can do curly brackets and a dash like so {- this is a comment -}.&lt;/p&gt;&lt;p&gt;So now we can load our function by heading to the ghci which hopefully you still have running if not you can just run ghci again in the same directory of your ex1.hs file and type in the following to load pythagorean into the ghci. Once you used &lt;code&gt;:load&lt;/code&gt; you can now just use &lt;code&gt;:reload&lt;/code&gt; and it'll just update the functions you have in your file.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Prelude&amp;gt; :load ex1.hs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should see Ok, Modules Loaded: Main. Meaning you're golden and no errors in your code. So now you can type the following to use pythagorean...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Prelude&amp;gt; pythagorean 3 4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now lets look at how to construct a factorial which is rather an easy one two liner in haskell.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;factorial :: Integer -&amp;gt; Integer
factorial n = if n &amp;gt; 0 then n &amp;#42; factorial &amp;#40;n-1&amp;#41; else 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;factorial takes one argument than than checks if it is greater than 0 and if it is than it does n * factorial (n-1) otherwise its 1. This takes advantage of recursion calling itself. Now you can reload the file into ghci using &lt;code&gt;:reload&lt;/code&gt;. &lt;/p&gt;&lt;pre&gt;&lt;code&gt;Prelude&amp;gt; :reload 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And use factorial 5 to check that it works.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Prelude&amp;gt; factorial 5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now lets look at how to use guards in Haskell which are like conditionals. Lets look at this example of identifying if a quadradic has real roots. If you remember the quadradic equation you might remember that the discriminant is used to determine if a quadradic has real roots. So by using conditions and checking if the discriminant is positive, 0 or negative. Positive being two real numbers, zero being one real number and negative being no real numbers and only imginary roots. a will be the cofficient to the square term, b being the cofficent to the first power and c is the constant.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;numberOfRoots :: Integer-&amp;gt; Integer-&amp;gt; Integer -&amp;gt; Int
numberOfRoots a b c
              | &amp;#40;b &amp;#94; 2 &amp;gt; 4 &amp;#42; b &amp;#42; c&amp;#41; = 2    
              | &amp;#40;b &amp;#94; 2 == 4 &amp;#42; b &amp;#42; c&amp;#41; = 1
              | &amp;#40;b &amp;#94; 2 &amp;lt; 4 &amp;#42; b &amp;#42; c&amp;#41; = 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice that to use guards each case is started on a new line with the | which is how you state each condition. Guards are very important in Haskell and can allow you to systemically go through and do different manipulations based on the arguments. However sometimes it isn't possible to account for all of the conditions so there in that case you can use otherwise. So you could have written the numberOfRoots function like this. You can check this works out actually in the &lt;i&gt;ghci&lt;/i&gt; by giving numberOfRoots three arguments.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;numberOfRoots :: Integer-&amp;gt; Integer-&amp;gt; Integer -&amp;gt; Int
numberOfRoots a b c
              | &amp;#40;b &amp;#94; 2 &amp;gt; 4 &amp;#42; b &amp;#42; c&amp;#41; = 2    
              | &amp;#40;b &amp;#94; 2 == 4 &amp;#42; b &amp;#42; c&amp;#41; = 1
              | otherwise = 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you may begin to comprend now Haskell allows you to do computational math rather well and probably help you do your math homework I know it has for me.&lt;/p&gt; 
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 26 Sep 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/intro-to-haskell/
</guid>
<link>
http://salmanhossain.me/posts/intro-to-haskell/
</link>
<title>
Haskell - Introduction
</title>
<description>
&lt;p&gt;&lt;a href='https://www.haskell.org/'&gt;Haskell&lt;/a&gt; is a purely functional programming language, statically typed, and lazy.  &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/haskellimg.png&quot; alt=&quot;nosideeffects&quot; /&gt; &lt;br/&gt;&lt;br/&gt; Purely Functional being every function in haskell is a function in a mathematical sense. Meaning there is no side effects and a function recieving an argument will always do the same thing. This is very different from object oriented programs which is all about mutating data. Since Haskell is a Pure functional programming language you can not mutate variables. &lt;br/&gt;&lt;br/&gt; GHC is the compiler behind the Haskell language. You'll be testing out most of your code on a repl called ghci. The GHC is actually one behind C in terms of the fastest compilers. &lt;br/&gt;&lt;br/&gt; If you haven't already take a look at their website and download the Haskell Platform which includes GHC, Cabal and some other tools along with a set of libraries &lt;a href='https://www.haskell.org/downloads'&gt;here&lt;/a&gt;. &lt;br/&gt;&lt;br/&gt; Haskell is often times known to be the elite functional programming language as it is designed with mathemathics in mind. Haskell is named after logician Haskell Curry and his books regarding logic. However that doesn't mean that you can only do math in Haskell.  &lt;br/&gt;&lt;br/&gt; It is said that learning Haskell will however improve programming skills in general and open a new way of seeing and viewing code. Code in Haskell is brief and since it is pure it is easy to reuse code in Haskell.  &lt;br/&gt;&lt;br/&gt; Like C Haskell is a strong static typed language but unlike C garbage collection is handled implictly so you dont have to worry about those lingering pointers. &lt;br/&gt;&lt;br/&gt; So after you have downloaded the Haskell platform. Go ahead open up the GHCI by the following...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;ghci
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And type ...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;putStrLn &amp;quot;My first line of code in Haskell!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You have written a line of code in Haskell!&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 25 Sep 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/Using_swingpart3/
</guid>
<link>
http://salmanhossain.me/posts/Using_swingpart3/
</link>
<title>
Graphics using Quil in Clojure (Part 3)
</title>
<description>
 &lt;p&gt;Since we done a few examples of Quil already. I would like to show how to utilize states and this demonstration is a lot more prettier than the previous ones. &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;To be written.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 24 Sep 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/basics-of-clojure5/
</guid>
<link>
http://salmanhossain.me/posts/basics-of-clojure5/
</link>
<title>
Basics of Clojure - Watching an Atom (Part 5)
</title>
<description>
&lt;p&gt;Watching an Atom is exactly what it sounds like. Adding a Watch on an Atom keeps track of your atom and monitors them and when a specific condition is met it will trigger some function and alert you to the change. &lt;br/&gt;&lt;br/&gt; Lets say we have our player that starts off with 100 health and when he reaches zero health we want to be notified that the game is over. The way we would go about this is first by creating an atom for the player. We already learned this in part 4.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def player &amp;#40;atom {:hp 100}&amp;#41;&amp;#41; ;; creates the player health at 100.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we need a function that will lower the health of the player. We'll call this player-damage.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn player-damage &amp;#91;val&amp;#93;
  &amp;#40;swap! player update-in &amp;#91;:hp&amp;#93; - val&amp;#41;&amp;#41; ;; lowers the health of the player.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that we have a way to lower the player's health we can now monitor the atom as we change the player's health. The new part where we create a watch for out atom. This is done by the add-watch function.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn watch-health &amp;#91;key watch old new&amp;#93;  ;; contains the old state and the new state.
  &amp;#40;let &amp;#91;hp &amp;#40;:hp new&amp;#41;&amp;#93;
      &amp;#40;if &amp;#40;= 0 hp&amp;#41;
    &amp;#40;println &amp;quot;You are now dead&amp;quot;&amp;#41;   ;; prints this if hp is equal to 0.
    &amp;#40;println &amp;quot;You are at&amp;quot; hp &amp;quot;health&amp;quot;&amp;#41;&amp;#41;&amp;#41;&amp;#41;   ;; prints this if not 0.
    
&amp;#40;add-watch player :health watch-health&amp;#41;  ;; watch-health is the function used to monitor the player health.    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can check if the atom is actually being watched.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;player-damage 50&amp;#41; ;; now if you call this you'll see the hp being printed and than the second time it'll be zero and it'll drop into the negative healths.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now the atom being monitored and we are notified when the health is dropped to 0. This can have all kinds of implementations that require watching a value drop or increase to a specific value and than a certain action being applied in this cause we only printed but we could do anything from programming things like automatically turning on an air conditioner if the temperature is a certain amount in the room or can watch for a specific time and alert you to something u have to do at that time. There is a wide varity of things that can be done with watch and is an extremely important feature.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 21 Sep 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/basics-of-clojurepart4/
</guid>
<link>
http://salmanhossain.me/posts/basics-of-clojurepart4/
</link>
<title>
Basics of Clojure - Atoms (Part 4)
</title>
<description>
&lt;p&gt;This is like the fun part where you can now begin to model databases using atoms. Atoms are used a whole lot in clojure and are particularly useful so make sure you know them well. Here I'm just going to provide a brief outline of what atoms can do without explaining what atoms are actually which is a whole another conversation. &lt;br/&gt;&lt;br/&gt; Let me introduce to you the atom data structure.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;type &amp;#40;atom {}&amp;#41;&amp;#41; ;; This is an atom. 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Also the persistant Array Map which is another data structure in clojure. Typically we don't use vectors when using atoms. &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;type {}&amp;#41; ;; Using {} is a persistantArrayMap in other languages this can be thought of as hashes. 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that you are familiar with the data structures that will be presented lets use atoms and persistantArrayMaps to create a var called stats that will contain two values which will be health points and gold. We can do this by the following...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def stats &amp;#40;atom {:hp 100 :gold 0}&amp;#41;&amp;#41; ;; How to create an atom in clojure. The :hp and :gold are key-words that can be used to look up the values later on.

&amp;#40;println @stats&amp;#41; ;; This shows the value of stats. Notice that you have to add the @ to show the value of stats. This is called dereferencing an atom.

&amp;#40;println &amp;#40;:hp @stats&amp;#41;&amp;#41; ;; This will show you the value for hp which is 100. key-words are useful to look up specific values.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that you can somewhat view and make atoms how would you go about updating stats with a new value? We do this with swap!&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;swap! stats assoc :hp 13&amp;#41; ;; Now you have changed the hp value in stats

&amp;#40;println @stats&amp;#41; ;; You can check that the value of stats changed to 13
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now what if you want to increase or decrease one of the values without changing to a specific number?&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn gold-inc &amp;#91;&amp;#93;
  &amp;#40;swap! stats update-in &amp;#91;:gold&amp;#93; + 1&amp;#41;&amp;#41; ;; using update-in will increase the gold value by 1 every time it is called.

&amp;#40;println @stats&amp;#41; ;; You can now see the the gold as increased by the number of times the previous swap! was called.  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can also write the same gold-inc function using just a function in swap.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn gold-inc &amp;#91;&amp;#93;
  &amp;#40;swap! stats update-in &amp;#91;:gold&amp;#93; inc&amp;#41;&amp;#41; ;; We replaced the + 1 with an existing clojure library function inc which increases the argument by 1.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What if we want a general function that will allow us to increase or decrease a specific value of stats we want. We can write a function called change-by.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn change-by &amp;#91;key val&amp;#93;
  &amp;#40;swap! stats update-in &amp;#91;&amp;#40;keyword key&amp;#41;&amp;#93; + val&amp;#41;&amp;#41; ;; something new is the keyword function that converts a string into a keyword.
  
&amp;#40;change-by &amp;quot;gold&amp;quot; 4&amp;#41; ;; Increase the gold value by 4.  
  
&amp;#40;println @stats&amp;#41; ;; you can now check that your value has changed for gold.  

&amp;#40;change-by &amp;quot;hp&amp;quot; -5&amp;#41; ;; Decreases the hp value by 5.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;One last thing to add is if you want to reset the entire atom. &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;reset! stats {:hp 100 :gold 0}&amp;#41; ;; this will set the value of stats to {:hp 100 :gold 0} 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you have everything you need to make your own little RPG text games!&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 20 Sep 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/basics-of-clojurepart3/
</guid>
<link>
http://salmanhossain.me/posts/basics-of-clojurepart3/
</link>
<title>
Basics of Clojure - Recursion (Part 3)
</title>
<description>
  &lt;p&gt;If you're learning clojure chances are this isn't your first language. So you probably have some familiarity with what recursion is. &lt;br/&gt;&lt;br/&gt; We will start off with making a simple factorial function to get us started with seeing recursion.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn factorial &amp;#91;n&amp;#93;  ;; our factorial function accepting one argument
  &amp;#40;if &amp;#40;= n 1&amp;#41;        ;; checks if n is equal to 1 and if so returns 1
    1
    &amp;#40;&amp;#42; n &amp;#40;factorial &amp;#40;dec n&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;  ;; calls the factorial again after decreasing n by 1.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Alright now lets see if it works by doing a test.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;factorial 3&amp;#41; ;; which we know should be 3x2x1 which is 6. So it works.

;; 6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So lets test the power of our function by doing something larger like 40.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;factorial 40&amp;#41; ;; Oh no a StackOverError. What happened?
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So our function isn't as great as we may think. It won't accept larger numbers.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn factorial &amp;#91;n&amp;#93; ;; Our factorial function accepts one argument.
  &amp;#40;loop &amp;#91;n n        ;; This is the looping part which sets our argument to n
         sum 1&amp;#93;     ;; Our sum is just one for now.
    &amp;#40;if &amp;#40;= n 0&amp;#41;     ;; If n becomes 0 than return the sum basically ends the loop
      sum
      &amp;#40;recur &amp;#40;dec n&amp;#41; &amp;#40;&amp;#42; sum n&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;  ;; This will continue the loop til the if state is met.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using recur will ensure that you won't run into a StackOverError such as the function before was not taking advantage of recur and thus was not head-tail optimized clojure will do tail-call optimization if you use the recur function. Also if use this function now it'll give you a StackOverError but because you have to set the JVM using -Xss and -XThreadStackSize to set the stack size otherwise you'll still get this error for numbers greater than 20. &lt;/p&gt;&lt;p&gt;There is an even shorter two line way of doing it using reduce as I showed you previously.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn factorial &amp;#91;n&amp;#93;
  &amp;#40;reduce &amp;#42; &amp;#40;range 1 &amp;#40;inc n&amp;#41;&amp;#41;&amp;#41;&amp;#41; ;; Takes advantage of range making a list of numbers.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The second one takes advantage of range since it creates a list of numbers and than reduce multiplies all the numbers that range creates.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 18 Sep 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/basics-of-clojurepart2/
</guid>
<link>
http://salmanhossain.me/posts/basics-of-clojurepart2/
</link>
<title>
Basics of Clojure - Mapping (Part 2)
</title>
<description>
&lt;p&gt;Link to Previous Guide: &lt;a href='https://defunsm.github.io/posts-output/basics-of-clojure/'&gt;Basics of Clojure (Part 1)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Today we'll explore how to do some mapping in clojure. &lt;/p&gt;&lt;p&gt;Lets start off with writing a simple function that will add one to whatever argument given.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn add &amp;#91;x&amp;#93; &amp;#40;+ x 1&amp;#41;&amp;#41; ;; function that adds one to the argument given.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now lets make something called a vector which will contain numbers that we want to manipulate later on.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def numbers &amp;#91;1 2 3&amp;#93;&amp;#41; ;; this is how you create a persistant vector.

&amp;#40;type numbers&amp;#41; ;; shows you that the numbers is of type persistantvector.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can map the function add across the vector to each number using map like so.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;map add numbers&amp;#41; ;; This will essentially add 1 to each number in the vector.

;; &amp;#40;2 3 4&amp;#41; 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice how the end result is a LazySeq and not a vector. I'm not going to get into why that happens but you can do some research into the reason why.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;type &amp;#40;map add numbers&amp;#41;&amp;#41; ;; This is of type LazySeq.

&amp;#40;vec &amp;#40;map add numbers&amp;#41;&amp;#41; ;; turns the LazySeq into a vector if it really bothers you.

&amp;#40;type &amp;#40;vec &amp;#40;map add numebrs&amp;#41;&amp;#41;&amp;#41; ;; Shows that the result from using vec on the lazyseq returns a vector.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You could also do it like the following to achieve the same result as previous.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;map &amp;#40;fn &amp;#91;x&amp;#93; &amp;#40;+ x 1&amp;#41;&amp;#41; numbers&amp;#41; ;; this time you're just using an anonymous function. 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now lets say we want the second power of all numbers from 1 to 100? How would we go about such as task? Well lets start off with a function that raises an argument to the second power.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn powertwo &amp;#91;x&amp;#93; &amp;#40;&amp;#42; x x&amp;#41;&amp;#41; ;; raises it to the second power since its multiplying by itself.

&amp;#40;powertwo 7&amp;#41; ;; should give you 49 to see that it works.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we don't wanna write out 1 to 100 so we'll just create a lazyseq for it by the following using range.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;range 101&amp;#41; ;; it gives us all the numbers 0 to 100. However we don't really want 0 so we can do the following.

&amp;#40;rest &amp;#40;range 101&amp;#41;&amp;#41; ;; this gives us a list so add vec to it.

&amp;#40;vec &amp;#40;rest &amp;#40;range 101&amp;#41;&amp;#41;&amp;#41; ;; there we go.

&amp;#40;def numbers &amp;#40;rest &amp;#40;range 101&amp;#41;&amp;#41;&amp;#41; ;; now we have that binded to numbers.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can use map to use our powertwo function over all then numbers.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;map powertwo numbers&amp;#41; ;; now all the numbers are raised to the second power. 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Thats about it and finally as a bonus I'll show you another function reduce. That will give you the sum of all the numbers in the vector!&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;reduce + &amp;#40;map powertwo numbers&amp;#41;&amp;#41; ;; BONUS
&lt;/code&gt;&lt;/pre&gt; 
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 17 Sep 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/basics-of-clojure/
</guid>
<link>
http://salmanhossain.me/posts/basics-of-clojure/
</link>
<title>
Basics of Clojure (Part 1)
</title>
<description>
&lt;p&gt;Hello world is kind of the basic thing to start off with in any kind of programming language so we'll start with that. So open up your favorite text editor that has clojure preferably emacs or vim. Type out the following code. First start a nrepl in your text editor. Type the following into the repl.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;println &amp;quot;Hello World&amp;quot;&amp;#41; ;; displays hello world in the repl.

;; &amp;quot;Hello World&amp;quot;
&lt;/code&gt;&lt;/pre&gt;Now that you have done the hello world lets look at addition, subtraction, multiplication, and division.&lt;pre&gt;&lt;code&gt;&amp;#40;+ 2 3&amp;#41; ;; same as doing 2 + 3

;; 5

&amp;#40;- 2 3&amp;#41; ;; same as doing 2 - 3

;; -1

&amp;#40;&amp;#42; 2 3&amp;#41; ;; same as doing 2 &amp;#42; 3

;; 6

&amp;#40;/ 2 3&amp;#41; ;; same as doing 2 / 3 notice that the result is displayed in a fraction try doing &amp;#40;float &amp;#40;/ 2 3&amp;#41;&amp;#41;.

;; 2/3

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice that the operand is &lt;i&gt;after&lt;/i&gt; the operator. This is polish notation which is used in lisp dialects. This way doing 2 + 2 + 2 is easier since you won't have to repeat the + operator (+ 2 2 2). You can think of the applying the addition to all of the things in the parantheses. At first you might wonder whats the point of doing it like that instead of just doing (2 + 2) which will give you an error.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def five 5&amp;#41; ;; binds the symbol five to the number 5. Creating a global variable.

&amp;#40;+ 2 five&amp;#41; ;; same thing as doing &amp;#40;+ 2 5&amp;#41; since five is binded to 5.

;; 7
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using def is how you can create variables and I'll show you now how to make functions.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;&amp;#40;fn &amp;#91;x&amp;#93; &amp;#40;&amp;#42; x x&amp;#41;&amp;#41; 5&amp;#41; ;; as you can see the fn is how you start the function and than it takes one input the x and than does whatever is in the parantheses.

;; 25

&amp;#40;def square &amp;#40;fn &amp;#91;x&amp;#93; &amp;#40;&amp;#42; x x&amp;#41;&amp;#41;&amp;#41; ;; this is the same thing as before but now we are binding the function to the symbol square. So we can use it else where without typing the function again.

&amp;#40;square 5&amp;#41; ;; same result of 25.

;; 25

&amp;#40;defn square &amp;#91;x&amp;#93; &amp;#40;&amp;#42; x x&amp;#41;&amp;#41; ;; this creates the function and notice how we don't use fn anymore.

&amp;#40;square 5&amp;#41; ;; results are the same so now you have 3 different ways to produce the same result.

;; 25
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A quick useful example of using functions is making a function that calculates the hypothenuse given both legs a and b.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn find-hypothenuse &amp;#91;a b&amp;#93; &amp;#40;Math/sqrt &amp;#40;+ &amp;#40;&amp;#42; a a&amp;#41; &amp;#40;&amp;#42; b b&amp;#41;&amp;#41;&amp;#41;&amp;#41; ;; this is making our function basically using the pythagorean theorem a&amp;#94;2 + b&amp;#94;2 = c&amp;#94;2.

&amp;#40;find-hypothenuse 3 4&amp;#41; ;; if you know your pythagorean triples you know easily this is 5 which is what the result gives us.

;; 5.0  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That is about it for now as you can see you can make some useful things out of these functions and get them to work for you rather easily. Be careful when using def and defn since sometimes it is confusing to realize the subtle difference between them. &lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 11 Sep 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/terminalshell/
</guid>
<link>
http://salmanhossain.me/posts/terminalshell/
</link>
<title>
Terminals and Shell Commands
</title>
<description>
&lt;p&gt;&lt;h2&gt;What is a Terminal?&lt;/h2&gt; &lt;br/&gt;&lt;br/&gt; You might have seen these in those hacker movies. The terminal allows the user to gain access to the computer. However there is much more than just that.&lt;br /&gt; &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/terminals.png&quot; alt=&quot;Terminal&quot; /&gt; &lt;br/&gt;&lt;br/&gt; &lt;h2&gt;What is a TTY? Are they the same?&lt;/h2&gt; &lt;br/&gt;&lt;br/&gt; Often they are said interchangably and they do essentially the same thing. However a key characteristic is that a TTY is provided by the system and the terminal is run on a TTY. While there is no real difference between them unless further examination.  &lt;br/&gt;&lt;br/&gt; &lt;h2&gt;How do I open a Terminal?&lt;/h2&gt; &lt;br/&gt;&lt;br/&gt; On windows you can do this by pressing 'windows key' (windows logo) + 'X'.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;h2&gt;Commands on the Terminal&lt;/h2&gt; &lt;br/&gt;&lt;br/&gt; &lt;code&gt;dir &lt;/code&gt;&amp;nbsp; - list (dir)ectories.&lt;/p&gt;&lt;p&gt;&lt;code&gt;cd &lt;/code&gt;&amp;nbsp; - (c)hange (d)irectory - Changes to a different folder or directory.&lt;/p&gt;&lt;p&gt;&lt;code&gt;mkdir &lt;/code&gt;&amp;nbsp; - (m)a(k)e (dir)ectory - Creates a new folder or directory.&lt;/p&gt;&lt;p&gt;&lt;code&gt;rm &lt;/code&gt;&amp;nbsp; - (r)e(m)oves a file.&lt;/p&gt;&lt;p&gt;&lt;code&gt;mv &lt;/code&gt;&amp;nbsp; - (m)o(v)e a file or can be used to rename a file.&lt;/p&gt;&lt;p&gt;&lt;code&gt;cp &lt;/code&gt;&amp;nbsp; - (c)o(p)y a file to another location.&lt;/p&gt;&lt;p&gt;&lt;code&gt;grep &lt;/code&gt;&amp;nbsp; - prints lines that match the pattern.&lt;/p&gt;&lt;p&gt;&lt;code&gt;touch &lt;/code&gt;&amp;nbsp; - creates a file.&lt;/p&gt;&lt;p&gt;&lt;code&gt;cat &lt;/code&gt;&amp;nbsp; - prints out the contents of a file.&lt;/p&gt;&lt;p&gt;&lt;code&gt;echo &lt;/code&gt;&amp;nbsp; - prints the string.&lt;/p&gt;&lt;p&gt;&lt;code&gt; &gt;&gt; &lt;/code&gt;&amp;nbsp; - appending output without removing previous text in a file.&lt;/p&gt;&lt;p&gt;&lt;code&gt; &gt; &lt;/code&gt;&amp;nbsp; - rewriting the output to a file.&lt;/p&gt;&lt;p&gt;&lt;code&gt; | &lt;/code&gt;&amp;nbsp; - pipes the output.&lt;/p&gt;&lt;p&gt;&lt;code&gt;shutdown &lt;/code&gt;&amp;nbsp; - causes the computer to shutdown.&lt;/p&gt;&lt;p&gt;&lt;code&gt;reboot &lt;/code&gt;&amp;nbsp; - causes the computer to reboot.&lt;/p&gt;&lt;p&gt;&lt;code&gt;man &lt;/code&gt;&amp;nbsp; - searches for the documentation of a certain command.&lt;/p&gt;&lt;p&gt;&lt;code&gt;whatis &lt;/code&gt;&amp;nbsp; - provides a one line description of the command.&lt;/p&gt;&lt;p&gt;&lt;code&gt;whoami &lt;/code&gt;&amp;nbsp; - returns the user.&lt;/p&gt;&lt;p&gt;&lt;code&gt;find &lt;/code&gt;&amp;nbsp; - searches for a file.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Usage of Commands:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Changing/Making/Removing a File&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;touch text.txt &lt;/code&gt; - creates a file called 'text.txt'.&lt;/p&gt;&lt;p&gt;&lt;code&gt;echo &quot;some text&quot; &gt;&gt; text.txt &lt;/code&gt; - writes 'some text' into a file called 'text.txt'.&lt;/p&gt;&lt;p&gt;&lt;code&gt;echo &quot;some other text&quot; &gt; text.txt &lt;/code&gt; - rewrites 'some other text' into a file called 'text.txt'.&lt;/p&gt;&lt;p&gt;&lt;code&gt;echo &quot;&quot; &gt; text.txt &lt;/code&gt; - easy trick to truncate a file without removing it. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Changing/Making/Removing Directories&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;mkdir somedirectory &lt;/code&gt; - creates a directory called 'somedirectory'.&lt;/p&gt;&lt;p&gt;&lt;code&gt;rmdir somedirectory &lt;/code&gt; - removes a directory called 'somedirectory'.&lt;/p&gt;&lt;p&gt;&lt;code&gt;rmdir -r somedirectory &lt;/code&gt; - removes a directory and all of the contents in 'somedirectory'.&lt;/p&gt;&lt;p&gt;&lt;code&gt;cd ~ &lt;/code&gt; - changes to the home directory.&lt;/p&gt;&lt;p&gt;&lt;code&gt;cd / &lt;/code&gt; - changes to the root directory.&lt;/p&gt;&lt;p&gt;&lt;code&gt;cd .. &lt;/code&gt; - moves down a directory.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Miscellaneous&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;man man&lt;/code&gt; - provides information on the man command itself.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;ls | grep &quot;word&quot; &lt;/code&gt; - this will highlight any directory that contains the pattern &quot;word&quot;.&lt;/p&gt;&lt;p&gt;&lt;code&gt;find -name &quot;*.pdf&quot; &lt;/code&gt; - searches for all pdf files.&lt;/p&gt;&lt;p&gt;&lt;code&gt;cat text.txt &lt;/code&gt; - quick way to display the contents of a text file in this case will display the contents of text.txt.&lt;/p&gt;&lt;p&gt;&lt;code&gt;pwd &lt;/code&gt; - displays the current directory that you are in.&lt;/p&gt;&lt;p&gt;&lt;code&gt;cp file.txt /home/file.txt &lt;/code&gt; - copies the file to the home directory saved as file.txt.&lt;/p&gt;&lt;p&gt;&lt;code&gt;cp /home/* /etc &lt;/code&gt; - copies all the home files to /etc directory.&lt;/p&gt;&lt;p&gt;Sources: &lt;a href=&quot;http://askubuntu.com/questions/14284/why-is-a-virtual-terminal-virtual-and-what-why-where-is-the-real-terminal/14294#14294&quot; target=&quot;&lt;i&gt;blank&quot;&gt;Terminals&lt;/a&gt;, &lt;a href=&quot;http://www.linusakesson.net/programming/tty/index.php&quot; target=&quot;&lt;/i&gt;blank&quot;&gt;TTY&lt;/a&gt;&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 08 Sep 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/path-finding/
</guid>
<link>
http://salmanhossain.me/posts/path-finding/
</link>
<title>
Pathfinding
</title>
<description>
&lt;p&gt;&lt;img src=&quot;https://defunsm.github.io/img/pathfinding.gif&quot; alt=&quot;light&quot; /&gt;&lt;/p&gt;&lt;p&gt;You may have been told that light takes the fastest path. Or if you ever used a GPS (Global Positioning System) and magically a path is shown usually the shortest path unless theres traffic than the shortest time is shown. But how? Do protons somehow perform mathmatical calculations in their head to determine which path they should take?  &lt;br/&gt;&lt;br/&gt; Nope, light actually takes all paths and then due to wave interface only the fastest path is &quot;shown&quot;. Of course thats much more simply said and much more than that happens and if really want to know how light takes the &quot;fastest&quot; path you can read Richard P. Feynman's book &lt;i&gt;'The Strange Theory of Light and Matter'&lt;/i&gt;. He explains the topic rather well in a way that you don't need to be a physic's major to understand.  &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/pathfinding2.gif&quot; alt=&quot;time dialation&quot; /&gt; &lt;br/&gt;&lt;br/&gt; As for a GPS, satellites are calibrated percisely because  we know of special relativity in 1905 from Einstein that time for moving objects are slower than objects that are stationary thus with the help of relativity to account for this small change in time we can figure out the position of a person using a gps from the time the signal takes to reach that person. Even a slight error would make the position off by a good amount. Not only that but than the gps calculates the shortest or fastest path to get to your destination using an algorithm.  &lt;br/&gt;&lt;br/&gt; Algorithms can be used for things from data processing, response automation, optimization and pathfinding is just one thing that can be done by implmenting such a thing. The A* algorithm is a common one implemented in games. There are all kinds of algorithms for pathfinding some are better and some are worse, and than there are some that are more extensive and some that are less extensive to use. If you take computer science you'll probably be familiar with the quicksort, bubblesort and later on probably the greedy and divide and conquer algorithm. Point is there is a lot of them. &lt;/p&gt; 
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 07 Sep 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/2016-09-03-using_quil_part_2/
</guid>
<link>
http://salmanhossain.me/posts/2016-09-03-using_quil_part_2/
</link>
<title>
Graphics using Quil in Clojure (Part 2)
</title>
<description>
 &lt;p&gt;If you are interested in following along please read the &lt;a href='https://defunsm.github.io/posts-output/using_quil/'&gt;first part&lt;/a&gt; or it may not make sense. &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://defunsm.github.io/img/quilthird.png&quot; alt=&quot;quil line segments&quot; /&gt;&lt;/p&gt;&lt;p&gt;We are going to continue with the same project as we did in part 1 with newquil-project. However we are going to rewrite the draw function. First we need some defs to be added in the beginning so add the following in the top after the name space.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def mouse-press-time &amp;#40;atom 0&amp;#41;&amp;#41;     ;; The original time for when them mouse was clicked.
&amp;#40;def mouse-hold-x &amp;#40;atom 0&amp;#41;&amp;#41;         ;; The x-location when the mouse was clicked.
&amp;#40;def mouse-hold-y &amp;#40;atom 0&amp;#41;&amp;#41;         ;; The y-location when the mouse was clicked.
&amp;#40;def mouse-release-stage &amp;#40;atom 0&amp;#41;&amp;#41;  ;; The release stage &amp;#40;0 - nothing, 1 - pressed&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Those will come in handy while setting up our draw function which we'll completely rewrite. Change the stroke/stroke-weight/fill to the following values.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  &amp;#40;q/stroke 100&amp;#41;          ;; Change to 100 rather than q/random
  &amp;#40;q/stroke-weight 5&amp;#41;     ;; Change to 5
  &amp;#40;q/fill 100&amp;#41;            ;; Change to 100
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can remove everything else in the draw function. Adding the following into the draw function after the stroke/stroke-weight/fill.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;if &amp;#40;q/mouse-pressed?&amp;#41; ;; When the mouse is pressed it returns true.
    &amp;#40;do &amp;#40;if &amp;#40;= 0 @mouse-release-stage&amp;#41;      ;; This can only happen when mouse-release-stage is 0 so that the values aren't reset every time it's held.
          &amp;#40;do &amp;#40;let &amp;#91;diam 10&amp;#93;                 
                &amp;#40;q/ellipse &amp;#40;q/mouse-x&amp;#41; &amp;#40;q/mouse-y&amp;#41; diam diam&amp;#41;&amp;#41;  ;; Creates a circle of 10 diam.
              &amp;#40;reset! mouse-press-time &amp;#40;q/millis&amp;#41;&amp;#41; ;; Sets the press time to the current time in milliseconds.
              &amp;#40;reset! mouse-hold-x &amp;#40;q/mouse-x&amp;#41;&amp;#41;    ;; Sets the mouse-hold-x time to where the mouse is on the x coordinate.
              &amp;#40;reset! mouse-hold-y &amp;#40;q/mouse-y&amp;#41;&amp;#41;    ;; Same for the y coordinate.
              &amp;#40;reset! mouse-release-stage 1&amp;#41;&amp;#41;&amp;#41;&amp;#41;    ;; Sets the mouse-release-stage to 1 so that the release can trigger only once. 
    &amp;#40;do &amp;#40;if &amp;#40;= 1 @mouse-release-stage&amp;#41;             ;; Only occurs if the mouse-release stage is 1.
          &amp;#40;do &amp;#40;reset! mouse-release-stage 0&amp;#41;                     
              &amp;#40;let &amp;#91;delta-time &amp;#40;- &amp;#40;q/millis&amp;#41; @mouse-press-time&amp;#41; ;; The time change between the click and release.
                    mouse-release-x &amp;#40;q/mouse-x&amp;#41;     ;; Release x coordinate.
                    mouse-release-y &amp;#40;q/mouse-y&amp;#41;     ;; Release y coordinate.
                    delta-x &amp;#40;- mouse-release-x @mouse-hold-x&amp;#41;  ;; Change in x coordinate.
                    delta-y &amp;#40;- mouse-release-y @mouse-hold-y&amp;#41;  ;; Change in y coordinate.
                    distance &amp;#40;Math/sqrt &amp;#40;+ &amp;#40;&amp;#42; delta-x delta-x&amp;#41; &amp;#40;&amp;#42; delta-y delta-y&amp;#41;&amp;#41;&amp;#41; ;; Finds the distance between two points.
                    vel &amp;#40;/ distance delta-time&amp;#41;&amp;#93; ;; Calculates the avg velocity by taking the distance and time changed.
                &amp;#40;let &amp;#91;diam 10&amp;#93;
                  &amp;#40;q/ellipse &amp;#40;q/mouse-x&amp;#41; &amp;#40;q/mouse-y&amp;#41; diam diam&amp;#41;&amp;#41; ; creates another circle at the end point of release.
                &amp;#40;q/stroke 255 0 0&amp;#41;  
                &amp;#40;q/stroke-weight 2&amp;#41;
                &amp;#40;q/line @mouse-hold-x @mouse-hold-y mouse-release-x mouse-release-y&amp;#41; ;; Creates a line from the first to end circle.
                &amp;#40;println &amp;quot;Dt: &amp;quot; delta-time &amp;quot;Dx: &amp;quot; delta-x &amp;quot;Dy: &amp;quot; delta-y &amp;quot;X: &amp;quot; distance &amp;quot;V: &amp;quot; vel&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41; ;; Prints out all the information.

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can run it by the following...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein run
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can click on the applet and release in a different place and should see lines connecting two circles! As a bonus if you want to clear the applet without exiting you can add the following in the draw function...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;if &amp;#40;q/key-pressed?&amp;#41;
  &amp;#40;do &amp;#40;if &amp;#40;= &amp;#40;.toString &amp;#40;q/raw-key&amp;#41;&amp;#41; &amp;quot;c&amp;quot;&amp;#41;
          &amp;#40;do &amp;#40;q/clear&amp;#41;
              &amp;#40;q/background 200&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So this is what your entire core.clj should look like. More or less with some extra key presses.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;ns newquil-project.core
  &amp;#40;:require &amp;#91;quil.core :as q&amp;#93;
            &amp;#91;quil.middleware :as m&amp;#93;&amp;#41;&amp;#41;

&amp;#40;def brush &amp;#40;atom 0&amp;#41;&amp;#41; ;; if the brush is up or down &amp;#40;0 - down 1 - up&amp;#41;
&amp;#40;def mouse-press-time &amp;#40;atom 0&amp;#41;&amp;#41; ;; The original time for the mouse press
&amp;#40;def mouse-hold-x &amp;#40;atom 0&amp;#41;&amp;#41;
&amp;#40;def mouse-hold-y &amp;#40;atom 0&amp;#41;&amp;#41;
&amp;#40;def mouse-release-stage &amp;#40;atom 0&amp;#41;&amp;#41;

&amp;#40;defn setup &amp;#91;&amp;#93;
  &amp;#40;q/frame-rate 20&amp;#41;
  &amp;#40;q/background 200&amp;#41;&amp;#41;

&amp;#40;defn draw &amp;#91;&amp;#93;
  &amp;#40;q/stroke 100&amp;#41;
  &amp;#40;q/stroke-weight 5&amp;#41;
  &amp;#40;q/fill 100&amp;#41;

  &amp;#40;if &amp;#40;= 1 @brush&amp;#41;
    &amp;#40;let &amp;#91;diam &amp;#40;q/random 100&amp;#41;&amp;#93;
      &amp;#40;q/ellipse &amp;#40;q/mouse-x&amp;#41; &amp;#40;q/mouse-y&amp;#41; diam diam&amp;#41;&amp;#41;&amp;#41;

  &amp;#40;if &amp;#40;q/mouse-pressed?&amp;#41;
    &amp;#40;do &amp;#40;if &amp;#40;= 0 @mouse-release-stage&amp;#41;
          &amp;#40;do &amp;#40;let &amp;#91;diam 10&amp;#93;
                &amp;#40;q/ellipse &amp;#40;q/mouse-x&amp;#41; &amp;#40;q/mouse-y&amp;#41; diam diam&amp;#41;&amp;#41;
              &amp;#40;reset! mouse-press-time &amp;#40;q/millis&amp;#41;&amp;#41;
              &amp;#40;reset! mouse-hold-x &amp;#40;q/mouse-x&amp;#41;&amp;#41;
              &amp;#40;reset! mouse-hold-y &amp;#40;q/mouse-y&amp;#41;&amp;#41;
              &amp;#40;reset! mouse-release-stage 1&amp;#41;&amp;#41;&amp;#41;&amp;#41;
    &amp;#40;do &amp;#40;if &amp;#40;= 1 @mouse-release-stage&amp;#41;
          &amp;#40;do &amp;#40;reset! mouse-release-stage 0&amp;#41;
              &amp;#40;let &amp;#91;delta-time &amp;#40;- &amp;#40;q/millis&amp;#41; @mouse-press-time&amp;#41;
                    mouse-release-x &amp;#40;q/mouse-x&amp;#41;
                    mouse-release-y &amp;#40;q/mouse-y&amp;#41;
                    delta-x &amp;#40;- mouse-release-x @mouse-hold-x&amp;#41;
                    delta-y &amp;#40;- mouse-release-y @mouse-hold-y&amp;#41;
                    distance &amp;#40;Math/sqrt &amp;#40;+ &amp;#40;&amp;#42; delta-x delta-x&amp;#41; &amp;#40;&amp;#42; delta-y delta-y&amp;#41;&amp;#41;&amp;#41;
                    vel &amp;#40;/ distance delta-time&amp;#41;&amp;#93;
                &amp;#40;let &amp;#91;diam 10&amp;#93;
                  &amp;#40;q/ellipse &amp;#40;q/mouse-x&amp;#41; &amp;#40;q/mouse-y&amp;#41; diam diam&amp;#41;&amp;#41;
                &amp;#40;q/stroke 255 0 0&amp;#41;
                &amp;#40;q/stroke-weight 2&amp;#41;
                &amp;#40;q/line @mouse-hold-x @mouse-hold-y mouse-release-x mouse-release-y&amp;#41;
                &amp;#40;println &amp;quot;Dt: &amp;quot; delta-time &amp;quot;Dx: &amp;quot; delta-x &amp;quot;Dy: &amp;quot; delta-y &amp;quot;X: &amp;quot; distance &amp;quot;V: &amp;quot; vel&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;

  &amp;#40;if &amp;#40;q/key-pressed?&amp;#41;
    &amp;#40;do &amp;#40;if &amp;#40;= &amp;#40;.toString &amp;#40;q/raw-key&amp;#41;&amp;#41; &amp;quot;q&amp;quot;&amp;#41;
          &amp;#40;do &amp;#40;q/exit&amp;#41;&amp;#41;&amp;#41;
        &amp;#40;if &amp;#40;= &amp;#40;.toString &amp;#40;q/raw-key&amp;#41;&amp;#41; &amp;quot;u&amp;quot;&amp;#41;
          &amp;#40;do &amp;#40;if &amp;#40;= 0 @brush&amp;#41;
                &amp;#40;reset! brush 1&amp;#41;
                &amp;#40;reset! brush 0&amp;#41;&amp;#41;&amp;#41;&amp;#41;
        &amp;#40;if &amp;#40;= &amp;#40;.toString &amp;#40;q/raw-key&amp;#41;&amp;#41; &amp;quot;e&amp;quot;&amp;#41;
          &amp;#40;do &amp;#40;let &amp;#91;radius &amp;#40;q/random 75&amp;#41;&amp;#93;
                &amp;#40;q/box radius radius radius&amp;#41;&amp;#41;&amp;#41;&amp;#41;
        &amp;#40;if &amp;#40;= &amp;#40;.toString &amp;#40;q/raw-key&amp;#41;&amp;#41; &amp;quot;c&amp;quot;&amp;#41;
          &amp;#40;do &amp;#40;q/clear&amp;#41;
              &amp;#40;q/background 200&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;

&amp;#40;q/defsketch example
  :title &amp;quot;Oh so many grey circles&amp;quot;
  :settings #&amp;#40;q/smooth 2&amp;#41;
  :setup setup
  :draw draw
  :size &amp;#91;640 480&amp;#93;&amp;#41;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And there you have it you can make line segments! And do all kinds of things if you add onto them.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 03 Sep 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/getting-started-with-clojure/
</guid>
<link>
http://salmanhossain.me/posts/getting-started-with-clojure/
</link>
<title>
Getting Started with Clojure
</title>
<description>
 &lt;p&gt; Since my guides are related to Clojure. I might as well write a guide of what my clojure setup looks like and also what resources I read to write clojure code.  &lt;/p&gt;&lt;p&gt; &lt;img src=&quot;https://defunsm.github.io/img/started.png&quot; alt=&quot;started&quot; /&gt;  &lt;/p&gt;&lt;p&gt; &lt;a href='https://www.gnu.org/software/emacs/'&gt;Emacs&lt;/a&gt;. I don't think there is more flexability when it comes it. You can also try GitHub's &lt;a href='https://atom.io/'&gt;Atom&lt;/a&gt; Text Editor.  &lt;/p&gt;&lt;p&gt; &lt;img src=&quot;https://defunsm.github.io/img/meme.jpg&quot; alt=&quot;clojure memes&quot; /&gt;  &lt;/p&gt;&lt;p&gt; For Atom you may need to download a few plugins before working with clojure code. Like Downloading the proto-nrepl. Paraindent and etc. &lt;br/&gt;&lt;br/&gt;  After having emacs go ahead and get the &lt;a href='https://github.com/overtone/emacs-live'&gt;emacs live&lt;/a&gt; one which is absolutely almost necessary to write in any lisp dialect.  &lt;br/&gt;&lt;br/&gt; Emacs live might be a little tricky to install but they have an easy install on their repo and typing the following should install emacs live in just one line.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;bash &amp;lt;&amp;#40;curl -fksSL https://raw.github.com/overtone/emacs-live/master/installer/install-emacs-live.sh&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you truely want to you can see my personal additions to emacs &lt;a href='https://github.com/defunSM/emacs-live'&gt;here&lt;/a&gt;. &lt;br/&gt;&lt;br/&gt; Useful resources:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='http://www.braveclojure.com/'&gt;Braveclojure&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/functional-koans/clojure-koans'&gt;Clojure Koans&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://www.amazon.com/Joy-Clojure-Thinking-Way/dp/1935182641/ref=sr_1_2?ie=UTF8&amp;qid=1472942680&amp;sr=8-2&amp;keywords=joy+of+clojure'&gt;The joy of Clojure&lt;/a&gt; (This one is rather advanced.)&lt;br/&gt;&lt;br/&gt;Things to look up as you are learning clojure:&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/reagent-project/reagent'&gt;Reagent&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/daveray/seesaw'&gt;Seesaw&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/clojure/clojurescript'&gt;ClojureScript&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://quil.info/'&gt;Quil&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Fri, 02 Sep 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/using_quil/
</guid>
<link>
http://salmanhossain.me/posts/using_quil/
</link>
<title>
Graphics using Quil in Clojure (Part 1)
</title>
<description>
 &lt;p&gt; I stumbled upon &lt;a href='http://quil.info/'&gt;quil&lt;/a&gt; which can be used to generate rather interesting graphics.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://defunsm.github.io/img/quilsecond.png&quot; alt=&quot;quil&quot; /&gt;  &lt;/p&gt;&lt;p&gt;The way you start a quil project is the following...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein new quil newquil-project
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once you have done that you should have the project and you can cd to it.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;cd newquil-project
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you check the project.clj you should see that quil is added as a dependency. Add the main function in the defproject to the following. So your project.clj should now look like this.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defproject newquil-project &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  :description &amp;quot;FIXME: write description&amp;quot;
  :url &amp;quot;http://example.com/FIXME&amp;quot;
  :license {:name &amp;quot;Eclipse Public License&amp;quot;
            :url &amp;quot;http://www.eclipse.org/legal/epl-v10.html&amp;quot;}
  :dependencies &amp;#91;&amp;#91;org.clojure/clojure &amp;quot;1.8.0&amp;quot;&amp;#93;
                 &amp;#91;quil &amp;quot;2.4.0&amp;quot;&amp;#93;&amp;#93;
  :main newquil-project.core&amp;#41; ;; add this
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can view what you are starting with by running...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein run
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should see a circle changing colors as its orbiting the center of the applet. Now close the applet and clear the entire thing and lets work with a cool example from the quil github repo. So remove everything but the name space and add the following so your core.clj should look like this.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn setup &amp;#91;&amp;#93;
  &amp;#40;q/frame-rate 1&amp;#41;                    ;; Set framerate to 1 FPS &amp;#40;I would set this to 20&amp;#41;
  &amp;#40;q/background 200&amp;#41;&amp;#41;                 ;; Set the background colour to
                                      ;; a nice shade of grey.
&amp;#40;defn draw &amp;#91;&amp;#93;
  &amp;#40;q/stroke &amp;#40;q/random 255&amp;#41;&amp;#41;             ;; Set the stroke colour to a random grey
  &amp;#40;q/stroke-weight &amp;#40;q/random 10&amp;#41;&amp;#41;       ;; Set the stroke thickness randomly
  &amp;#40;q/fill &amp;#40;q/random 255&amp;#41;&amp;#41;               ;; Set the fill colour to a random grey

  &amp;#40;let &amp;#91;diam &amp;#40;q/random 100&amp;#41;             ;; Set the diameter to a value between 0 and 100
        x    &amp;#40;q/random &amp;#40;q/width&amp;#41;&amp;#41;       ;; Set the x coord randomly within the sketch
        y    &amp;#40;q/random &amp;#40;q/height&amp;#41;&amp;#41;&amp;#93;     ;; Set the y coord randomly within the sketch
    &amp;#40;q/ellipse x y diam diam&amp;#41;&amp;#41;&amp;#41;         ;; Draw a circle at x y with the correct diameter

&amp;#40;q/defsketch example                  ;; Define a new sketch named example
  :title &amp;quot;Oh so many grey circles&amp;quot;    ;; Set the title of the sketch
  :settings #&amp;#40;q/smooth 2&amp;#41;             ;; Turn on anti-aliasing
  :setup setup                        ;; Specify the setup fn
  :draw draw                          ;; Specify the draw fn
  :size &amp;#91;323 200&amp;#93;&amp;#41;                    ;; You struggle to beat the golden ratio &amp;#40;640 by 480&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Now I dont really prefer the golden ratio so I like changing the size to 640 to 480. As well as changing the frame rate to 20. So the circles pop up faster. Now you can run it and see the grey circles popup in the applet. Thats pretty neat. However what If I wanted to control when these circles by clicking on the applet? We could do that rather easily. Just add a condition in the draw function such as the following...&lt;pre&gt;&lt;code&gt;&amp;#40;defn draw &amp;#91;&amp;#93;
  &amp;#40;q/stroke &amp;#40;q/random 255&amp;#41;&amp;#41;             ;; Set the stroke colour to a random grey
  &amp;#40;q/stroke-weight &amp;#40;q/random 10&amp;#41;&amp;#41;       ;; Set the stroke thickness randomly
  &amp;#40;q/fill &amp;#40;q/random 255&amp;#41;&amp;#41;               ;; Set the fill colour to a random grey

  &amp;#40;if &amp;#40;q/mouse-pressed?&amp;#41;                    ;; add this condition.
    &amp;#40;do &amp;#40;let &amp;#91;diam &amp;#40;q/random 100&amp;#41;             ;; Set the diameter to a value between 0 and 100
              x    &amp;#40;q/random &amp;#40;q/width&amp;#41;&amp;#41;       ;; Set the x coord randomly within the sketch
              y    &amp;#40;q/random &amp;#40;q/height&amp;#41;&amp;#41;&amp;#93;     ;; Set the y coord randomly within the sketch
          &amp;#40;q/ellipse x y diam diam&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41; ;; Draw a circle at x y with the correct diameter
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But why stop there what if you want circles to pop up at where you click on the applet? Using (q/mouse-x) and (q/mouse-y) you can easily do this by changing draw to this.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn draw &amp;#91;&amp;#93;
  &amp;#40;q/stroke &amp;#40;q/random 255&amp;#41;&amp;#41;             ;; Set the stroke colour to a random grey
  &amp;#40;q/stroke-weight &amp;#40;q/random 10&amp;#41;&amp;#41;       ;; Set the stroke thickness randomly
  &amp;#40;q/fill &amp;#40;q/random 255&amp;#41;&amp;#41;               ;; Set the fill colour to a random grey

  &amp;#40;if &amp;#40;q/mouse-pressed?&amp;#41;                    ;; add this condition.
    &amp;#40;do &amp;#40;let &amp;#91;diam &amp;#40;q/random 100&amp;#41;&amp;#93;
          &amp;#40;q/ellipse &amp;#40;q/mouse-x&amp;#41; &amp;#40;q/mouse-y&amp;#41; diam diam&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41; ;; Draw a circle at x y with the correct diameter
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that you have a cool drawing tool that makes circles!&lt;/p&gt; 
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 01 Sep 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/2016-08-31-Using_Swing_Part_2/
</guid>
<link>
http://salmanhossain.me/posts/2016-08-31-Using_Swing_Part_2/
</link>
<title>
Creating JFrames using Swing APIs in Clojure (Part 2)
</title>
<description>
 &lt;p&gt;Ok so continuing on with what we have so far. If you havent read the &lt;a href='https://defunsm.github.io/posts-output/2016-08-30-Using_Swing/'&gt;first part&lt;/a&gt; I suggest reading it to follow through. I want to show you a quick way to add more flavor to your frame since it looks rather dull. One way to do this is by adding substance to your dependencies which is basically like a bunch of themes for your frames. &lt;br/&gt;&lt;br/&gt; Add the following to your dependencies in your project.clj&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#91;com.github.insubstantial/substance &amp;quot;7.1&amp;quot;&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can import substance by changing your namespace to the following.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;ns hello-swing.core
  &amp;#40;:import org.pushingpixels.substance.api.SubstanceLookAndFeel&amp;#41; ;; add this
  &amp;#40;:gen-class&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that you can use the substance themes you can set a default theme by adding to your -main.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn -main &amp;#91;&amp;#93;
  &amp;#40;native!&amp;#41;
  &amp;#40;invoke-later
   &amp;#40;-&amp;gt; jframe show!&amp;#41;
   &amp;#40;SubstanceLookAndFeel/setSkin &amp;quot;org.pushingpixels.substance.api.skin.GraphiteAquaSkin&amp;quot;&amp;#41;&amp;#41;&amp;#41; ;; add this
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that you have set the theme automatically you can run what you have so far.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ lein run
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A frame like this should appear now and as you notice it has been decorated.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://defunsm.github.io/img/jframesecond.png&quot; alt=&quot;jframe 2&quot; /&gt;&lt;/p&gt;&lt;p&gt;However you may now notice that there is a problem when opening the menubar and it just disappears. To fix this add pack! to your -main.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn -main &amp;#91;&amp;#93;
  &amp;#40;native!&amp;#41;
  &amp;#40;invoke-later
   &amp;#40;-&amp;gt; jframe pack! show!&amp;#41; ;; add pack! Which should fix the menubar problem.
   &amp;#40;SubstanceLookAndFeel/setSkin &amp;quot;org.pushingpixels.substance.api.skin.GraphiteAquaSkin&amp;quot;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now what if we want to select what theme we want? Now we can use the menubar to select what theme we want. In order to do this make a menubar item called theme-selector.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def jframe &amp;#40;frame :title &amp;quot;hello Frame&amp;quot;
                   :menubar &amp;#40;menubar :items &amp;#91;&amp;#40;menu :text &amp;quot;File&amp;quot; :items &amp;#91;close-frame theme-selector&amp;#93;&amp;#41;&amp;#93;&amp;#41; ;; add theme selector
                   :height 300
                   :width 300
                   :on-close :exit ;; Exits on close
                   :content &amp;#40;label :text &amp;quot;Hello this is a label!&amp;quot;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now make the menu-item for the theme-selector. Also don't forget to add theme-select into :items in your jframe.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def theme-select &amp;#40;menu-item :text &amp;quot;Theme Select&amp;quot;
                               :tip &amp;quot;This will allow you to select a theme.&amp;quot;
                               :listen &amp;#91;:action handler&amp;#93;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that you have the theme-select you can change your handler to do something when that is clicked on.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn handler &amp;#91;event&amp;#93;
  &amp;#40;let &amp;#91;e &amp;#40;.getActionCommand event&amp;#41;&amp;#93;
    &amp;#40;if &amp;#40;= e &amp;quot;Close Frame&amp;quot;&amp;#41;
      &amp;#40;System/exit 0&amp;#41;&amp;#41;
    &amp;#40;if &amp;#40;= e &amp;quot;Theme Select&amp;quot;&amp;#41;  ;; add this to incorporate the theme selector.
      &amp;#40;-&amp;gt; &amp;#40;frame :title &amp;quot;Themes&amp;quot; :id 3 :content &amp;#40;theme-selector&amp;#41; :on-close :hide :height 600 :width 300&amp;#41; pack! show!&amp;#41;&amp;#41;&amp;#41;&amp;#41; ;; frame for the themes.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we create the actual combobox that will select the theme.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn theme-selector &amp;#91;&amp;#93;
  &amp;#40;horizontal-panel  
   :items &amp;#91;
           &amp;#40;combobox
            :model    &amp;#40;vals &amp;#40;SubstanceLookAndFeel/getAllSkins&amp;#41;&amp;#41; ;; list out all of the skins
            :renderer &amp;#40;fn &amp;#91;this {:keys &amp;#91;value&amp;#93;}&amp;#93;  ;; takes the values and displays them from all the skins.
                        &amp;#40;text! this &amp;#40;.getClassName value&amp;#41;&amp;#41;&amp;#41;
            :listen   &amp;#91;:selection &amp;#40;fn &amp;#91;e&amp;#93; 
                                    &amp;#40;invoke-later
                                     &amp;#40;-&amp;gt; e
                                         selection
                                         .getClassName
                                         SubstanceLookAndFeel/setSkin&amp;#41;&amp;#41;&amp;#41;&amp;#93;&amp;#41;&amp;#93;&amp;#41;&amp;#41; ;; changes the theme to the skin selected.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can open it up and go to file and select theme-selector which will allow you to change the theme!&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 31 Aug 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/2016-08-30-Using_Swing/
</guid>
<link>
http://salmanhossain.me/posts/2016-08-30-Using_Swing/
</link>
<title>
Creating JFrames using Swing APIs in Clojure (Part 1)
</title>
<description>
&lt;p&gt;Swing is a powerful java library and also at times be complex however thanks to Dave Ray's &lt;a href='https://github.com/daveray/seesaw'&gt;seesaw&lt;/a&gt; which you should look at if you plan on doing any GUI building with Clojure. I suggest reading the &lt;a href='https://gist.github.com/daveray/1441520'&gt;tutorial&lt;/a&gt; as well to get used to the basics. But here I want to show you some things that aren't quite mentioned specifically in the tutorial. &lt;br/&gt;&lt;br/&gt; So lets create a new leiningen project.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ lein new hello-swing
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will create the leiningen project and now add the seesaw library to your projects.clj. Edit your project.clj file to include Seesaw. As well as adding where the main function will reside which will be in the hello-swing.core.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defproject hello-swing &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  :description &amp;quot;FIXME: write description&amp;quot;
  :url &amp;quot;http://example.com/FIXME&amp;quot;
  :license {:name &amp;quot;Eclipse Public License&amp;quot;
            :url &amp;quot;http://www.eclipse.org/legal/epl-v10.html&amp;quot;}
  :dependencies &amp;#91;&amp;#91;org.clojure/clojure &amp;quot;1.8.0&amp;quot;&amp;#93;
                 &amp;#91;seesaw &amp;quot;1.4.2&amp;quot;&amp;#93;&amp;#93; ;; add this
  :main hello-swing.core&amp;#41; ;; add this
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Afterwards let start writing into our core.clj which is in the /src directory. Set up your core.clj as the following.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;ns hello-swing.core
  &amp;#40;:gen-class&amp;#41;&amp;#41; ;; In case you want to make this into a jar.

&amp;#40;use 'seesaw.core&amp;#41; ;; allows you to use the seesaw library. However highly discouraged in production code.

&amp;#40;def jframe &amp;#40;frame :title &amp;quot;hello Frame&amp;quot;
                   :height 300 
                   :width 300
                   :on-close :exit ;; Exits on close you can also set it to :hide which will make the frame disappear.
                   :content &amp;#40;label :text &amp;quot;Hello this is a label!&amp;quot;&amp;#41;&amp;#41;&amp;#41; ;; A simple label with text.

&amp;#40;defn -main &amp;#91;&amp;#93;
  &amp;#40;native!&amp;#41;     ;; Makes the frame appear correctly based on the OS. Which should be called as soon as possible.
  &amp;#40;invoke-later ;; executes the body in the near future.
   &amp;#40;-&amp;gt; jframe show!&amp;#41;&amp;#41;&amp;#41; ;; displays the jframe.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can run the code by entering the following in the project directory.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ lein run
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should see a frame like this.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://defunsm.github.io/img/jframefirst.png&quot; alt=&quot;jframe&quot; /&gt;&lt;/p&gt;&lt;p&gt;Now that you made a frame pop up lets decorate the frame to be a little nicer. Adding a menubar to close it.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;ns hello-swing.core
  &amp;#40;:gen-class&amp;#41;&amp;#41;

&amp;#40;use 'seesaw.core&amp;#41;

&amp;#40;defn handler &amp;#91;event&amp;#93;  ;; Handler that will be listening to the action commands being recieved.
  &amp;#40;let &amp;#91;e &amp;#40;.getActionCommand event&amp;#41;&amp;#93;
    &amp;#40;if &amp;#40;= e &amp;quot;Close Frame&amp;quot;&amp;#41;
      &amp;#40;System/exit 0&amp;#41;&amp;#41;&amp;#41;&amp;#41; ;; Exits the program with a exit status of 0.

&amp;#40;def close-frame &amp;#40;menu-item :text &amp;quot;Close Frame&amp;quot;
                            :tip &amp;quot;This will close the frame.&amp;quot;
                            :listen &amp;#91;:action handler&amp;#93;&amp;#41;&amp;#41;  ;; Assigning a function that will handle its action commands.

&amp;#40;def jframe &amp;#40;frame :title &amp;quot;hello Frame&amp;quot;
                   :menubar &amp;#40;menubar :items &amp;#91;&amp;#40;menu :text &amp;quot;File&amp;quot; :items &amp;#91;close-frame&amp;#93;&amp;#41;&amp;#93;&amp;#41; ;; adding a menubar
                   :height 300
                   :width 300
                   :on-close :exit ;; Exits on close
                   :content &amp;#40;label :text &amp;quot;Hello this is a label!&amp;quot;&amp;#41;&amp;#41;&amp;#41; ;; Label

&amp;#40;defn -main &amp;#91;&amp;#93;
  &amp;#40;native!&amp;#41;
  &amp;#40;invoke-later
   &amp;#40;-&amp;gt; jframe show!&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I think that'll be all for today since that in itself is a lot specially if you never worked with GUI's before. You can mess around and make the menubar do all kinds of things just by changing the (System/exit 0) part.&lt;/p&gt;&lt;p&gt;In the next part we will be doing themes.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 30 Aug 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/2016-08-29-Clojure_GUI_as_an_Exe/
</guid>
<link>
http://salmanhossain.me/posts/2016-08-29-Clojure_GUI_as_an_Exe/
</link>
<title>
Creating an Exechuteable GUI
</title>
<description>
 &lt;p&gt; Note: Before following this guide you may want to familiar yourself with &lt;a href='https://defunsm.github.io/posts-output/2016-08-28-jar/'&gt;making jars&lt;/a&gt;.   &lt;br/&gt;&lt;br/&gt;  You should have the uberjar which can be created by following a guide I have written previously.  Now you want to take it one step further and make the jar into an exe to distribute to different windows platforms. There is a few ways to go about it but I typically use &lt;a href='http://launch4j.sourceforge.net/'&gt;launch4j&lt;/a&gt;.  &lt;br/&gt;&lt;br/&gt;  After downloading Launch4j precede to the following steps... &lt;br/&gt;&lt;br/&gt; Step 1:  &lt;br/&gt;&lt;br/&gt; Open it up and fill in the output file and Jar field as the following. The output file determines what the .exe file will be called. While the jar field is the uber-jar you select and the launch4j will use to create the .exe file.  &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/launch4jfirst.png&quot; alt=&quot;image&quot; /&gt; &lt;br/&gt;&lt;br/&gt; Step 2:  &lt;br/&gt;&lt;br/&gt; After filling those fields switch to the header tab. Click on the GUI radio button unless you're using just console.  &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/launch4jsecond.png&quot; alt=&quot;image&quot; /&gt; &lt;br/&gt;&lt;br/&gt; Step 3:  &lt;br/&gt;&lt;br/&gt; Click the JRE tab and enter Min JRE version as what minimum java you need to run the code.  Also click the + property button by variables / registry field to add the EXEDIR property. &lt;br/&gt;&lt;br/&gt; &lt;img src=&quot;https://defunsm.github.io/img/launch4jthird.png&quot; alt=&quot;image&quot; /&gt; &lt;/p&gt;&lt;p&gt;Now click on build wrapper which is the  gear icon on top and it should build your .exe file!&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 29 Aug 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/2016-08-28-jar/
</guid>
<link>
http://salmanhossain.me/posts/2016-08-28-jar/
</link>
<title>
Clojure File to Standalone Jar
</title>
<description>
&lt;p&gt;Clojure luckily relies on the JVM and thus it is easy to turn a .clj into a .jar with relative ease. Of course there are some things you have to watch out for such as making sure that the -main function contains everything and nothing is in the top level that's supposed to be in the -main function. &lt;br/&gt;&lt;br/&gt; So start with the basics start a leiningen project running the following...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ lein new defunsmproject
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will create a new leiningen project which now means you should have a project.clj file. That looks something like this.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defproject defunsmproject &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  :description &amp;quot;FIXME: write description&amp;quot;
  :url &amp;quot;http://example.com/FIXME&amp;quot;
  :license {:name &amp;quot;Eclipse Public License&amp;quot;
            :url &amp;quot;http://www.eclipse.org/legal/epl-v10.html&amp;quot;}
  :dependencies &amp;#91;&amp;#91;org.clojure/clojure &amp;quot;1.8.0&amp;quot;&amp;#93;&amp;#93;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Your core.clj should look like this which is located in the src directory of the leiningen project directory. &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;ns defunsmproject.core&amp;#41;

&amp;#40;defn foo
  &amp;quot;I don't do a whole lot.&amp;quot;
  &amp;#91;x&amp;#93;
  &amp;#40;println x &amp;quot;Hello, World!&amp;quot;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Step 1: &lt;br/&gt;&lt;br/&gt;  Edit project.clj so that leiningen knows which one is your -main function.  In this cause it would be defunsmproject.core.  &lt;br/&gt;&lt;br/&gt; As well as adding :profiles telling leiningen how to build the jar file.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defproject defunsmproject &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  :description &amp;quot;FIXME: write description&amp;quot;
  :url &amp;quot;http://example.com/FIXME&amp;quot;
  :license {:name &amp;quot;Eclipse Public License&amp;quot;
            :url &amp;quot;http://www.eclipse.org/legal/epl-v10.html&amp;quot;}
  :dependencies &amp;#91;&amp;#91;org.clojure/clojure &amp;quot;1.8.0&amp;quot;&amp;#93;&amp;#93;
  :profiles {:uberjar {:aot &amp;#91;defunsmproject.core&amp;#93;}} ;; add this
  :jar-name &amp;quot;defunsmproject.jar&amp;quot; ;; add this
  :uberjar-name &amp;quot;defunsmproject-uber.jar&amp;quot; ;; add this
  :main defunsmproject.core&amp;#41; ;; add this
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Step 2:  &lt;br/&gt;&lt;br/&gt; Add :gen-class and -main function in the core.clj.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;ns defunsmproject.core
  &amp;#40;:gen-class&amp;#41;&amp;#41; ;; add this gen-class

&amp;#40;defn -main &amp;#91;&amp;amp; args&amp;#93;  ;; add this -main function
  &amp;#40;println &amp;quot;Converting a clojure file to a standalone jar!&amp;quot;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Step 3:  &lt;br/&gt;&lt;br/&gt; Now you can make a uberjar which is the standalone jar by running ...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ lein uberjar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If that worked than your in good luck and should have a uber-jar and a jar. The standalone one that you probably want is the uber-jar one which will be in the the target directory that was generated. &lt;br/&gt;&lt;br/&gt; To run the jar file do the following. And you should see the output as expected. &lt;br/&gt;&lt;br/&gt;&lt;pre&gt;&lt;code&gt;$ java -jar defunsmproject-uber.jar
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;If you run into problems make sure that your project.clj and core.clj is set up just like mine. Otherwise you now have a .jar file from a .clj file!&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 28 Aug 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://salmanhossain.me/posts/2016-08-27-new/
</guid>
<link>
http://salmanhossain.me/posts/2016-08-27-new/
</link>
<title>
A New Beginning
</title>
<description>
 &lt;p&gt; This is a post to clerify the usage of this site. One this site was created in order to demonstrate the knowledge that I will accumulate over time during my time in college. Two I accidently deleted all my web files from the previous site I was worked on over the past year (3 AM and I actually did the rm -rf command and I also deleted my backup files thinking I didnt need them. Yeah.) Hopefully this one will be even better than the previous one. Third I'll be posting guides and once in a blue moon something more intimate. I think that's all I'm going to type since I been going on with 4 hours of sleep this entire day... night.  &lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 27 Aug 2016 00:00:00 -0400
</pubDate>
</item>
</channel>
</rss>
